{"version":3,"sources":["accounts/module.js","cases/module.js","contacts/module.js","dashboard/module.js","deals/module.js","email/module.js","accounts/directives/module.js","base/controllers/module.js","base/directives/module.js","base/filters/module.js","base/services/module.js","cases/directives/module.js","cases/services/module.js","contacts/directives/module.js","contacts/services/module.js","dashboard/directives/module.js","deals/directives/module.js","deals/services/module.js","email/directives/module.js","email/services/module.js","accounts/services.js","base/analytics.js","base/app.js","base/utils.js","cases/cases.js","email/emailtemplate.js","email/inbox.js","forms/formsets.js","forms/select2.js","forms/show-and-hide.js","provide/dataprovider.js","accounts/controllers/delete.js","accounts/controllers/detail.js","accounts/controllers/list.js","accounts/controllers/upsert.js","accounts/directives/detail_widget.js","base/controllers/base.js","base/controllers/header.js","base/controllers/sidebar.js","base/directives/checkbox.js","base/directives/date_formatter.js","base/directives/detail_delete.js","base/directives/resize_iframe.js","base/directives/sort_column.js","base/directives/spinnerbar.js","base/filters/min_value.js","base/filters/nl2br.js","base/filters/relative_date.js","base/filters/trust_as_resource_url.js","base/services/cookie.js","base/services/hl_date.js","base/services/hl_filters.js","base/services/hl_text.js","base/services/notifications.js","cases/controllers/assignto.js","cases/controllers/create.js","cases/controllers/delete.js","cases/controllers/detail.js","cases/controllers/edit.js","cases/controllers/list.js","cases/controllers/postpone.js","cases/directives/list_widget.js","cases/directives/update_expire_date.js","cases/services/case.js","cases/services/casedetail.js","cases/services/casestatus.js","cases/services/unassignedcases.js","contacts/controllers/create.js","contacts/controllers/delete.js","contacts/controllers/detail.js","contacts/controllers/edit.js","contacts/controllers/list.js","contacts/directives/detail_widget.js","contacts/directives/list_widget.js","contacts/services/contacdetail.js","contacts/services/contact.js","contacts/services/contacttest.js","dashboard/controllers/base.js","dashboard/directives/callback.js","dashboard/directives/dealstocheck.js","dashboard/directives/feedback.js","dashboard/directives/followup.js","dashboard/directives/mycases.js","dashboard/directives/queuesize.js","dashboard/directives/teams.js","dashboard/directives/unassignedcases.js","dashboard/directives/unreademail.js","deals/controllers/create.js","deals/controllers/delete.js","deals/controllers/detail.js","deals/controllers/edit.js","deals/controllers/followup_widget.js","deals/controllers/list.js","deals/directives/list_widget.js","deals/services/deal.js","deals/services/dealdetail.js","deals/services/dealstages.js","email/controllers/base.js","email/controllers/compose.js","email/controllers/detail.js","email/controllers/email_list.js","email/controllers/label_list.js","email/directives/contact_icon.js","email/services/emailaccount.js","email/services/emaildetail.js","email/services/emaillabel.js","email/services/emailmessage.js","email/services/emailtemplate.js","email/services/recipientinformation.js","email/services/selectedemailaccount.js"],"names":["angular","module","Account","$filter","$http","$resource","getAccounts","queryString","page","pageSize","orderColumn","orderedAsc","sort","url","method","params","type","q","size","then","response","accounts","data","hits","total","getEmailAddress","account","this","primaryEmails","email_addresses","status","length","update","id","delete","prototype","factory","getPhone","phone_mobile","phone_work","phone_other","getPhones","phones","concat","get","transformResponse","fromJson","phone","$inject","i","s","o","g","r","a","m","push","arguments","l","Date","createElement","getElementsByTagName","async","src","parentNode","insertBefore","window","document","ga","settings","$rootScope","layout","pageSidebarClosed","appConfig","$breadcrumbProvider","$controllerProvider","$httpProvider","$resourceProvider","$urlRouterProvider","setOptions","templateUrl","includeAbstract","allowGlobals","defaults","xsrfCookieName","xsrfHeaderName","stripTrailingSlashes","otherwise","runApp","$state","currentUser","config","run","$","on","$phoneNumberInput","val","match","typeId","attr","replace","select2","startsWith","substring","e","currentTarget","each","is","HLSelect2","init","undefined","currentStatus","HLCases","caseUpdateUrl","caseUpdateAssignedToUrl","caseId","statusSpan","statusDiv","parcelProviderSelect","parcelIdentifierInput","assignedToField","assignToMeButton","currentAssignedTo","self","isPlainObject","extend","initListeners","setCurrentStatus","cf","event","changeStatus","call","changedParcelProviderSelect","changeAssignedTo","closest","radio_element","target","$radio_element","ajax","beforeSend","HLApp","addCSRFHeader","dataType","done","text","load_notifications","fail","removeClass","addClass","select","$select","assignee","html","name","always","addAssignToMeButton","after","click","preventDefault","change","jQuery","HLEmailTemplates","insertButton","variablesField","fileUploadField","valuesField","bodyFileField","templateVariableField","attachmentDeleteButton","attachmentUndoDeleteButton","templateAttachmentName","wysiHtmlToolbar","submitButton","updateVariableOptions","templateVariable","HLInbox","getEditor","focus","composer","commands","exec","handleValueChange","handleBodyFileChange","attachmentRow","toggleMarkDeleted","handleFormSubmit","toolbar","find","srcElement","el","valueSelect","category","not","remove","parameterChoices","Contact","contact.full_name","contact.work_phone","contact.last_name","contact.twitter","contact.mobile_phone","contact.first_name","contact.linkedin","contact.preposition","contact.primary_email","contact.account_city","User","user.full_name","user.first_name","user.phone_number","user.preposition","user.linkedin","user.twitter","user.current_email_address","user.last_name","user.user_group","account.work_phone","account.name","account.any_email_address","parameter","label","append","value","openVariable","closeVariable","form","uploadedTemplate","ajaxStart","Metronic","blockUI","nextAll","eq","ajaxStop","unblockUI","ajaxSubmit","parseEmailTemplateUrl","success","error","fields","index","field","hasOwnProperty","setValue","body_html","element","blur","rowAttachmentName","hasClass","$containerDiv","innerHTML","getValue","$form","submit","editor","accountDeactivatedMessage","inboxCcInput","inboxBccInput","singleMessageSelector","templateField","inboxComposeSubmit","replyButton","tagsAjaxSelector","emailAccountInput","sendToNormalField","overwriteTemplateConfirm","emptyTemplateAttachmentRow","templateAttachmentDeleteButton","templateAttachmentUndoDeleteButton","templateAttachmentsDiv","templateAttachmentIds","templateAttachmentId","templateAttachmentRow","currentTemplate","previousSendToNormalLength","initUniform","handleAdditionalRecipientsInput","changeTemplateField","inputLength","hide","show","handleInboxComposeSubmit","tags","handleTagsAjaxChange","handleTemplateAttachmentsChange","which","customParser","parse","elementOrHtml","rules","context","cleanUp","initEmailCompose","emailComposeConfig","initWysihtml5","loadDefaultTemplate","loadDefaultEmailTemplate","template","recipient","decodedEditorValue","decodeEntities","$composeEmailTemplate","str","textContent","wysihtml5","Editor","parser","handleTables","observe","initialEditorValue","resizeEditor","style","height","scrollHeight","inputType","$ccLink","$inputField","templateChanged","templateList","selectedTemplate","parseInt","recipientId","emailAccountId","object_id","sender","getTemplateUrl","getJSON","setNewEditorValue","toastr","inboxCompose","buttonName","location","modal","draftPk","appendTo","templateContent","button","filter","tagsAjax","values","recipient_data","join","defaultEmailTemplateUrl","htmlPart","editorValue","newEditorValue","changeTemplate","confirm","addedTemplateText","diff","messageType","JsDiff","diffChars","forEach","part","added","removed","container","emailTemplate","processAttachments","attachments","empty","attachmentIds","attachment","clone","removeAttr","toggleClass","newAttachmentIds","attachmentId","setSuccesURL","previousState","HLFormsets","formsetClass","formset","body","formset_element","parents","add_element","indent","stop","slideDown","tagInputs","ajaxInputs","tagsAjaxClass","ajaxPageLimit","clearText","setupSelect2","minimumResultsForSearch","createTagInputs","createAjaxInputs","$this","split","tokenSeparators","width","_data","options","cache","term","filterQuery","filterquery","term_stripped","trim","filters","indexOf","filter_val","filter_name","results","more","parsed_data","hit","used_text","email_address","displayed_text","unshift","initSelection","item","callback","createSearchChoice","localeCompare","openOnEnter","multiple","initial","HLShowAndHide","selector","parent","input","setTimeout","HLDataProvider","buttonDataProvider","loadingText","loadingHeader","provideUrl","dataProviderClass","errorHeader","errorText","successHeader","successText","hiddenSuccessHeader","hiddenSuccessText","overwriteConfirmHeader","formsets","findDataProviderInfo","$button","$input","domain","sanitizeDomain","info","message","fillForm","slice","checkOverwrite","loopTroughFields","checkOverwriteFields","checkOverwriteLabels","fillField","loopTroughFormSets","filledHiddenField","$foundInput","$formsetDiv","$formsetAddLink","newFormsets","j","$newElement","newFormset","insertNewFormset","key","hasFoundInput","newVal","uniqueValues","JSON","stringify","trigger","accountConfig","$stateProvider","state","views","@","controller","AccountDeleteController","$stateParams","go","AccountDetailController","ncyBreadcrumb","resolve","AccountDetail","accountId","$promise","$scope","CaseDetail","ContactDetail","DealDetail","conf","pageTitleBig","pageTitleSmall","caseList","query","dealList","contactList","AccountList","controllerAs","$window","Cookie","activate","_setupWatches","deleteAccount","vm","table","items","splice","alert","_updateTableSettings","cookie","put","order","visibility","_updateAccounts","column","ascending","totalItems","$watchGroup","$watchCollection","setFilter","exportToCsv","getParams","substr","open","contactInformation","assignedTo","created","modified","customerId","elem","AccountUpsertController","accountPromise","AccountDetailWidget","restrict","scope","directive","abstract","BaseController","Notifications","$on","_setPreviousState","_contentLoadedActions","loadNotifications","notifications","level","console","log","initComponents","autosize","toState","toParams","fromState","fromParams","href","headTitle","headerController","Layout","initHeader","sidebarController","initSidebar","checkbox","transclude","model","dateFormatter","dateFilter","require","link","attrs","ngModel","$formatters","detailDelete","resizeIframe","maxHeight","outerHeight","ifDoc","ifRef","contentWindow","documentElement","e1","contentDocument","e2","subtractHeights","offset","top","sortColumn","_setSortableIcon","sorted","$apply","ngSpinnerBar","scrollTop","pageAutoScrollOnLoad","minValue","b","nl2br","$sce","msg","is_xhtml","breakTag","trustAsHtml","relativeDate","date","fallbackDateFormat","compareWithMidnight","calculateDelta","day","delta","hour","minute","week","month","year","now","setHours","setMinutes","setSeconds","Math","round","getFullYear","getMonth","getDate","innerWidth","ceil","floor","trustAsResourceUrl","$cookieStore","CookieFactory","prefix","defaultValue","service","HLDate","getSubtractedDate","days","setDate","HLFilters","updateFilterQuery","displayFilterClear","filterStrings","filterList","selected","clearFilters","HLText","String","hlCapitalize","newString","toLowerCase","charAt","toUpperCase","CaseAssignModal","$modalInstance","myCase","Case","_getUsers","users","ok","assigned_to","currentAssigneeId","close","cancel","dismiss","assigned_to_id","caseConfig","CaseCreateController","skip","CaseDeleteController","req","headers","Content-Type","CaseDetailController","$modal","CaseStatuses","getPriorityDisplay","is_archived","priority","changeCaseStatus","assignCase","assigned_to_name","archive","archived","unarchive","openPostponeWidget","modalInstance","result","current","reload","caseStatuses","CaseEditController","casePromise","caseObject","subject","CaseListController","$location","getFilterList","filterListCookie","getCaseTypes","cases","updateTableSettings","searchQuery","updateCases","getCases","search","client","expires","createdBy","setSearchQuery","toggleArchived","assignTo","CasePostponeModal","_watchCloseDatePicker","$watch","newValue","oldValue","_updateDayAndCloseModal","expireDate","newDate","disabledDates","mode","getDay","openDatePicker","$event","stopPropagation","pickerIsOpen","postponeWithDays","getFutureDate","futureDate","dateFormat","datepickerOptions","startingDay","CaseListWidget","title","list","addLink","updateCaseExpireDate","daysToAdd","isNaN","due","addBusinessDays","datepicker","$q","_getSorting","casetypes","sorting","getMyCasesWidget","deferred","defer","promise","getCallbackRequests","callbackCase","accountPhone","contact","contactPhone","getUnassignedCasesForTeam","teamId","isArray","objects","obj","historyType","color","totalize","UnassignedTeamCases","contactsConfig","ContactCreateController","ContactDeleteController","ContactTest","contactId","colleagueList","colleagues","ContactEditController","contactPromise","ContactListController","updateContacts","contacts","worksAt","deleteContact","ContactDetailWidget","ContactListWidget","getContacts","dashboardConfig","DashboardController","CallbackRequestsDirective","CallbackRequestsController","_watchTable","_getCallbackRequests","callbackRequests","dealsToCheckDirective","DealsToCheckController","Deal","UserTeams","_getDealsToCheck","selectedUserId","getDealsToCheck","deals","mine","teams","team","user_set","markDealAsChecked","deal","feedbackDirective","FeedbackController","_getFeedbackDeals","getFeedbackDeals","feedbackFormSentForDeal","feedbackFormSent","openFeedbackForm","emailAddress","email","followUpDirective","FollowUpController","_getFollowUp","getFollowUpWidgetData","openFollowUpWidgetModal","followUp","myCasesDirective","MyCasesController","_getMyCases","queueSizeDirective","QueueSizeController","$interval","isSuperUser","labels","series","animation","queueName","getQueueInfo","shift","totalSize","total_messages","isDefined","teamsDirective","TeamsController","_getTeams","unassignedCasesDirective","UnassignedCasesController","bindToController","_getUnassignedCases","assignToMe","caseObj","unreadEmailDirective","UnreadEmailController","EmailMessage","_getMessages","getDashboardMessages","messages","dealsConfig","DealCreateController","DealDeleteController","DealDetailController","DealStages","dealStages","changeState","stage","newStage","stage_name","closed_date","closing_date","DealEditController","dealPromise","FollowUpWidgetModalController","_getDealStages","saveModal","closingDate","selectedStage","expected_closing_date","closeModal","DealListController","updateDeals","getDeals","total_size","amountOnce","amountRecurring","newBusiness","DealListWidgetDirective","ordering","userId","feedback_form_sent","$update","is_checked","emailConfig","when","EmailBaseController","labelList@base.email","primaryEmailAccountId","me","primary_email_account","@base.email","EmailComposeController","$templateCache","EmailTemplate","SelectedEmailAccount","emailMessage","_initEmailCompose","promises","emailTemplatePromise","all","templates","currentAccountId","EmailDetailController","RecipientInformation","_getMessage","bodyHTMLUrl","all_recipients","received_by","received_by_cc","getInformation","read","markAsRead","setCurrentAccountId","archiveMessage","labelId","trashMessage","trash","deleteMessage","toggleOverlay","displayAllRecipients","$emailRecipients","markAsUnread","EmailListController","EmailLabel","EmailAccount","watchTable","newValues","oldValues","setPage","_reloadMessages","pageNumber","toggleCheckboxes","emailMessages","checked","opts","checkboxesAll","_toggleReadMessages","showReplyOrForwardButtons","number","_selectedMessage","replyOnMessage","replyAllOnMessage","forwardOnMessage","_removeCheckedMessagesFromList","archiveMessages","trashMessages","deleteMessages","moveMessages","removedLabels","label_id","addedLabels","remove_labels","add_labels","move","reloadMessages","goToDraft","messageId","account__id","primaryEmailAccount","LabelListController","_startIntervalAccountInfo","_getAccountInfo","stopGetAccountInfo","accountList","labelCount","label_type","unread","unreadCountForLabel","count","hasUnreadLabel","contactIcon","sender_email","emailAddressResults","complete","shareWith","EmailDetail","sent_date","right","actions","user_email_related","recipients","contact_id"],"mappings":"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","file":"app.min.js","sourcesContent":["/**\n * app.accounts manages all routes, controllers eg.\n * that relate to Account.\n */\nangular.module('app.accounts', [\n    'ngCookies',\n    'ui.bootstrap',\n    'ui.slimscroll',\n    'app.accounts.services',\n    'app.cases.services',\n    'app.email.services',\n    'app.contacts.services',\n    'noteServices'\n]);\n","angular.module('app.cases', [\n    // Angular dependencies\n    'ngCookies',\n\n    // 3rd party\n    'ui.bootstrap',\n\n    // Lily dependencies\n    'app.accounts.services',\n    'app.cases.services',\n    'app.email.services',\n    'app.contacts.services',\n    'noteServices'\n]);\n","angular.module('app.contacts', [\n    // Angular dependencies\n    'ngCookies',\n\n    // 3rd party\n    'ui.bootstrap',\n\n    // Lily dependencies\n    'app.accounts.services',\n    'app.cases.services',\n    'app.contacts.services',\n    'noteServices',\n    'app.email.services'\n]);\n","angular.module('app.dashboard', [\n    'app.dashboard.directives',\n    'app.users.services',\n    'chart.js',\n    'ui.slimscroll'\n]);\n","angular.module('app.deals', [\n    // Angular dependencies\n    'ngCookies',\n\n    // 3rd party\n    'ui.bootstrap',\n    'ui.select',\n\n    // Lily dependencies\n    'app.deals.services'\n]);\n","angular.module('app.email', [\n    // 3rd party\n    'ui.bootstrap',\n    'ui.router',\n\n    // Lily dependencies\n    'app.email.services',\n    'app.email.directives',\n    'app.services'\n]);\n","angular.module('app.accounts.directives', []);\n","angular.module('app.base', [\n    'ui.bootstrap'\n]);\n","/**\n * app.directives is a container for all global lily related Angular directives\n */\nangular.module('app.directives', []);\n","angular.module('app.filters', []);\n","angular.module('app.services', []);\n","angular.module('app.cases.directives', []);\n","angular.module('app.cases.services', ['ngResource']);\n","angular.module('app.contacts.directives', []);\n","angular.module('app.contacts.services', ['ngResource']);\n","angular.module('app.dashboard.directives', []);\n","angular.module('app.deals.directives', []);\n","angular.module('app.deals.services', []);\n","angular.module('app.email.directives', []);\n","angular.module('app.email.services', ['ngResource']);\n","(function () {\n    'use strict';\n\n    /**\n     * accountServices is a container for all account related Angular services\n     */\n    angular.module('app.accounts.services', [\n        'ngResource'\n    ]);\n\n    /**\n     * $resource for Account model, now only used for detail page.\n     */\n    angular.module('app.accounts.services').factory('AccountDetail', ['$resource', function($resource) {\n        function getPhone(account) {\n            if (account.phone_mobile) return account.phone_mobile[0];\n            if (account.phone_work) return account.phone_work[0];\n            if (account.phone_other) return account.phone_other[0];\n            return '';\n        }\n        function getPhones(account) {\n            var phones = [];\n            if (account.phone_mobile) phones = phones.concat(account.phone_mobile);\n            if (account.phone_work) phones = phones.concat(account.phone_work);\n            if (account.phone_other) phones = phones.concat(account.phone_other);\n            return phones;\n        }\n        return $resource(\n            '/search/search/?type=accounts_account&filterquery=id\\::id',\n            {},\n            {\n                get: {\n                    transformResponse: function(data) {\n                        data = angular.fromJson(data);\n                        if (data && data.hits && data.hits.length > 0) {\n                            var account = data.hits[0];\n                            account.phone = getPhone(account);\n                            account.phones = getPhones(account);\n                            return account;\n                        }\n                        return null;\n                    }\n                }\n            }\n        );\n    }]);\n\n    /**\n     * Account Service makes it possible to get Accounts from search backend\n     *\n     * @returns: Account object: object with functions related to Accounts\n     */\n    angular.module('app.accounts.services').factory('Account', Account);\n\n    Account.$inject = ['$filter', '$http', '$resource'];\n    function Account ($filter, $http, $resource) {\n        var Account = $resource(\n            '/api/accounts/account/:id',\n            null,\n            {\n                update: {\n                    method: 'PUT',\n                    params: {\n                        id: '@id'\n                    }\n                },\n                delete:  {\n                    method: 'DELETE'\n                }\n            });\n\n        Account.getAccounts = getAccounts;\n        Account.prototype.getEmailAddress = getEmailAddress;\n\n        //////\n\n        /**\n         * getAccounts() gets the accounts from the search backend through a promise\n         *\n         * @param queryString string: current filter on the accountlist\n         * @param page int: current page of pagination\n         * @param pageSize int: current page size of pagination\n         * @param orderColumn string: current sorting of accounts\n         * @param orderedAsc {boolean}: current ordering\n         *\n         * @returns Promise object: when promise is completed:\n         *      {\n         *          accounts list: paginated account objects\n         *          total int: total number of account objects\n         *      }\n         */\n        function getAccounts (queryString, page, pageSize, orderColumn, orderedAsc) {\n\n            var sort = '';\n            if (orderedAsc) sort += '-';\n            sort += orderColumn;\n\n            return $http({\n                url: '/search/search/',\n                method: 'GET',\n                params: {\n                    type: 'accounts_account',\n                    q: queryString,\n                    page: page - 1,\n                    size: pageSize,\n                    sort: sort\n                }\n            })\n                .then(function(response) {\n                    return {\n                        accounts: response.data.hits,\n                        total: response.data.total\n                    };\n                });\n        }\n\n        function getEmailAddress() {\n            var account = this;\n\n            var primaryEmails = $filter('filter')(account.email_addresses, {status: 2});\n\n            if (primaryEmails.length) {\n                return primaryEmails[0];\n            } else if (account.email_addresses.length) {\n                return account.email_addresses[0];\n            }\n        }\n        return Account;\n    }\n})();\n","(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\nga('create', 'UA-60721851-1', 'auto');\n","/**\n * App Module is the entry point for Lily related Angular code\n */\nangular.module('app', [\n    'ui.router',\n    'ui.bootstrap',\n    'ngResource',\n    'ngSanitize',\n    'ncy-angular-breadcrumb',\n\n    // Controllers\n    'app.accounts',\n    'app.base',\n    'app.cases',\n    'app.contacts',\n    'app.dashboard',\n    'app.email',\n    'app.preferences',\n    'app.preferences.email',\n    'app.preferences.user',\n    'app.templates',\n    'app.deals',\n    'UtilsControllers',\n\n    // Directives\n    'app.directives',\n    'app.accounts.directives',\n    'app.cases.directives',\n    'app.contacts.directives',\n    'app.deals.directives',\n    'UtilsDirectives',\n\n    // Google Analytics\n    'angulartics',\n    'angulartics.google.analytics',\n\n    // Services\n    'app.services',\n\n    // Filters\n    'app.filters'\n]);\n\n/* Setup global settings */\nangular.module('app').factory('settings', settings);\n\nsettings.$inject = ['$rootScope'];\nfunction settings ($rootScope) {\n    // supported languages\n    var settings = {\n        layout: {\n            pageSidebarClosed: false // sidebar state\n        }\n    };\n\n    $rootScope.settings = settings;\n\n    return settings;\n}\n\nangular.module('app').config(appConfig);\n\nappConfig.$inject = [\n    '$breadcrumbProvider',\n    '$controllerProvider',\n    '$httpProvider',\n    '$resourceProvider',\n    '$urlRouterProvider'\n];\nfunction appConfig ($breadcrumbProvider, $controllerProvider, $httpProvider, $resourceProvider, $urlRouterProvider){\n    // Don't strip trailing slashes from calculated URLs, because django needs them\n    $breadcrumbProvider.setOptions({\n        templateUrl: 'base/breadcrumbs.html',\n        includeAbstract: true\n    });\n    $controllerProvider.allowGlobals();\n    $httpProvider.defaults.xsrfCookieName = 'csrftoken';\n    $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';\n    $resourceProvider.defaults.stripTrailingSlashes = false;\n    $urlRouterProvider.otherwise('/');\n}\n\n/* Init global settings and run the app */\nangular.module('app').run(runApp);\n\nrunApp.$inject = ['$rootScope', 'settings', '$state'];\nfunction runApp ($rootScope, $state) {\n    $rootScope.$state = $state; // state to be accessed from view\n    $rootScope.currentUser = currentUser;\n}\n","$('body').on('blur', 'input[name^=\"phone\"]', function() {\n    // Format telephone number\n    var $phoneNumberInput = $(this);\n    var phone = $phoneNumberInput.val();\n    if (phone.match(/[a-z]|[A-Z]/)) {\n        // if letters are found, skip formatting: it may not be a phone field after all\n        return false;\n    }\n\n    // Match on mobile phone nrs e.g. +316 or 06, so we can automatically set the type to mobile.\n    if (phone.match(/^\\+316|^06/)) {\n        var typeId = $phoneNumberInput.attr('id').replace('raw_input', 'type');\n        $('#' + typeId).select2('val', 'mobile');\n    }\n\n    phone = phone\n        .replace(\"(0)\",\"\")\n        .replace(/\\s|\\(|\\-|\\)|\\.|x|:|\\*/g, \"\")\n        .replace(/^00/,\"+\");\n\n    if (phone.length == 0) {\n        return false;\n    }\n\n    if (!phone.startsWith('+')) {\n        if (phone.startsWith('0')) {\n            phone = phone.substring(1);\n        }\n        phone = '+31' + phone;\n    }\n\n    if (phone.startsWith('+310')) {\n        phone = '+31' + phone.substring(4);\n    }\n    $phoneNumberInput.val(phone);\n});\n\n$('body').on('change', 'select[id*=\"is_primary\"]', function(e) {\n    if($(e.currentTarget).val() == 'True'){\n        $('select[id*=\"is_primary\"]').each(function(i){\n            if($(this).is('select') && $(this).val() == 'True'){\n                $(this).val('False');\n            }\n        });\n        $(e.currentTarget).val('True');\n        HLSelect2.init();\n    }\n});\n\nfunction addBusinessDays(date, businessDays) {\n    var weeks = Math.floor(businessDays/5);\n    var days = businessDays % 5;\n    var day = date.getDay();\n    if (day === 6 && days > -1) {\n       if (days === 0) {days-=2; day+=2;}\n       days++; dy -= 6;}\n    if (day === 0 && days < 1) {\n       if (days === 0) {days+=2; day-=2;}\n       days--; day += 6;}\n    if (day + days > 5) days += 2;\n    if (day + days < 1) days -= 2;\n    date.setDate(date.getDate() + weeks * 7 + days);\n    return date;\n}\n","(function($, window, document, undefined) {\r\n    var currentStatus;\r\n\r\n    window.HLCases = {\r\n        config: {\r\n            caseUpdateUrl: '/cases/update/status/',\r\n            caseUpdateAssignedToUrl: '/cases/update/assigned_to/',\r\n            caseId: null,\r\n            statusSpan: '#status',\r\n            statusDiv: '#case-status',\r\n            parcelProviderSelect: '#id_parcel_provider',\r\n            parcelIdentifierInput: '#id_parcel_identifier',\r\n            assignedToField: '#id_assigned_to',\r\n            assignToMeButton: '.assign-me-btn',\r\n            currentAssignedTo: null\r\n        },\r\n\r\n        init: function(config) {\r\n            // Setup config\r\n            var self = this;\r\n            if ($.isPlainObject(config)) {\r\n                $.extend(self.config, config);\r\n            }\r\n            self.initListeners();\r\n            self.setCurrentStatus();\r\n        },\r\n\r\n        initListeners: function() {\r\n            var self = this,\r\n                cf = self.config;\r\n\r\n            $(cf.statusDiv).on('click', function(event) {\r\n               self.changeStatus.call(self, event);\r\n            });\r\n\r\n            $(cf.parcelProviderSelect).on('change', function() {\r\n               self.changedParcelProviderSelect.call(self, this);\r\n            });\r\n\r\n            $(cf.assignToMeButton).on('click', function() {\r\n                self.changeAssignedTo.call(self, this);\r\n            });\r\n        },\r\n\r\n        setCurrentStatus: function() {\r\n            currentStatus = $('input[name=radio]:checked', this.config.statusDiv).closest('label').attr('for');\r\n        },\r\n\r\n        changeStatus: function(event) {\r\n            var self = this,\r\n                cf = self.config;\r\n            var radio_element = $('#' + $(event.target).closest('label').attr('for'));\r\n            if(radio_element.attr('id') != currentStatus) {\r\n                var $radio_element = $(radio_element);\r\n                if (cf.caseId != null) {\r\n                    $.ajax({\r\n                        url: cf.caseUpdateUrl + cf.caseId + '/',\r\n                        type: 'POST',\r\n                        data: {\r\n                            status: $radio_element.val()\r\n                        },\r\n                        beforeSend: HLApp.addCSRFHeader,\r\n                        dataType: 'json'\r\n                    }).done(function (data) {\r\n                        currentStatus = $radio_element.attr('id');\r\n                        $(cf.statusSpan).text(data.status);\r\n                        // loads notifications if any\r\n                        load_notifications();\r\n                    }).fail(function () {\r\n                        // reset selected status\r\n                        $(radio_element).attr('checked', false).closest('label').removeClass('active');\r\n                        $('#' + currentStatus).attr('checked', true).closest('label').addClass('active');\r\n                        // loads notifications if any\r\n                        load_notifications();\r\n                    });\r\n                }\r\n            }\r\n        },\r\n\r\n        changedParcelProviderSelect: function(select) {\r\n            // Remove identifier if the provider is removed\r\n            var $select = $(select);\r\n            if (!$select.val()) {\r\n                $(this.config.parcelIdentifierInput).val('');\r\n            }\r\n        },\r\n\r\n        changeAssignedTo: function () {\r\n            var self = this,\r\n                cf = self.config;\r\n\r\n            var assignee = null;\r\n\r\n            if (cf.currentAssignedTo != currentUser.id) {\r\n                assignee = currentUser.id;\r\n            }\r\n\r\n            if (cf.caseId != null) {\r\n                $.ajax({\r\n                    url: cf.caseUpdateAssignedToUrl + cf.caseId + '/',\r\n                    type: 'POST',\r\n                    data: {\r\n                        assignee: assignee\r\n                    },\r\n                    beforeSend: HLApp.addCSRFHeader,\r\n                    dataType: 'json'\r\n                }).done(function (data) {\r\n                    var assignee = data.assignee;\r\n\r\n                    // TODO: This will be made prettier once we Angularify the detail page(s)\r\n                    if (assignee) {\r\n                        $('.summary-data.assigned-to').html(data.assignee.name);\r\n                        $('.assign-me-btn').html('Unassign');\r\n                        cf.currentAssignedTo = data.assignee.id;\r\n                    }\r\n                    else {\r\n                        $('.summary-data.assigned-to').html('Unassigned');\r\n                        $('.assign-me-btn').html('Assign to me');\r\n                        cf.currentAssignedTo = null;\r\n                    }\r\n                }).always(function () {\r\n                    // loads notifications if any\r\n                    load_notifications();\r\n                });\r\n            }\r\n        },\r\n\r\n        addAssignToMeButton: function() {\r\n            var self = this;\r\n            var assignToMeButton = $('<button class=\"btn btn-link assign-me-btn\">Assign to me</button>');\r\n\r\n            $(self.config.assignedToField).after(assignToMeButton);\r\n\r\n            assignToMeButton.click(function (event) {\r\n                event.preventDefault();\r\n                $(self.config.assignedToField).val(currentUser.id).change();\r\n            });\r\n        }\r\n    }\r\n})(jQuery, window, document);\r\n","(function ($, window, document, undefined) {\n    window.HLEmailTemplates = {\n        config: {\n            insertButton: '#id_insert_button',\n            variablesField: '#id_variables',\n            fileUploadField: '#body_file_upload',\n            valuesField: '#id_values',\n            bodyFileField: '#id_body_file',\n            templateVariableField: '#id_text_value',\n            attachmentDeleteButton: '.email-template-attachments [data-formset-delete-button]',\n            attachmentUndoDeleteButton: '.email-template-attachments [data-formset-undo-delete]',\n            templateAttachmentName: '.template-attachment-name',\n            wysiHtmlToolbar: '#wysihtml5-toolbar',\n            submitButton: 'button[type=\"submit\"]'\n        },\n\n        init: function (config) {\n            var self = this;\n\n            // Setup config\n            if (typeof (config === 'object')) {\n                $.extend(this.config, config);\n            }\n\n            self.initListeners();\n            self.updateVariableOptions();\n        },\n\n        initListeners: function() {\n            var self = this,\n                cf = self.config;\n\n            $('body')\n                .on('click', cf.insertButton, function (event) {\n                    var templateVariable = $(cf.templateVariableField).html();\n                    HLInbox.getEditor().focus();\n                    HLInbox.getEditor().composer.commands.exec('insertHTML', templateVariable);\n\n                    event.preventDefault();\n                })\n                .on('change', cf.variablesField, function () {\n                    self.updateVariableOptions();\n                })\n                .on('click', cf.fileUploadField, function (event) {\n                    $(cf.bodyFileField).click();\n                    event.preventDefault();\n                })\n                .on('change', cf.valuesField, function () {\n                    self.handleValueChange.call(self, this);\n                })\n                .on('change', cf.bodyFileField, function () {\n                    self.handleBodyFileChange.call(self, this);\n                })\n                .on('click', cf.attachmentDeleteButton, function() {\n                    var attachmentRow = $(this).closest('.form-group');\n                    self.toggleMarkDeleted(attachmentRow);\n                })\n                .on('click', cf.attachmentUndoDeleteButton , function() {\n                    var attachmentRow = $(this).closest('.form-group');\n                    self.toggleMarkDeleted(attachmentRow);\n                })\n                .on('click', cf.submitButton, function (event) {\n                    self.handleFormSubmit(this, event);\n                });\n\n            // Set heading properly after change\n            var toolbar = $(cf.wysiHtmlToolbar);\n            $(toolbar).find('a[data-wysihtml5-command=\"formatBlock\"]').click(function(e) {\n                var target = e.target || e.srcElement;\n                var el = $(target);\n                $(toolbar).find('.current-font').text(el.html());\n            });\n        },\n\n        updateVariableOptions: function () {\n            var valueSelect = $(this.config.valuesField);\n            var category = $(this.config.variablesField).val();\n\n            valueSelect.find('option').not('option[value=\"\"]').remove();\n            valueSelect.change();\n\n            // TODO: LILY-953: Change this to API endpoint\n            var parameterChoices = {\n                \"Contact\": {\n                    \"contact.full_name\": \"Full name\",\n                    \"contact.work_phone\": \"Work phone\",\n                    \"contact.last_name\": \"Last name\",\n                    \"contact.twitter\": \"Twitter\",\n                    \"contact.mobile_phone\": \"Mobile phone\",\n                    \"contact.first_name\": \"First name\",\n                    \"contact.linkedin\": \"Linkedin\",\n                    \"contact.preposition\": \"Preposition\",\n                    \"contact.primary_email\": \"Primary email\",\n                    \"contact.account_city\": \"Account city\"\n                },\n                \"User\": {\n                    \"user.full_name\": \"Full name\",\n                    \"user.first_name\": \"First name\",\n                    \"user.phone_number\": \"Phone number\",\n                    \"user.preposition\": \"Preposition\",\n                    \"user.linkedin\": \"Linkedin\",\n                    \"user.twitter\": \"Twitter\",\n                    \"user.current_email_address\": \"Current email address\",\n                    \"user.last_name\": \"Last name\",\n                    \"user.user_group\": \"User group\"\n                },\n                \"Account\": {\n                    \"account.work_phone\": \"Work phone\",\n                    \"account.name\": \"Name\",\n                    \"account.any_email_address\": \"Any email address\"\n                }\n            };\n\n            if (category !== '') {\n                $.each(parameterChoices[category], function(parameter, label) {\n                    valueSelect.append($(\"<option>\", {\n                        value: parameter,\n                        text: label\n                    }));\n                });\n            }\n        },\n\n        handleValueChange: function (valuesField) {\n            var templateVariableField = $(this.config.templateVariableField);\n            var templateVariable = $(valuesField).val();\n\n            if (templateVariable !== ''){\n                templateVariableField.html(this.config.openVariable + ' ' + templateVariable + ' ' + this.config.closeVariable)\n            } else {\n                templateVariableField.html('');\n            }\n        },\n\n        handleBodyFileChange: function (bodyFileField) {\n            var form = $(bodyFileField).closest('form');\n            var uploadedTemplate = form.find(bodyFileField).val();\n\n            if (uploadedTemplate) {\n                $(form).ajaxStart(function() {\n                    Metronic.blockUI($(form).nextAll('form').eq(0), false, '');\n                }).ajaxStop(function() {\n                    Metronic.unblockUI($(form).nextAll('form').eq(0));\n                }).ajaxSubmit({\n                    type: 'post',\n                    dataType: 'json',\n                    url: this.config.parseEmailTemplateUrl,\n                    success: function(response) {\n                        if(!response.error && response.form) {\n                            var fields = ['name', 'subject'];\n                            $.each(fields, function(index, field) {\n                                if(response.form.hasOwnProperty(field)) {\n                                    $('#id_' + field).val(response.form[field]);\n                                }\n                            });\n\n                            // Set the html\n                            HLInbox.getEditor().setValue(response.form.body_html);\n                            HLInbox.getEditor().focus();\n                            HLInbox.getEditor().composer.element.blur();\n                        }\n\n                        // Loads notifications if any\n                        load_notifications();\n                    },\n                    error: function() {\n                        // Loads notifications if any\n                        load_notifications();\n                    }\n                });\n            }\n        },\n\n        toggleMarkDeleted: function (attachmentRow) {\n            var rowAttachmentName = attachmentRow.find(this.config.templateAttachmentName);\n\n            if (rowAttachmentName.hasClass('mark-deleted')) {\n                rowAttachmentName.removeClass('mark-deleted');\n            }\n            else {\n                rowAttachmentName.addClass('mark-deleted');\n            }\n        },\n\n        handleFormSubmit: function (submitButton, event) {\n            event.preventDefault();\n\n            var $containerDiv = $('<div>');\n            $containerDiv[0].innerHTML = HLInbox.getEditor().getValue();\n            // Remove resize div\n            $containerDiv.find('#resize-div').remove();\n\n            /**\n             * You'd expect HLInbox.getEditor().setValue or $('#id_body_html').html\n             * would work to set the value of the textarea.\n             * Sadly they don't, which is why .val is used\n             */\n            $('#id_body_html').val($containerDiv[0].innerHTML);\n\n            var $form = $($(submitButton).closest('form'));\n\n            Metronic.blockUI($('.inbox-content'), false, '');\n\n            $form.submit();\n        }\n    }\n})(jQuery, window, document);\n\n","(function ($, window, document, undefined) {\r\n    var editor;\r\n\r\n    window.HLInbox = {\r\n        config: {\r\n            accountDeactivatedMessage: 'Your account doesn\\'t seem to be active. Please activate your account to view your email.',\r\n            inboxCcInput: '.inbox-compose .mail-to .inbox-cc',\r\n            inboxBccInput: '.inbox-compose .mail-to .inbox-bcc',\r\n            singleMessageSelector: '.inbox-content .view-message',\r\n            templateField: '#id_template',\r\n            inboxComposeSubmit: '.inbox-compose [type=\"submit\"]',\r\n            wysiHtmlToolbar: '#wysihtml5-toolbar',\r\n            replyButton: '.reply-btn',\r\n            tagsAjaxSelector: '.tags-ajax',\r\n            emailAccountInput: '#id_send_from',\r\n            sendToNormalField: '#id_send_to_normal',\r\n            overwriteTemplateConfirm: 'Selecting a different template will overwrite the text you\\'ve typed. Do you want to load the template anyway?',\r\n            emptyTemplateAttachmentRow: '#empty-template-attachment-row',\r\n            templateAttachmentDeleteButton: '#template-attachments [data-formset-delete-button]',\r\n            templateAttachmentUndoDeleteButton: '#template-attachments [data-formset-undo-delete]',\r\n            templateAttachmentsDiv: '#template-attachments',\r\n            templateAttachmentName: '.template-attachment-name',\r\n            templateAttachmentIds: '#template-attachment-ids',\r\n            templateAttachmentId: '.template-attachment-id',\r\n            templateAttachmentRow: '.template-attachment-row',\r\n            currentTemplate: null,\r\n            previousSendToNormalLength: 0\r\n        },\r\n\r\n        init: function (config) {\r\n            var self = this;\r\n\r\n            // Setup config\r\n            if (typeof (config === 'object')) {\r\n                $.extend(this.config, config);\r\n            }\r\n\r\n            self.initListeners();\r\n            Metronic.initUniform();\r\n        },\r\n\r\n        initListeners: function() {\r\n            var self = this,\r\n                cf = self.config;\r\n\r\n            $('body')\r\n                .on('click', cf.inboxCcInput, function() {\r\n                    // Handle compose/reply cc input toggle\r\n                    self.handleAdditionalRecipientsInput('cc');\r\n                })\r\n                .on('click', cf.inboxBccInput, function() {\r\n                    // Handle compose/reply bcc input toggle\r\n                    self.handleAdditionalRecipientsInput('bcc');\r\n                })\r\n                .on('change', cf.emailAccountInput, function () {\r\n                    self.changeTemplateField.call(self, cf.templateField, false);\r\n                })\r\n                .on('change', cf.templateField, function () {\r\n                    self.changeTemplateField.call(self, this, true);\r\n                })\r\n                .on('change', cf.sendToNormalField, function () {\r\n                    var previousSendToNormalLength = self.config.previousSendToNormalLength;\r\n\r\n                    var inputLength = $(this).select2('data').length;\r\n                    self.config.previousSendToNormalLength = inputLength;\r\n\r\n                    // Don't do anything if it's just an extra recipient being added/removed\r\n                    // or the last recipient is removed\r\n                    if (inputLength > 1 || inputLength < previousSendToNormalLength) {\r\n                        return false;\r\n                    }\r\n\r\n                    self.changeTemplateField.call(self, cf.templateField, false);\r\n                })\r\n                .on('click', cf.replyButton, function () {\r\n                    // Open links when clicking the reply button\r\n                    $('.inbox-view').hide();\r\n                    $('.inbox-loading').show();\r\n                })\r\n                .on('click', cf.inboxComposeSubmit, function (event) {\r\n                    self.handleInboxComposeSubmit(this, event);\r\n                })\r\n                .on('change', cf.tags, function () {\r\n                    self.handleTagsAjaxChange(this);\r\n                })\r\n                .on('click', cf.templateAttachmentDeleteButton, function () {\r\n                    var attachmentRow = $(this).closest('.form-group');\r\n                    self.handleTemplateAttachmentsChange(attachmentRow);\r\n                })\r\n                .on('click', cf.templateAttachmentUndoDeleteButton, function () {\r\n                    var attachmentRow = $(this).closest('.form-group');\r\n                    self.handleTemplateAttachmentsChange(attachmentRow);\r\n                });\r\n\r\n                $('.inbox-compose input').on('keydown keyup keypress', function(event) {\r\n                    // Make sure pressing enter doesn't do anything (except selecting something in a dropdown)\r\n                    if (event.which == 13) {\r\n                        event.preventDefault();\r\n                    }\r\n                });\r\n        },\r\n\r\n        customParser: function () {\r\n            function parse(elementOrHtml, rules, context, cleanUp) {\r\n                return elementOrHtml;\r\n            }\r\n\r\n            return parse;\r\n        },\r\n\r\n        initEmailCompose: function (emailComposeConfig) {\r\n            var self = this;\r\n\r\n            if (typeof (emailComposeConfig === 'object')) {\r\n                $.extend(self.config, emailComposeConfig);\r\n            }\r\n\r\n            self.initWysihtml5();\r\n\r\n            // If loadDefaultTemplate isn't set there was an error, so don't do any template loading\r\n            if (self.config.loadDefaultTemplate !== null) {\r\n                if (self.config.loadDefaultTemplate) {\r\n                    // If no template was given in the url, load the default template\r\n                    self.loadDefaultEmailTemplate();\r\n                }\r\n                else {\r\n                    // Otherwise trigger change event so the given template gets loaded\r\n                    $(self.config.templateField).val(self.config.template).change();\r\n                }\r\n            }\r\n\r\n            if (self.config.recipient) {\r\n                $(self.config.sendToNormalField).select2('data', self.config.recipient);\r\n            }\r\n\r\n            // Decode special chars\r\n            var decodedEditorValue = self.decodeEntities(editor.getValue());\r\n            var $composeEmailTemplate = $(decodedEditorValue).closest('#compose-email-template');\r\n\r\n            // If there's a template, we're dealing with a draft, so set currentTemplate\r\n            if ($composeEmailTemplate.length) {\r\n                self.config.currentTemplate = $composeEmailTemplate[0].innerHTML;\r\n            }\r\n        },\r\n\r\n        // Courtesy of Robert K/Ian Clark @ http://stackoverflow.com/questions/5796718/html-entity-decode/9609450#9609450\r\n        decodeEntities: function (str) {\r\n            // This prevents any overhead from creating the object each time\r\n            var element = document.createElement('div');\r\n\r\n            if (str && typeof str === 'string') {\r\n                // Strip script/html tags\r\n                str = str.replace(/<script[^>]*>([\\S\\s]*?)<\\/script>/gmi, '');\r\n                str = str.replace(/<\\/?\\w(?:[^\"'>]|\"[^\"]*\"|'[^']*')*>/gmi, '');\r\n                element.innerHTML = str;\r\n                str = element.textContent;\r\n                element.textContent = '';\r\n            }\r\n\r\n            return str;\r\n        },\r\n\r\n        initWysihtml5: function () {\r\n            var self = this;\r\n\r\n            editor = new wysihtml5.Editor('id_body_html', {\r\n                toolbar: 'wysihtml5-toolbar',\r\n                parser: self.customParser(),\r\n                handleTables: false\r\n            });\r\n\r\n            editor.observe('load', function () {\r\n                // Initial value is most likely reply/forward text, so store it for later usage\r\n                self.config.initialEditorValue = editor.getValue();\r\n                // Extra div is needed so the editor auto resizes\r\n                editor.setValue(self.config.initialEditorValue + '<div id=\"resize-div\"></div>');\r\n\r\n                $(this.composer.element).on('keydown paste change focus blur', function () {\r\n                    self.resizeEditor();\r\n                });\r\n\r\n                // Make the editor the correct height on load\r\n                self.resizeEditor();\r\n            });\r\n\r\n            // Set heading properly after change\r\n            var toolbar = $(self.config.wysiHtmlToolbar);\r\n            $(toolbar).find('a[data-wysihtml5-command=\"formatBlock\"]').click(function(e) {\r\n                var target = e.target || e.srcElement;\r\n                var el = $(target);\r\n                $(toolbar).find('.current-font').text(el.html());\r\n            });\r\n\r\n            // Not putting this in the initListeners since it's only used in the email compose\r\n            $(window).on('resize', function() {\r\n                self.resizeEditor();\r\n            });\r\n        },\r\n\r\n        resizeEditor: function () {\r\n            $('.wysihtml5-sandbox')[0].style.height = editor.composer.element.scrollHeight + 'px';\r\n        },\r\n\r\n        handleAdditionalRecipientsInput: function (inputType) {\r\n            var $ccLink = $('.inbox-compose .mail-to .inbox-' + inputType);\r\n            var $inputField = $('.inbox-compose .input-' + inputType);\r\n            $ccLink.hide();\r\n            $inputField.show();\r\n            $('.close', $inputField).click(function () {\r\n                $inputField.hide();\r\n                $ccLink.show();\r\n                $inputField.find('.tags').select2('val', '');\r\n            });\r\n        },\r\n\r\n        changeTemplateField: function (templateField, templateChanged) {\r\n            var self = this;\r\n            if (self.config.templateList) {\r\n                var selectedTemplate = parseInt($(templateField).val());\r\n                var recipientId = null;\r\n                var emailAccountId = $(self.config.emailAccountInput).val();\r\n\r\n                if (emailAccountId) {\r\n                    if (selectedTemplate) {\r\n                        var recipient = $('#id_send_to_normal').select2('data')[0];\r\n\r\n                        if (typeof recipient !== 'undefined' && typeof recipient.object_id !== 'undefined') {\r\n                            // Check if a contact has been entered\r\n                            recipientId = recipient.object_id;\r\n                        }\r\n                        else if (self.config.sender !== '' && self.config.sender != null) {\r\n                            // If it's a reply there might be contact set\r\n                            recipientId = self.config.sender;\r\n                            self.config.sender = null;\r\n                        }\r\n\r\n                        // Always get a template\r\n                        var url = self.config.getTemplateUrl + selectedTemplate + '/';\r\n\r\n                        if (recipientId != null) {\r\n                            // If a recipient has been set we can set extra url parameters\r\n                            url += '?contact_id=' + recipientId + '&emailaccount_id=' + emailAccountId;\r\n                        }\r\n                        else {\r\n                            url += '?emailaccount_id=' + emailAccountId;\r\n                        }\r\n\r\n                        $.getJSON(url, function (data) {\r\n                            self.setNewEditorValue(data, templateChanged);\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    toastr.error('I couldn\\'t load the template because your email account doesn\\'t seem to be set. Please check your email account and try again');\r\n                }\r\n            }\r\n        },\r\n\r\n        handleInboxComposeSubmit: function (inboxCompose, event) {\r\n            event.preventDefault();\r\n\r\n            var buttonName = $(inboxCompose).attr('name'),\r\n                $form = $($(inboxCompose).closest('form'));\r\n\r\n            if (buttonName == 'submit-discard') {\r\n                // Discarding email, remove all attachments to prevent unneeded uploading.\r\n                //$('[id|=id_attachments]:file').remove();\r\n                // Prevent discard from submitting form. This will probably be made nicer later (LILY-787)\r\n                window.location = '/#/email/all/INBOX';\r\n                return;\r\n            } else if (buttonName == 'submit-send') {\r\n                // Validation of fields.\r\n                if (!$('#id_send_to_normal').val() && !$('#id_send_to_cc').val() && !$('#id_send_to_bcc').val()) {\r\n                    $('#modal_no_email_address').modal();\r\n                    event.preventDefault();\r\n                    return;\r\n                }\r\n            } else if (buttonName == 'submit-save') {\r\n                var draftPk = $('#id_draft_pk').val();\r\n                // If we are saving a (existing) draft, change url\r\n                if(draftPk) {\r\n                    $form.attr('action', '/messaging/email/draft/' + draftPk + '/');\r\n                } else {\r\n                    $form.attr('action', '/messaging/email/draft/');\r\n                }\r\n            }\r\n            else if (buttonName == 'submit-send-archive') {\r\n                // Send and archive was pressed, so set an extra field\r\n                $('<input />').attr('type', 'hidden')\r\n                    .attr('name', 'archive')\r\n                    .attr('value', true)\r\n                    .appendTo($form);\r\n            }\r\n            else {\r\n                // No valid button, so do nothing;\r\n                return;\r\n            }\r\n\r\n            // Remove unnecessary html\r\n            var $containerDiv = $('<div id=\"email-container-div\">');\r\n            $containerDiv[0].innerHTML = HLInbox.getEditor().getValue();\r\n\r\n            var templateContent = '';\r\n            // Get template content if we're not dealing with the creation of a draft and there is a template set\r\n            if (buttonName != 'submit-save' && $containerDiv.find('#compose-email-template').length) {\r\n                templateContent = $containerDiv.find('#compose-email-template')[0].innerHTML;\r\n\r\n                // Remove email template div and resize div and only keep user typed text\r\n                $containerDiv.find('#compose-email-template').remove();\r\n            }\r\n\r\n            $containerDiv.find('#resize-div').remove();\r\n\r\n            /**\r\n             * You'd expect HLInbox.getEditor().setValue or $('#id_body_html').html\r\n             * would work to set the value of the textarea.\r\n             * Sadly they don't, which is why .val is used\r\n             */\r\n            $('#id_body_html').val(templateContent + '<br>' + $containerDiv[0].innerHTML);\r\n\r\n            // Make sure both buttons of the same name are set to the loading state\r\n            $('button[name=\"' + buttonName + '\"]').button('loading');\r\n\r\n            // No validation needed, remove attachments to prevent unneeded uploading.\r\n            $('[id|=id_attachments]:file').filter(function () {\r\n                return $(inboxCompose).data('formset-disabled') == true;\r\n            }).remove();\r\n\r\n            Metronic.blockUI($('.inbox-content'), false, '');\r\n\r\n            $form.submit();\r\n        },\r\n\r\n        handleTagsAjaxChange: function (tagsAjax) {\r\n            // Select2 doesn't remove certain values (values with quotes), so make sure that the value of the field is correct\r\n            var values = [];\r\n            var data = $(tagsAjax).select2('data');\r\n\r\n            for(var i=0; i < data.length; i++) {\r\n                var recipient_data = data[i];\r\n                values.push(recipient_data.id);\r\n            }\r\n\r\n            $(tagsAjax).val(values.join());\r\n        },\r\n\r\n        getEditor: function() {\r\n            return editor;\r\n        },\r\n\r\n        loadDefaultEmailTemplate: function() {\r\n            var self = this;\r\n            var emailAccountId = $(self.config.emailAccountInput).val();\r\n\r\n            if (emailAccountId) {\r\n                var url = self.config.defaultEmailTemplateUrl + emailAccountId + '/';\r\n\r\n                $.getJSON(url, function(data) {\r\n                    $(self.config.templateField).select2('val', data['template_id']).change();\r\n                });\r\n            }\r\n            else {\r\n                toastr.error('Sorry, I couldn\\'t load your default email template. You could try reloading the page');\r\n            }\r\n        },\r\n\r\n        setNewEditorValue: function (data, templateChanged) {\r\n            var self = this;\r\n            var htmlPart = data['template'];\r\n            // getValue returns a string, so convert to elements\r\n            var editorValue = $(editor.getValue());\r\n            var currentTemplate = editorValue.closest('#compose-email-template');\r\n            var newEditorValue = '';\r\n\r\n            // Check if an email template has already been loaded\r\n            if (currentTemplate.length) {\r\n                if (currentTemplate.html().length) {\r\n                    var changeTemplate = false;\r\n\r\n                    if (templateChanged) {\r\n                        // If a different template was selected we want to warn the user\r\n                        changeTemplate = confirm(self.config.overwriteTemplateConfirm);\r\n                    }\r\n                    else {\r\n                        // Template wasn't changed, so a new recipient was entered\r\n                        changeTemplate = true;\r\n                    }\r\n\r\n                    if (changeTemplate) {\r\n                        var addedTemplateText = '';\r\n\r\n                        if (self.config.currentTemplate) {\r\n                            var diff = {};\r\n\r\n                            // First time changing a draft needs a different operation\r\n                            // We want to check if the draft template differs from the default\r\n                            if (self.config.messageType == 'draft' && htmlPart == self.config.currentTemplate) {\r\n                                diff = JsDiff.diffChars(currentTemplate.html(), htmlPart);\r\n                            }\r\n                            else {\r\n                                // Otherwise compare the current editor value with the current template\r\n                                diff = JsDiff.diffChars(currentTemplate.html(), self.config.currentTemplate);\r\n                            }\r\n\r\n                            diff.forEach(function (part) {\r\n                                // Get all text that was changed/added\r\n                                if (part.added || part.removed) {\r\n                                    addedTemplateText += part.value;\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        self.config.currentTemplate = htmlPart;\r\n\r\n                        // Change the html of the existing email template and add text that was added to the template\r\n                        currentTemplate.html(htmlPart + addedTemplateText);\r\n                        // Since editorValue is actually an array of elements we can't easily convert it back to text\r\n                        var container = $('<div>');\r\n                        // Add the (edited) html to the newly created container\r\n                        container.append(editorValue);\r\n                        // Get the text version of the new html\r\n                        newEditorValue = container[0].innerHTML;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // No email template loaded so create our email template container\r\n                var emailTemplate = '<div id=\"compose-email-template\">' + htmlPart + '</div>';\r\n                // Append the existing text\r\n                newEditorValue = emailTemplate + '<br>' + editor.getValue();\r\n\r\n                self.config.currentTemplate = htmlPart;\r\n            }\r\n\r\n            // Only overwrite the subject if a new email is being created\r\n            if (this.config.messageType === 'new' && data['template_subject'] != '') {\r\n                $('#id_subject').val(data['template_subject']);\r\n            }\r\n\r\n            if (newEditorValue.length) {\r\n                editor.setValue(newEditorValue);\r\n                self.resizeEditor();\r\n                self.processAttachments(data['attachments']);\r\n            }\r\n        },\r\n\r\n        processAttachments: function (attachments) {\r\n            var cf = this.config;\r\n            // Clear any existing template attachments\r\n            $(cf.templateAttachmentsDiv).empty();\r\n\r\n            var attachmentIds = [];\r\n\r\n            for (var i = 0; i < attachments.length; i++) {\r\n                var attachment = attachments[i];\r\n\r\n                attachmentIds.push(attachment.id);\r\n\r\n                var attachmentRow = $(cf.emptyTemplateAttachmentRow).clone();\r\n                attachmentRow.find(cf.templateAttachmentName).html(attachment.name);\r\n                attachmentRow.find(cf.templateAttachmentId).val(attachment.id);\r\n                attachmentRow.removeAttr('id');\r\n                attachmentRow.removeClass('hidden');\r\n\r\n                $(cf.templateAttachmentsDiv).append(attachmentRow);\r\n            }\r\n\r\n            $(cf.templateAttachmentIds).val(attachmentIds);\r\n        },\r\n\r\n        handleTemplateAttachmentsChange: function (attachmentRow) {\r\n            var self = this,\r\n                cf = self.config;\r\n\r\n            var rowAttachmentName = attachmentRow.find(cf.templateAttachmentName);\r\n\r\n            if (rowAttachmentName.hasClass('mark-deleted')) {\r\n                rowAttachmentName.removeClass('mark-deleted');\r\n            }\r\n            else {\r\n                rowAttachmentName.addClass('mark-deleted');\r\n            }\r\n\r\n            attachmentRow.find('[data-formset-delete-button]').toggleClass('hidden');\r\n            attachmentRow.find('[data-formset-undo-delete]').toggleClass('hidden');\r\n\r\n            var newAttachmentIds = [];\r\n\r\n            var attachments = $(cf.templateAttachmentRow);\r\n            attachments.each(function () {\r\n                if (!$(this).find(cf.templateAttachmentName).hasClass('mark-deleted')) {\r\n                    var attachmentId = $(this).find(cf.templateAttachmentId).val();\r\n                    if (attachmentId !== \"\") {\r\n                        // Make sure the value of the empty attachment row doesn't get added\r\n                        newAttachmentIds.push(attachmentId);\r\n                    }\r\n                }\r\n            });\r\n\r\n            $(cf.templateAttachmentIds).val(newAttachmentIds);\r\n        },\r\n\r\n        setSuccesURL: function(previousState){\r\n            if(previousState != null){\r\n                $(\"input[name='success_url']\").val(previousState);\r\n            }\r\n        }\r\n    }\r\n})(jQuery, window, document);\r\n","(function($, window, document, undefined){\n    window.HLFormsets = {\n        config: {\n            formsetClass: '.formset'\n        },\n        init: function (config) {\n            var self = this;\n            // Setup configuration\n            if ($.isPlainObject(config)) {\n                $.extend(self.config, config);\n            }\n\n            $(self.config.formsetClass).formset();\n            self.initListeners();\n        },\n\n        initListeners: function() {\n            var self = this;\n            var body = $('body');\n\n            body.on('formAdded', '[data-formset-form]', function() {\n                var formset_element = $(this).parents('.formset');\n                var add_element = $(formset_element).find('.add-link');\n\n                var indent = ($(formset_element).attr('data-formset-indent') || 'true') == 'true';\n                if(indent) {\n                    $(add_element).find('.form-control-static').addClass('col-md-offset-2').removeClass('form-control-static');\n                }\n                $(add_element).find('label').addClass('hide');\n\n                if ($(formset_element).find('[data-formset-form]').length === 1) {\n                    $(this).find('label.hide').removeClass('hide');\n\n                    if(indent) {\n                        $(this).find('.field_wrapper').removeClass('col-md-offset-2');\n                    }\n                }\n                HLSelect2.init();\n            });\n\n            body.on('formDeleted', '[data-formset-form]', function() {\n                $(this).stop().slideDown();\n                $(this).find(':input:enabled:visible').attr('data-formset-disabled', true).attr('readonly', 'readonly');\n                $(this).find('[data-formset-delete-button]').toggleClass('hidden');\n                $(this).find('[data-formset-undo-delete]').toggleClass('hidden');\n            });\n\n            body.on('click', '[data-formset-form] [data-formset-undo-delete]', function() {\n                var formset = $(this).closest('[data-formset-form]');\n\n                formset.find('[data-formset-disabled=true]').removeAttr('data-formset-disabled').removeAttr('readonly');\n                formset.find('input[name$=\"DELETE\"]').attr('checked', false).change();\n                formset.find('[data-formset-delete-button]').toggleClass('hidden');\n                $(this).toggleClass('hidden');\n            });\n\n        }\n    }\n})(jQuery, window, document);\n","(function($, window, document, undefined){\n    window.HLSelect2 = {\n        config: {\n            tagInputs: 'input.tags',\n            ajaxInputs: 'input.select2ajax',\n            tagsAjaxClass: 'tags-ajax',\n            ajaxPageLimit: 30,\n            clearText: '-- Clear --'\n        },\n\n        init: function( config ) {\n            var self = this;\n            // Setup configuration\n            if ($.isPlainObject(config)) {\n                $.extend(self.config, config);\n            }\n            // On initialize, setup select2\n            self.setupSelect2();\n            self.initListeners();\n        },\n\n        initListeners: function() {\n            var self = this;\n            // When modal is shown, lets instantiate the select2 in the modals\n            $(document).on('shown.bs.modal', '.modal', function() {\n                self.setupSelect2();\n            });\n        },\n\n        setupSelect2: function() {\n            // Setup select2 for non-ajaxified selects, ajaxified selects\n            // are using hidden inputs.\n            $('select').select2({\n                // at least this many results are needed to enable the search field\n                // (9 is the amount at which the user must scroll to see all items)\n                minimumResultsForSearch: 9\n            });\n            this.createTagInputs();\n            this.createAjaxInputs();\n        },\n\n        createTagInputs: function() {\n            // Setup tag inputs\n            $(this.config.tagInputs).each(function() {\n                if (!$(this).data().hasOwnProperty('select2')) {\n                    var tags = [];\n                    var $this = $(this);\n                    if ($this.data('choices')) {\n                        tags = $this.data('choices').split(',');\n                    }\n                    $this.select2({\n                        tags: tags,\n                        tokenSeparators: [',', ' '],\n                        width: '100%'\n                    });\n                }\n            });\n        },\n\n        createAjaxInputs: function() {\n            // Setup inputs that needs remote link\n            var self = this;\n            var cf = self.config;\n\n            $(cf.ajaxInputs).each(function() {\n                var $this = $(this);\n                var _data = $this.data();\n                // _data.tags is a marker for AjaxSelect2Widget which indicates\n                // that it expects multiple values as input.\n\n                // Prevent Select2 from being initialized on elements that already have Select2\n                if (!_data.hasOwnProperty('select2')) {\n                    var options = {\n                        ajax: {\n                            cache: true,\n                            data: function (term, page) {\n                                // page is the one-based page number tracked by Select2\n                                var data = null;\n\n                                if ($this.hasClass(cf.tagsAjaxClass) && !_data.tags) {\n                                    if (term === '') {\n                                        // elasticsearch breaks when the term is empty, so just look for non-empty results\n                                        term = '*';\n                                    }\n                                    // search for contacts and accounts containing the search term, but only those with an email address\n                                    var filterQuery = '((_type:contacts_contact AND (name:' + term + ' OR email_addresses.email_address:' + term + ')) ' +\n                                        'OR (_type:accounts_account AND (name:' + term + ' OR email_addresses.email_address:' + term + '))) ' +\n                                        'AND email_addresses.email_address:*';\n\n                                    data = {\n                                        filterquery: filterQuery,\n                                        size: cf.ajaxPageLimit, // page size\n                                        page: (page - 1), // page number, zero-based\n                                        sort: '-modified' //sort modified descending\n                                    };\n                                }\n                                else {\n                                    var term_stripped = term.trim();\n                                    data = {\n                                        filterquery: term_stripped ? 'name:('+term_stripped+')' : '', //search term\n                                        size: cf.ajaxPageLimit, // page size\n                                        page: (page - 1), // page number, zero-based\n                                        sort: '-modified' //sort modified descending\n                                    };\n                                }\n\n                                var filters = $this.data('filter-on');\n                                if (typeof filters !== 'undefined' && filters !== '') {\n                                    filters.split(',').forEach(function (filter) {\n                                        if (filter.indexOf('id_') === 0) {\n                                            var filter_val = $('#' + filter).val();\n                                            var filter_name = filter.substring(3);\n                                            if (filter_name.indexOf('case_quickbutton_') === 0) {\n                                                filter_name = filter.substring(20);\n                                            } else if (filter_name == 'account') {\n                                                // This is a special case at the moment, in the future we might have\n                                                // more cases like this.\n                                                // But for now, just do this check\n                                                filter_name = 'accounts.id';\n                                            }\n                                            if (filter_val && filter_val > 0) {\n                                                data.filterquery += ' ' + filter_name + ':' + filter_val;\n                                            }\n                                        } else {\n                                            data.type = filter;\n                                        }\n                                    });\n                                }\n\n                                return data;\n                            },\n\n                            results: function (data, page) {\n                                var more = (page * cf.ajaxPageLimit) < data.total; // whether or not there are more results available\n\n                                if ($this.hasClass(cf.tagsAjaxClass) && !_data.tags) {\n                                    var parsed_data = [];\n\n                                    data.hits.forEach(function (hit) {\n                                        // Only display contacts with an e-mail address\n                                        for (var i = 0; i < hit.email_addresses.length; i++) {\n                                            // The text which is actually used in the application\n                                            var used_text = '\"' + hit.name + '\" <' + hit.email_addresses[i].email_address + '>';\n                                            // The displayed text\n                                            var displayed_text = hit.name + ' <' + hit.email_addresses[i].email_address + '>';\n                                            // Select2 sends 'id' as the value, but we want to use the email\n                                            // So store the actual id (hit.id) under a different name\n                                            parsed_data.push({id: used_text, text: displayed_text, object_id: hit.id});\n                                        }\n                                    });\n\n                                    // Array elements with empty text can't be added to select2, so manually fill a new array\n                                    data.hits = parsed_data;\n                                }\n                                else {\n                                    data.hits.forEach(function (hit) {\n                                        hit.text = hit.name;\n                                    });\n                                }\n\n                                // Add clear option, but not for multiple select2.\n                                if ((page == 1 && !$this.hasClass(cf.tagsAjaxClass)) && !_data.tags) {\n                                    data.hits.unshift({id: -1, text:cf.clearText});\n                                }\n                                return {\n                                    results: data.hits,\n                                    more: more\n                                };\n                            }\n                        },\n\n                        initSelection: function (item, callback) {\n                            var id = item.val();\n                            var text = item.data('selected-text');\n                            var data = { id: id, text: text };\n                            callback(data);\n                        }\n                    };\n\n                    if ($this.hasClass(cf.tagsAjaxClass)) {\n                        options.tags = true;\n                        options.tokenSeparators = [',', ' '];\n                        // Create a new tag if there were no results\n                        options.createSearchChoice = function (term, data) {\n                            if ($(data).filter(function () {\n                                    return this.text.localeCompare(term) === 0;\n                                }).length === 0) {\n                                return {\n                                    id: term,\n                                    text: term\n                                };\n                            }\n                        };\n                        // Prevent select2 dropdown from opening when pressing enter\n                        options.openOnEnter = false;\n                    }\n\n                    // Set select2 to multiple.\n                    if(_data.tags) {\n                        options.tags = true;\n                        options.multiple = true;\n                    }\n\n\n                    $this.select2(options);\n                    // Set the initial form value from a JSON encoded data attribute called data-initial\n                    if(_data.tags) {\n                        $this.select2('data', _data.initial);\n                    }\n                }\n            });\n        }\n    };\n\n})(jQuery, window, document);\n","(function($, window, document, undefined){\n    window.HLShowAndHide = {\n        config: {\n            selector: '.show-and-hide-input'\n        },\n\n        init: function( config ) {\n            var self = this;\n            // Setup configuration\n            if ($.isPlainObject(config)) {\n                $.extend(self.config, config);\n            }\n            // On initialize, setup show and hide\n            self.initListeners();\n        },\n\n        initListeners: function() {\n            var self = this;\n\n            // When modal is shown, lets instantiate the select2 in the modals\n            $('body').on('click', '.form .toggle-original-form-input', function() {\n                var field = $(this).closest('.show-and-hide-input');\n\n                /* hide clicked link */\n                $(this).parent().addClass('hide');\n\n                /* toggle form input */\n                if($(this).data('action') == 'show') {\n                    /* show the other link */\n                    $(field).find('[data-action=\"hide\"]').parent().removeClass('hide');\n\n                    /* show the form input */\n                    $(field).find('.original-form-widget').removeClass('hide');\n\n                    /* (re)enable fields */\n                    $(field).find(':input').removeAttr('disabled');\n\n                    var input = $(field).find(':input:visible:not([type=\"file\"]):first');\n                    if(input) {\n                        /* adding to the end of the execution queue reliably sets the focus */\n                        /*  e.g. without, this only works once for select2 inputs */\n                        setTimeout(function() {\n                            // setCaretAtEnd(input);\n                        }, 0);\n                    }\n                } else if($(this).data('action') == 'hide') {\n                    /* show the other link */\n                    $(field).find('[data-action=\"show\"]').parent().removeClass('hide');\n\n                    /* hide the form input */\n                    $(field).find('.original-form-widget').addClass('hide');\n\n                    /* disabled fields will not be posted */\n                    $(field).find(':input').attr('disabled', 'disabled');\n                }\n            });\n        }\n    };\n\n})(jQuery, window, document);\n","(function($, window, document, undefined) {\n    window.HLDataProvider = {\n        config: {\n            buttonDataProvider: ':button.dataprovider',\n            loadingText: 'Beaming up the information now, almost within range!',\n            loadingHeader: 'I\\'m on my way!',\n            provideUrl: '/provide/account/',\n            dataProviderClass: '.dataprovider',\n            errorHeader: 'Oops!',\n            errorText: 'There was an error trying to fetch your data, please don\\'t be mad.',\n            successHeader: 'Yeah!',\n            successText: 'We did it! Your new data should be right there waiting for you.',\n            hiddenSuccessHeader: 'Psst!',\n            hiddenSuccessText: 'Did you know I did more work in the background? ;)',\n            overwriteConfirmHeader: 'Do you wish to overwrite the following fields?\\n',\n            fields: [\n                'name',\n                'description',\n                'legalentity',\n                'taxnumber',\n                'bankaccountnumber',\n                'cocnumber',\n                'iban',\n                'bic',\n            ],\n            formsets: [\n                'email_addresses',\n                'phone_numbers',\n                'addresses'\n            ]\n        },\n\n        init: function(config) {\n            // Setup config\n            var self = this;\n            if ($.isPlainObject(config)) {\n                $.extend(self.config, config);\n            }\n\n            self.initListeners();\n        },\n\n        initListeners: function() {\n            var self = this,\n                cf = self.config;\n\n            $('body').on('click', cf.buttonDataProvider, function(event) {\n                // On button press\n                self.findDataProviderInfo.call(self, this, event);\n            }).on('keydown', 'div' + cf.dataProviderClass + ' > input', function(event) {\n                // Catch ENTER on Dataprovider input\n                if (event.which === 13) {\n                    self.findDataProviderInfo.call(self, cf.buttonDataProvider, event);\n                    // Prevent form submission\n                    event.preventDefault();\n                }\n            });\n        },\n\n        findDataProviderInfo: function(button, event) {\n            var self = this,\n                cf = self.config,\n                $button = $(button),\n                $form = $button.closest('form'),\n                $input = $('div' + cf.dataProviderClass +' > input'),\n                domain = self.sanitizeDomain($input.val());\n\n            // Show busy gui to user\n            $button.button('loading');\n            toastr.info(cf.loadingText, cf.loadingHeader);\n\n            var url = cf.provideUrl + domain;\n            $.getJSON(url)\n                .done(function(data) {\n                    if (data.error) {\n                        toastr.error(data.error.message, cf.errorHeader);\n                    } else {\n                        self.fillForm($form, data, cf.fields, cf.formsets);\n                        toastr.success(cf.successText, cf.successHeader);\n                    }\n                })\n                .fail(function() {\n                    toastr.error(cf.errorText, cf.errorHeader);\n                })\n                .always(function() {\n                    $button.button('reset');\n                });\n\n            event.preventDefault();\n        },\n\n        sanitizeDomain: function(url) {\n            var domain = $.trim(url.replace('http://', ''));\n            domain = $.trim(domain.replace('https://', ''));\n            // Always add last '/'\n            if (domain.slice(-1) !== '/') {\n                domain += '/';\n            }\n            return domain;\n        },\n\n        fillForm: function($form, data, fields, formsets) {\n            var self = this,\n                cf = self.config;\n\n            var checkOverwrite = self.loopTroughFields(fields, $form, data),\n                checkOverwriteFields = checkOverwrite[0],\n                checkOverwriteLabels = checkOverwrite[1];\n\n            // Check if there are fields for which we need to do an overwrite check\n            if (checkOverwriteFields.length) {\n                // Ask the user whether to overwrite or not\n                if (confirm(cf.overwriteConfirmHeader + checkOverwriteLabels.join('\\n'))) {\n                    // Loop through fields that need to be overwritten\n                    checkOverwriteFields.forEach(function(field) {\n                        var $input = $form.find('[name=\"' + field + '\"]');\n                        self.fillField($input, data[field]);\n                    });\n                }\n            }\n\n            // Loop through formsets\n            self.loopTroughFormSets(formsets, $form, data);\n\n        },\n\n        loopTroughFields: function(fields, $form, data) {\n            var self = this,\n                cf = self.config,\n                checkOverwriteFields = [],\n                checkOverwriteLabels = [],\n                filledHiddenField = false;\n\n            // Loop through all fields\n            fields.forEach(function(field) {\n                // Input is the field in the current form\n                var $input = $form.find('[name=\"' + field + '\"]');\n                // Always clear the field if it's hidden\n                if ($input.attr('type') == 'hidden' || $input.parent().hasClass('hide')) {\n                    $input.val('');\n                    if (data[field]) {\n                        filledHiddenField = true;\n                    }\n                }\n                // Check if there is data for the field, else do nothing\n                if (data[field]) {\n                    // Check if the field does not exist in the current form\n                    if ($input.val() !== undefined) {\n                        // Check if the field has a value and that value is not the field placeholder\n                        if ($input.val().length && $input.val() !== $input.attr('placeholder')) {\n                            // Display label of field instead of field name\n                            var label = $input.parents('.form-group').find('label').text();\n                            // Field is not empty, check before overwrite\n                            checkOverwriteFields.push(field);\n                            checkOverwriteLabels.push('- ' + label);\n                        } else {\n                            // Field is empty, fill it with new data\n                            self.fillField($input, data[field]);\n                        }\n                    }\n                }\n            });\n\n            if (filledHiddenField) {\n                toastr.success(cf.hiddenSuccessText, cf.hiddenSuccessHeader);\n            }\n\n            return [checkOverwriteFields, checkOverwriteLabels];\n        },\n\n        loopTroughFormSets: function(formsets, $form, data){\n            for (var i=0; i < formsets.length; i++) {\n                var formset = formsets[i];\n                // Check if there is data for the formset\n                if (data[formset] && data[formset].length) {\n                    var $formsetDiv = $form.find('#' + formset),\n                        $formsetAddLink = $formsetDiv.find('[data-formset-add]'),\n                        newFormsets = data[formset],\n                        $foundInput;\n\n                    for (var j = 0; j < newFormsets.length; j++) {\n                        var newFormset = newFormsets[j],\n                            insertNewFormset = false,\n                            $newElement;\n\n                        if (typeof newFormset === 'object') {\n                            var key,\n                                hasFoundInput = false;\n                            for (key in newFormset) {\n                                $foundInput = $formsetDiv.find(':input[name$=\"' + key +'\"]');\n                                if ($foundInput.length){\n                                    hasFoundInput = true;\n                                    $foundInput = $foundInput.filter(function () {\n                                        var val = $(this).val(),\n                                            newVal = newFormset[key];\n\n                                        return ((val === '' && newVal === null) || val == newVal);\n                                    });\n                                    if (!$foundInput.length) {\n                                        // One of the values is different so we need to add a new formset\n                                        insertNewFormset = true;\n                                    }\n                                }\n                            }\n                            if (insertNewFormset || !hasFoundInput) {\n                                $formsetAddLink.click();\n                                $newElement =  $formsetDiv.find('[data-formset-body] [data-formset-form]:last');\n                                for (key in newFormset) {\n                                    $newElement.find(':input[name$=\"' + key +'\"]').val(newFormset[key]);\n                                }\n                            }\n                        } else if (typeof newFormset === 'string') {\n                            $foundInput = $formsetDiv.find(':input').filter(function () {\n                                return $(this).val() == newFormset;\n                            });\n                            if (!$foundInput.length) {\n                                $formsetAddLink.click();\n                                $newElement =  $formsetDiv.find('[data-formset-body] [data-formset-form]:last');\n                                $newElement.find(':input:first').val(newFormset);\n                            }\n                        }\n                    }\n                }\n            }\n        },\n\n        fillField: function($input, value) {\n            if (typeof value === 'string') {\n                // String\n                $input.val(value);\n            } else if (typeof value[0] === 'string') {\n                // List of strings\n                var uniqueValues = value.concat($input.val().split(',')).filter(function(val, index, self) {\n                    return (self.indexOf(val) === index) && (val !== '');\n                });\n                $input.val(uniqueValues.join());\n            } else {\n                // JSON object\n                $input.val(JSON.stringify(value));\n            }\n            $input.change();\n            if ($input.parent().hasClass('original-form-widget') && $input.parent().hasClass('hide')) {\n                // show the input, by reusing the click handler as defined in the utils.\n                $input.parents(\".show-and-hide-input\").find('a[data-action=\"show\"]').trigger('click');\n            }\n        }\n    }\n})(jQuery, window, document);\n","/**\n * Router definition.\n */\nangular.module('app.accounts').config(accountConfig);\n\naccountConfig.$inject = ['$stateProvider'];\nfunction accountConfig ($stateProvider) {\n\n    $stateProvider.state('base.accounts.detail.delete', {\n        url: '/delete',\n        views: {\n            '@': {\n                controller: 'AccountDeleteController'\n            }\n        }\n    });\n}\n\n/**\n * Controller to delete a account\n */\nangular.module('app.accounts').controller('AccountDeleteController', AccountDeleteController);\n\nAccountDeleteController.$inject = ['$state', '$stateParams', 'Account'];\nfunction AccountDeleteController ($state, $stateParams, Account) {\n    var id = $stateParams.id;\n\n    Account.delete({\n        id:id\n    }, function() {  // On success\n        $state.go('base.accounts');\n    }, function(error) {  // On error\n        // Error notification needed\n        $state.go('base.accounts');\n    });\n}\n","/**\n * Router definition.\n */\nangular.module('app.accounts').config(accountConfig);\n\naccountConfig.$inject = ['$stateProvider'];\nfunction accountConfig ($stateProvider) {\n    $stateProvider.state('base.accounts.detail', {\n        url: '/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: 'accounts/controllers/detail.html',\n                controller: AccountDetailController\n            }\n        },\n        ncyBreadcrumb: {\n            label: '{{ account.name }}'\n        },\n        resolve: {\n            account: ['AccountDetail', '$stateParams', function(AccountDetail, $stateParams) {\n                var accountId = $stateParams.id;\n                return AccountDetail.get({id: accountId}).$promise\n            }]\n        }\n    })\n}\n\nangular.module('app.accounts').controller('AccountDetailController', AccountDetailController);\n\nAccountDetailController.$inject = ['$scope', '$stateParams', 'CaseDetail', 'ContactDetail', 'DealDetail', 'account'];\nfunction AccountDetailController($scope, $stateParams, CaseDetail, ContactDetail, DealDetail, account) {\n    /**\n     * Details page with historylist and more detailed account information.\n     */\n    var id = $stateParams.id;\n\n    $scope.account = account;\n    $scope.conf.pageTitleBig = account.name;\n    $scope.conf.pageTitleSmall = 'change is natural';\n\n    $scope.caseList = CaseDetail.query({filterquery: 'account:' + id});\n    $scope.caseList.$promise.then(function(caseList) {\n        $scope.caseList = caseList;\n    });\n\n    $scope.dealList = DealDetail.query({filterquery: 'account:' + id});\n    $scope.dealList.$promise.then(function(dealList) {\n        $scope.dealList = dealList;\n    });\n\n    $scope.contactList = ContactDetail.query({filterquery: 'accounts.id:' + id});\n    $scope.contactList.$promise.then(function(contactList) {\n        $scope.contactList = contactList;\n    });\n}\n","/**\n * Router definition.\n */\nangular.module('app.accounts').config(accountConfig);\n\naccountConfig.$inject = ['$stateProvider'];\nfunction accountConfig ($stateProvider) {\n    $stateProvider.state('base.accounts', {\n        url: '/accounts',\n        views: {\n            '@': {\n                templateUrl: 'accounts/controllers/list.html',\n                controller: AccountList,\n                controllerAs: 'vm'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Accounts'\n        }\n    });\n}\n\n/**\n * AccountList is a controller to show list of contacts\n *\n */\nangular.module('app.accounts').controller('AccountList', AccountList);\n\nAccountList.$inject = ['$scope', '$window', 'Account', 'Cookie'];\nfunction AccountList ($scope, $window, Account, Cookie) {\n    var vm = this;\n    var cookie = Cookie('accountList');\n    /**\n     * table object: stores all the information to correctly display the table\n     */\n    vm.table = {\n        page: 1,  // current page of pagination: 1-index\n        pageSize: 20,  // number of items per page\n        totalItems: 0, // total number of items\n        filter: cookie.get('filter', ''),  // search filter\n        order:  cookie.get('order', {\n            ascending: true,\n            column:  'modified'  // string: current sorted column\n        }),\n        visibility: cookie.get('visibility', {\n            name: true,\n            contactInformation: true,\n            assignedTo: true,\n            created: true,\n            modified: true,\n            tags: true,\n            customerId: true\n        })\n    };\n    vm.deleteAccount = deleteAccount;\n    vm.setFilter = setFilter;\n    vm.exportToCsv = exportToCsv;\n\n    activate();\n\n    /////////////\n\n    function activate() {\n        _setupWatches();\n    }\n\n    $scope.conf.pageTitleBig = 'Accounts';\n    $scope.conf.pageTitleSmall = 'An overview of accounts';\n\n\n    function deleteAccount (account) {\n        if (confirm('Are you sure?')) {\n            Account.delete({\n                id:account.id\n            }, function() {  // On success\n                var index = vm.table.items.indexOf(account);\n                vm.table.items.splice(index, 1);\n            }, function(error) {  // On error\n                alert('something went wrong.')\n            })\n        }\n    }\n\n    /**\n     * _updateTableSettings() sets scope variables to the cookie\n     */\n    function _updateTableSettings() {\n        cookie.put('filter', vm.table.filter);\n        cookie.put('order', vm.table.order);\n        cookie.put('visibility', vm.table.visibility);\n    }\n\n    /**\n     * _updateAccounts() reloads the accounts through a service\n     *\n     * Updates table.items and table.totalItems\n     */\n    function _updateAccounts() {\n        Account.getAccounts(\n            vm.table.filter,\n            vm.table.page,\n            vm.table.pageSize,\n            vm.table.order.column,\n            vm.table.order.ascending\n        ).then(function(data) {\n                vm.table.items = data.accounts;\n                vm.table.totalItems = data.total;\n            }\n        );\n    }\n\n    function _setupWatches() {\n        /**\n         * Watches the model info from the table that, when changed,\n         * needs a new set of accounts\n         */\n        $scope.$watchGroup(['vm.table.page', 'vm.table.order.column', 'vm.table.order.ascending', 'vm.table.filter'], function() {\n            _updateTableSettings();\n            _updateAccounts();\n        });\n\n        /**\n         * Watches the model info from the table that, when changed,\n         * needs to store the info to the cache\n         */\n        $scope.$watchCollection('vm.table.visibility', function() {\n            _updateTableSettings();\n        });\n    }\n\n\n    /**\n     * setFilter() sets the filter of the table\n     *\n     * @param queryString string: string that will be set as the new filter on the table\n     */\n    function setFilter (queryString) {\n        vm.table.filter = queryString;\n    }\n\n    /**\n     * exportToCsv() creates an export link and opens it\n     */\n    function exportToCsv () {\n        var getParams = '';\n        // If there is a filter, add it\n        if (vm.table.filter) {\n            getParams += '&export_filter=' + vm.table.filter;\n        }\n\n        // Add all visible columns\n        angular.forEach(vm.table.visibility, function(value, key) {\n            if (value) {\n                getParams += '&export_columns='+ key;\n            }\n        });\n\n        // Setup url\n        var url = '/accounts/export/';\n        if (getParams) {\n            url += '?' + getParams.substr(1);\n        }\n\n        $window.open(url);\n    }\n}\n","/**\n * Router definition.\n */\nangular.module('app.accounts').config(accountConfig);\n\naccountConfig.$inject = ['$stateProvider'];\nfunction accountConfig ($stateProvider) {\n    $stateProvider.state('base.accounts.create', {\n        url: '/create',\n        views: {\n            '@': {\n                templateUrl: '/accounts/create/',\n                controller: 'AccountUpsertController'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Create'\n        }\n    });\n\n    $stateProvider.state('base.accounts.detail.edit', {\n        url: '/edit',\n        views: {\n            '@': {\n                templateUrl: function(elem) {\n                    return '/accounts/' + elem.id + '/edit/';\n                },\n                controller: 'AccountUpsertController'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Edit'\n        }\n    });\n}\n\n/**\n * Controller for update and new Account actions.\n */\nangular.module('app.accounts').controller('AccountUpsertController', AccountUpsertController);\n\nAccountUpsertController.$inject = ['$scope', '$stateParams', 'AccountDetail'];\nfunction AccountUpsertController ($scope, $stateParams, AccountDetail) {\n    var id = $stateParams.id;\n    // New Account; set title.\n    if(!id) {\n        $scope.conf.pageTitleBig = 'New Account';\n        $scope.conf.pageTitleSmall = 'change is natural';\n    } else {\n        // Existing Account; Get details from ES and set title.\n        var accountPromise = AccountDetail.get({id: id}).$promise;\n        accountPromise.then(function(account) {\n            $scope.account = account;\n            $scope.conf.pageTitleBig = account.name;\n            $scope.conf.pageTitleSmall = 'change is natural';\n            HLSelect2.init();\n        });\n    }\n    HLDataProvider.init();\n    HLFormsets.init();\n}\n","/**\n * Account detail widget\n */\nangular.module('app.accounts.directives').directive('accountDetailWidget', AccountDetailWidget);\n\nfunction AccountDetailWidget() {\n    return {\n        restrict: 'E',\n        replace: true,\n        scope: {\n            account: '=',\n            height: '='\n        },\n        templateUrl: 'accounts/directives/detail_widget.html'\n    }\n}\n","angular.module('app.base').config(appConfig);\n\nappConfig.$inject = ['$stateProvider'];\nfunction appConfig ($stateProvider) {\n    $stateProvider.state('base', {\n        abstract: true,\n        controller: BaseController,\n        ncyBreadcrumb: {\n            label: 'Lily'\n        }\n    });\n}\n\nangular.module('app.base').controller('BaseController', BaseController);\n\nBaseController.$inject = ['$scope', '$state', 'Notifications'];\nfunction BaseController ($scope, $state, Notifications) {\n    $scope.conf = {\n        headTitle: 'Welcome!',\n        pageTitleBig: 'HelloLily',\n        pageTitleSmall: 'welcome to my humble abode!'\n    };\n\n    $scope.loadNotifications = loadNotifications;\n\n    activate();\n\n    //////////\n\n    function activate(){\n        $scope.$on('$stateChangeSuccess', _setPreviousState);\n        $scope.$on('$viewContentLoaded', _contentLoadedActions);\n    }\n\n    function loadNotifications() {\n        Notifications.query(function(notifications) {  // On success\n            angular.forEach(notifications, function(message) {\n                toastr[message.level](message.message);\n            });\n        }, function(error) {  // On error\n            console.log('error!');\n            console.log(error);\n        })\n    }\n\n    function _contentLoadedActions() {\n        Metronic.initComponents(); // init core components\n        HLSelect2.init();\n        HLFormsets.init();\n        HLShowAndHide.init();\n        autosize($('textarea'));\n\n        $scope.loadNotifications();\n    }\n\n    function _setPreviousState(event, toState, toParams, fromState, fromParams){\n        $scope.previousState = $state.href(fromState, fromParams);\n    }\n}\n","angular.module('app.base').controller('headerController', headerController);\n\nheaderController.$inject = ['$scope'];\nfunction headerController ($scope) {\n    $scope.$on('$includeContentLoaded', function() {\n        Layout.initHeader(); // init header\n    });\n}\n","angular.module('app.base').controller('sidebarController', sidebarController);\n\nsidebarController.$inject = ['$scope'];\nfunction sidebarController ($scope) {\n    $scope.$on('$includeContentLoaded', function() {\n        Layout.initSidebar(); // init sidebar\n    });\n}\n","/**\n * checkbox Directive makes a nice uniform checkbox and binds to a model\n *\n * @param model object: model to bind checkbox with\n *\n * Example:\n * <checkbox model=\"table.visibility.name\">Name</checkbox>\n */\nangular.module('app.directives').directive('checkbox', checkbox);\n\nfunction checkbox () {\n    return {\n        restrict: 'E',\n        replace: true,\n        transclude: true,\n        scope: {\n            model: '='\n        },\n        templateUrl: 'base/directives/checkbox.html'\n    }\n}\n","/**\n * Directive give a nice formatting on input elements.\n *\n * It makes sure that the value of the ngModel on the scope has a nice\n * formatting for the user\n */\nangular.module('app.directives').directive('dateFormatter', dateFormatter);\n\ndateFormatter.$inject = ['dateFilter'];\nfunction dateFormatter(dateFilter) {\n    return {\n        restrict: 'A',\n        require: 'ngModel',\n        link: function(scope, element, attrs, ngModel) {\n            ngModel.$formatters.push(function(value) {\n                if (value) {\n                    return dateFilter(value, attrs.dateFormatter);\n                }\n            })\n        }\n    }\n}\n","/**\n * Directive for a confirmation box before the delete in the detail\n * view happens\n */\nangular.module('app.directives').directive('detailDelete', detailDelete);\n\ndetailDelete.$inject = ['$state'];\nfunction detailDelete ($state) {\n    return {\n        restrict: 'A',\n        link: function (scope, elem, attrs) {\n\n            $(elem).click(function () {\n                if (confirm('You are deleting! Are you sure ?')) {\n                    $state.go('.delete');\n                }\n            });\n        }\n    }\n}\n","angular.module('app.directives').directive('resizeIframe', resizeIframe);\n\nfunction resizeIframe () {\n    return {\n        restrict: 'A',\n        link: function ($scope, element, attrs) {\n            var maxHeight = $('body').outerHeight();\n            element.on('load', function() {\n                element.removeClass('hidden');\n\n                // do this after .inbox-view is visible\n                var ifDoc, ifRef = this;\n\n                // set ifDoc to 'document' from frame\n                try {\n                    ifDoc = ifRef.contentWindow.document.documentElement;\n                } catch (e1) {\n                    try {\n                        ifDoc = ifRef.contentDocument.documentElement;\n                    } catch (e2) {\n                    }\n                }\n\n                // calculate and set max height for frame\n                if (ifDoc) {\n                    var subtractHeights = [\n                        element.offset().top,\n                        $('.footer').outerHeight(),\n                        $('.inbox-attached').outerHeight()\n                    ];\n                    for (var height in subtractHeights) {\n                        maxHeight = maxHeight - height;\n                    }\n\n                    if (ifDoc.scrollHeight > maxHeight) {\n                        ifRef.height = maxHeight;\n                    } else {\n                        ifRef.height = ifDoc.scrollHeight;\n                    }\n                }\n            });\n        }\n    }\n}\n","/**\n * sortColumn Directive adds sorting classes to an DOM element based on `table` object\n *\n * It makes the element clickable and sets the table sorting based on that element\n *\n * @param sortColumn string: name of the column to sort on when clicked\n * @param table object: The object to bind sort column and ordering\n *\n * Example:\n *\n * <th sort-column=\"last_name\" table=\"table\">Name</th>\n *\n * Possible classes:\n * - sorting: Unsorted\n * - sorting_asc: Sorted ascending\n * - sorting_desc: Sorted descending\n */\nangular.module('app.directives').directive('sortColumn', sortColumn);\n\nfunction sortColumn () {\n    /**\n     * _setSortableIcon() removes current sorting classes and adds new based on current\n     * sorting column and direction\n     *\n     * @param $scope object: current scope\n     * @param element object: current DOM element\n     * @param sortColumn string: column from current DOM element\n     */\n    var _setSortableIcon = function($scope, element, sortColumn) {\n        // Add classes based on current sorted column\n        if($scope.table.order.column === sortColumn) {\n            if ($scope.table.order.ascending) {\n                $scope.sorted = 1;\n            } else {\n                $scope.sorted = -1;\n            }\n        } else {\n            $scope.sorted = 0;\n        }\n    };\n\n    return {\n        restrict: 'A',\n        scope: {\n            table: '='\n        },\n        transclude: true,\n        templateUrl: 'base/directives/sort_column.html',\n        link: function ($scope, element, attrs) {\n            // Watch the table ordering & sorting\n            $scope.$watchCollection('table.order', function() {\n                _setSortableIcon($scope, element, attrs.sortColumn);\n            });\n\n            // When element is clicked, set the table ordering & sorting based on this DOM element\n            element.on('click', function() {\n                if($scope.table.order.column === attrs.sortColumn) {\n                    $scope.table.order.ascending = !$scope.table.order.ascending;\n                    $scope.$apply();\n                } else {\n                    $scope.table.order.column = attrs.sortColumn;\n                    $scope.$apply();\n                }\n            });\n        }\n    }\n}\n","angular.module('app.directives').directive('ngSpinnerBar', ngSpinnerBar);\n\nngSpinnerBar.$inject = ['$rootScope'];\nfunction ngSpinnerBar ($rootScope) {\n    return {\n        link: function(scope, element, attrs) {\n            // by defult hide the spinner bar\n            element.addClass('hide'); // hide spinner bar by default\n\n            // display the spinner bar whenever the route changes(the content part started loading)\n            $rootScope.$on('$stateChangeStart', function() {\n                element.removeClass('hide'); // show spinner bar\n            });\n\n            // hide the spinner bar on rounte change success(after the content loaded)\n            $rootScope.$on('$stateChangeSuccess', function() {\n                element.addClass('hide'); // hide spinner bar\n                $('body').removeClass('page-on-load'); // remove page loading indicator\n\n                // auto scroll to page top\n                setTimeout(function () {\n                    Metronic.scrollTop(); // scroll to the top on content load\n                }, $rootScope.settings.layout.pageAutoScrollOnLoad);\n            });\n\n            // handle errors\n            $rootScope.$on('$stateNotFound', function() {\n                element.addClass('hide'); // hide spinner bar\n            });\n\n            // handle errors\n            $rootScope.$on('$stateChangeError', function() {\n                element.addClass('hide'); // hide spinner bar\n            });\n        }\n    };\n}\n","angular.module('app.filters').filter('minValue', minValue);\nfunction minValue () {\n    return function(values) {\n        values.sort(function(a, b){return a-b});\n        return values[0];\n    }\n}\n","angular.module('app.filters').filter('nl2br', nl2br);\n\nnl2br.$inject = ['$sce'];\nfunction nl2br ($sce) {\n    return function(msg,is_xhtml) {\n        var is_xhtml = is_xhtml || true;\n        var breakTag = (is_xhtml) ? '<br />' : '<br>';\n        var msg = (msg + '').replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1'+ breakTag +'$2');\n        return $sce.trustAsHtml(msg);\n    }\n}\n","/**\n * relativeDate filter is a filter that represents the date in a nice format\n *\n * relativeDate will return a relative date string given the date. If the\n * date is to far in the past, it will fallback to angulars $filter\n *\n * @param: date {date|string} : date object or date string to transform\n * @param: fallbackDateFormat string (optional): fallback $filter argument\n * @param: compareWithMidnight boolean (optional): should the date comparison be with midnight or not\n *\n * @returns: string : a relative date string\n *\n * usage:\n *\n * {{ '2014-11-19T12:44:15.795312+00:00' | relativeDate }}\n */\nangular.module('app.filters').filter('relativeDate', relativeDate);\n\nrelativeDate.$inject = ['$filter'];\nfunction relativeDate ($filter) {\n    return function (date, fallbackDateFormat, compareWithMidnight) {\n        // Get current date\n        var now = new Date(),\n            calculateDelta, day, delta, hour, minute, week, month, year;\n\n        // If date is a string, format to date object\n        if (!(date instanceof Date)) {\n            date = new Date(date);\n            if (compareWithMidnight) {\n                // In certain cases we want to compare with midnight\n                date.setHours(23);\n                date.setMinutes(59);\n                date.setSeconds(59);\n            }\n        }\n\n        delta = null;\n        minute = 60;\n        hour = minute * 60;\n        day = hour * 24;\n        week = day * 7;\n        month = day * 30;\n        year = day * 365;\n\n        // Calculate delta in seconds\n        calculateDelta = function () {\n            return delta = Math.round((date - now) / 1000);\n        };\n\n        calculateDelta();\n\n        if (delta > day && delta < week) {\n            date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n            if (compareWithMidnight) {\n                // In certain cases we want to compare with midnight\n                date.setHours(23);\n                date.setMinutes(59);\n                date.setSeconds(59);\n            }\n            calculateDelta();\n        }\n\n        if (!fallbackDateFormat) {\n            if (window.innerWidth < 992) {\n                // Display as a short version if it's a small screen (tablet, smartphone, etc.)\n                fallbackDateFormat = 'dd MMM. yyyy'; // Renders as 29 Jan. 2015\n            }\n            else {\n                fallbackDateFormat = 'dd MMMM yyyy'; // Renders as 29 January 2015\n            }\n        }\n\n        // Check delta and return result\n        if (delta < 0) {\n            switch (false) {\n                case !(-delta > week):\n                    return $filter('date')(date, fallbackDateFormat);\n                case !(-delta > day * 2):\n                    return '' + -(Math.ceil(delta / day)) + ' days ago';\n                case !(-delta > day):\n                    return 'yesterday';\n                case !(-delta > hour):\n                    return '' + -(Math.ceil(delta / hour)) + ' hours ago';\n                case !(-delta > minute * 2):\n                    return '' + -(Math.ceil(delta / minute)) + ' minutes ago';\n                case !(-delta > minute):\n                    return 'a minutes ago';\n                case !(-delta > 30):\n                    return '' + -delta + ' seconds ago';\n                default:\n                    return 'just now';\n            }\n        } else {\n            switch (false) {\n                case !(delta < 30):\n                    return 'just now';\n                case !(delta < minute):\n                    return '' + delta + ' seconds';\n                case !(delta < 2 * minute):\n                    return 'a minute';\n                case !(delta < hour):\n                    return '' + (Math.floor(delta / minute)) + ' minutes';\n                case Math.floor(delta / hour) !== 1:\n                    return 'an hour';\n                case !(delta < day):\n                    return '' + (Math.floor(delta / hour)) + ' hours';\n                case !(delta < day * 2):\n                    return 'tomorrow';\n                case !(delta < week):\n                    return '' + (Math.floor(delta / day)) + ' days';\n                case Math.floor(delta / week) !== 1:\n                    return 'a week';\n                default:\n                    // Use angular $filter\n                    return $filter('date')(date, fallbackDateFormat);\n            }\n        }\n    }\n}\n","angular.module('app.filters').filter('trustAsResourceUrl', trustAsResourceUrl);\n\ntrustAsResourceUrl.$inject = ['$sce'];\nfunction trustAsResourceUrl ($sce) {\n    return function(val) {\n        return $sce.trustAsResourceUrl(val);\n    };\n}\n","/**\n * Cookie Service provides a simple interface to get and store cookie values\n *\n * Set `prefix` to give cookie keys a prefix\n */\nangular.module('app.services').service('Cookie', Cookie);\n\nCookie.$inject = ['$cookieStore'];\nfunction Cookie ($cookieStore) {\n    function CookieFactory (prefix) {\n        return new Cookie(prefix);\n    }\n\n    function Cookie(prefix) {\n        this.prefix = prefix;\n    }\n\n    /**\n     * getCookieValue() tries to retrieve a value from the cookie, or returns default value\n     *\n     * @param field string: key to retrieve info from\n     * @param defaultValue {*}: default value when nothing set on cache\n     * @returns {*}: retrieved or default value\n     */\n    Cookie.prototype.get = function (field, defaultValue) {\n        try {\n            var value = $cookieStore.get(this.prefix + field);\n            return (value !== undefined) ? value : defaultValue;\n        } catch (error) {\n            $cookieStore.remove(this.prefix + field);\n            return defaultValue;\n        }\n    };\n\n    /**\n     * setCookieValue() sets value on the cookie\n     *\n     * It prefixes the field to make field unique for this controller\n     *\n     * @param field string: the key on which to store the value\n     * @param value {*}: JSON serializable object to store\n     */\n    Cookie.prototype.put = function (field, value) {\n        $cookieStore.put(this.prefix + field, value);\n    };\n\n    return CookieFactory;\n}\n","angular.module('app.services').service('HLDate', HLDate);\n\nfunction HLDate () {\n    /**\n     * getSubtractedDate() subtracts x amount of days from the current date\n     *\n     * @param days (int): amount of days to subtract from the current date\n     *\n     * @returns (string): returns the subtracted date in a yyyy-mm-dd format\n     */\n    this.getSubtractedDate = function (days) {\n        var date = new Date();\n        date.setDate(date.getDate() - days);\n\n        return date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();\n    };\n}\n","angular.module('app.services').service('HLFilters', HLFilters);\n\nfunction HLFilters () {\n    this.updateFilterQuery = function ($scope) {\n        $scope.table.filterQuery = '';\n        $scope.displayFilterClear = false;\n        var filterStrings = [];\n\n        for (var i = 0; i < $scope.filterList.length; i++) {\n            var filter = $scope.filterList[i];\n            if (filter.id && filter.id == 'archived') {\n                if (!filter.selected) {\n                    filterStrings.push('archived:false');\n                }\n                else {\n                    $scope.displayFilterClear = true;\n                }\n            }\n            else {\n                if (filter.selected) {\n                    filterStrings.push(filter.value);\n                    $scope.displayFilterClear = true;\n                }\n            }\n        }\n\n        $scope.table.filterQuery = filterStrings.join(' AND ');\n    };\n\n    this.clearFilters = function ($scope) {\n        for (var i = 0; i < $scope.filterList.length; i++) {\n            $scope.filterList[i].selected = false;\n        }\n\n        $scope.updateFilterQuery();\n    };\n}\n","angular.module('app.services').service('HLText', HLText);\nfunction HLText () {\n    /**\n     * hlCapitalize() lowercases the whole string and makes the first character uppercase\n     * This means 'STRING' becomes 'String'\n     *\n     * @returns (string): returns a string with only the first character uppercased\n     */\n    String.prototype.hlCapitalize = function () {\n        var newString = this.toLowerCase();\n        return newString.charAt(0).toUpperCase() + newString.substring(1);\n    }\n}\n","angular.module('app.services').factory('Notifications', Notifications);\n\nNotifications.$inject = ['$resource'];\n\nfunction Notifications ($resource) {\n    return $resource('/api/utils/notifications/');\n}\n","angular.module('app.cases').controller('CaseAssignModal', CaseAssignModal);\n\nCaseAssignModal.$inject = ['$modalInstance', 'myCase', 'Case', 'User'];\nfunction CaseAssignModal ($modalInstance, myCase, Case, User) {\n    var vm = this;\n    vm.myCase = myCase;\n    vm.currentAssigneeId = myCase.assigned_to_id;\n    vm.users = [];\n\n    vm.ok = ok;\n    vm.cancel = cancel;\n\n    activate();\n\n    ////\n\n    function activate() {\n        _getUsers();\n    }\n\n    function _getUsers() {\n        User.query({}, function(data) {\n            vm.users = data;\n        });\n    }\n\n    function ok () {\n        // Update the assigned_to of the case and close the modal\n        Case.update({id: vm.myCase.id, assigned_to: vm.currentAssigneeId}).$promise.then(function () {\n            $modalInstance.close();\n        });\n    }\n\n    function cancel () {\n        $modalInstance.dismiss('cancel');\n    }\n}\n","angular.module('app.cases').config(caseConfig);\n\ncaseConfig.$inject = ['$stateProvider'];\nfunction caseConfig ($stateProvider) {\n    $stateProvider.state('base.cases.create', {\n        url: '/create',\n        views: {\n            '@': {\n                templateUrl: '/cases/create',\n                controller: CaseCreateController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Create'\n        }\n    });\n    $stateProvider.state('base.cases.create.fromContact', {\n        url: '/contact/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: function(elem, attr) {\n                    return '/cases/create/from_contact/' + elem.id +'/';\n                },\n                controller: CaseCreateController\n            }\n        },\n        ncyBreadcrumb: {\n            skip: true\n        }\n    });\n    $stateProvider.state('base.cases.create.fromAccount', {\n        url: '/account/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: function(elem, attr) {\n                    return '/cases/create/from_account/' + elem.id +'/';\n                },\n                controller: CaseCreateController\n            }\n        },\n        ncyBreadcrumb: {\n            skip: true\n        }\n    });\n}\n\nangular.module('app.cases').controller('CaseCreateController', CaseCreateController);\n\nCaseCreateController.$inject = ['$scope'];\nfunction CaseCreateController ($scope) {\n    $scope.conf.pageTitleBig = 'New case';\n    $scope.conf.pageTitleSmall = 'making cases';\n    HLCases.addAssignToMeButton();\n    HLSelect2.init();\n}\n","angular.module('app.cases').config(caseConfig);\n\ncaseConfig.$inject = ['$stateProvider'];\nfunction caseConfig ($stateProvider) {\n    $stateProvider.state('base.cases.detail.delete', {\n        url: '/delete',\n        views: {\n            '@': {\n                controller: CaseDeleteController\n            }\n        }\n    });\n\n}\n\nangular.module('app.cases').controller('CaseDeleteController', CaseDeleteController);\n\nCaseDeleteController.$inject = ['$http', '$state', '$stateParams'];\nfunction CaseDeleteController ($http, $state, $stateParams) {\n    var id = $stateParams.id;\n\n    var req = {\n        method: 'POST',\n        url: '/cases/delete/' + id + '/',\n        headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n    };\n\n    $http(req).\n        success(function(data, status, headers, config) {\n            $state.go('base.cases');\n        }).\n        error(function(data, status, headers, config) {\n            $state.go('base.cases');\n        });\n}\n","angular.module('app.cases').config(caseConfig);\n\ncaseConfig.$inject = ['$stateProvider'];\nfunction caseConfig ($stateProvider) {\n    $stateProvider.state('base.cases.detail', {\n        url: '/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: 'cases/controllers/detail.html',\n                controller: CaseDetailController,\n                controllerAs: 'vm'\n            }\n        },\n        ncyBreadcrumb: {\n            label: '{{ case.subject }}'\n        }\n    });\n}\n\nangular.module('app.cases').controller('CaseDetailController', CaseDetailController);\n\nCaseDetailController.$inject = ['$http', '$modal', '$scope', '$state', '$stateParams', 'CaseDetail', 'CaseStatuses'];\nfunction CaseDetailController ($http, $modal, $scope, $state, $stateParams, CaseDetail, CaseStatuses) {\n    var vm = this;\n    $scope.conf.pageTitleBig = 'Case';\n    $scope.conf.pageTitleSmall = 'the devil is in the details';\n    var id = $stateParams.id;\n    vm.case = CaseDetail.get({id: id});\n    vm.caseStatuses = CaseStatuses.query();\n\n    vm.getPriorityDisplay = getPriorityDisplay;\n    vm.changeCaseStatus = changeCaseStatus;\n    vm.assignCase = assignCase;\n    vm.archive = archive;\n    vm.unarchive = unarchive;\n    vm.openPostponeWidget = openPostponeWidget;\n\n\n    //////\n\n    /**\n     *\n     * @returns {string}: A string which states what label should be displayed\n     */\n    function getPriorityDisplay () {\n        if (vm.case.is_archived) {\n            return 'label-default';\n        } else {\n            switch (vm.case.priority) {\n                case 0:\n                    return 'label-success';\n                case 1:\n                    return 'label-info';\n                case 2:\n                    return 'label-warning';\n                case 3:\n                    return 'label-danger';\n                default :\n                    return 'label-info';\n            }\n        }\n    }\n\n    function changeCaseStatus (status) {\n        // TODO: LILY-XXX: Temporary call to change status of a case, will be replaced with an new API call later\n        var req = {\n            method: 'POST',\n            url: '/cases/update/status/' + vm.case.id + '/',\n            data: 'status=' + status,\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        $http(req).\n            success(function(data, status, headers, config) {\n                vm.case.status = data.status;\n            }).\n            error(function(data, status, headers, config) {\n                // Request failed proper error?\n            });\n    }\n\n    function assignCase () {\n        var assignee = '';\n\n        if (vm.case.assigned_to_id != currentUser.id) {\n            assignee = currentUser.id;\n        }\n\n        var req = {\n            method: 'POST',\n            url: '/cases/update/assigned_to/' + vm.case.id + '/',\n            data: 'assignee=' + assignee,\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        $http(req).\n            success(function(data, status, headers, config) {\n                if (data.assignee) {\n                    vm.case.assigned_to_id = data.assignee.id;\n                    vm.case.assigned_to_name = data.assignee.name;\n                }\n                else {\n                    vm.case.assigned_to_id = null;\n                    vm.case.assigned_to_name = null;\n                }\n            }).\n            error(function(data, status, headers, config) {\n                // Request failed propper error?\n            });\n    }\n\n    /**\n     * Archive a deal.\n     * TODO: LILY-XXX: Change to API based archiving\n     */\n    function archive (id) {\n        var req = {\n            method: 'POST',\n            url: '/cases/archive/',\n            data: 'id=' + id,\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        $http(req).\n            success(function(data, status, headers, config) {\n                vm.case.archived = true;\n            }).\n            error(function(data, status, headers, config) {\n                // Request failed propper error?\n            });\n    }\n\n    /**\n     * Unarchive a deal.\n     * TODO: LILY-XXX: Change to API based unarchiving\n     */\n    function unarchive (id) {\n        var req = {\n            method: 'POST',\n            url: '/cases/unarchive/',\n            data: 'id=' + id,\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        $http(req).\n            success(function(data, status, headers, config) {\n                vm.case.archived = false;\n            }).\n            error(function(data, status, headers, config) {\n                // Request failed propper error?\n            });\n    }\n\n    function openPostponeWidget (myCase) {\n        var modalInstance = $modal.open({\n            templateUrl: 'cases/controllers/postpone.html',\n            controller: 'CasePostponeModal',\n            controllerAs: 'vm',\n            size: 'sm',\n            resolve: {\n                myCase: function() {\n                    return myCase\n                }\n            }\n        });\n\n        modalInstance.result.then(function() {\n            $state.go($state.current, {}, {reload: true});\n        });\n    }\n}\n","angular.module('app.cases').config(caseConfig);\n\ncaseConfig.$inject = ['$stateProvider'];\nfunction caseConfig ($stateProvider) {\n    $stateProvider.state('base.cases.detail.edit', {\n        url: '/edit',\n        views: {\n            '@': {\n                templateUrl: function (elem, attr) {\n                    return '/cases/update/' + elem.id + '/';\n                },\n                controller: CaseEditController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Edit'\n        }\n    });\n}\n\nangular.module('app.cases').controller('CaseEditController', CaseEditController);\n\nCaseEditController.$inject = ['$scope', '$stateParams', 'CaseDetail'];\nfunction CaseEditController ($scope, $stateParams, CaseDetail) {\n    var id = $stateParams.id;\n    var casePromise = CaseDetail.get({id: id}).$promise;\n\n    casePromise.then(function(caseObject) {\n        $scope.case = caseObject;\n        $scope.conf.pageTitleBig = caseObject.subject;\n        $scope.conf.pageTitleSmall = 'change is natural';\n        HLSelect2.init();\n    });\n}\n","angular.module('app.cases').config(caseConfig);\n\ncaseConfig.$inject = ['$stateProvider'];\nfunction caseConfig ($stateProvider) {\n    $stateProvider.state('base.cases', {\n        url: '/cases',\n        views: {\n            '@': {\n                templateUrl: 'cases/controllers/list.html',\n                controller: CaseListController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Cases'\n        }\n    });\n}\n\nangular.module('app.cases').controller('CaseListController', CaseListController);\n\nCaseListController.$inject = ['$http', '$location', '$modal', '$scope', '$state', 'Case', 'Cookie', 'HLDate', 'HLFilters'];\nfunction CaseListController ($http, $location, $modal, $scope, $state, Case, Cookie, HLDate, HLFilters) {\n    var cookie = Cookie('caseList');\n\n    $scope.conf.pageTitleBig = 'Cases';\n    $scope.conf.pageTitleSmall = 'do all your lookin\\' here';\n\n    // Setup search query\n    var searchQuery = '';\n\n    // Check if filter is set as query parameter\n    var search = $location.search().search;\n    if (search != undefined) {\n        searchQuery = search;\n    } else {\n        // Get searchQuery from cookie\n        searchQuery = cookie.get('searchQuery', '');\n    }\n\n    /**\n     * table object: stores all the information to correctly display the table\n     */\n    $scope.table = {\n        page: 1,  // current page of pagination: 1-index\n        pageSize: 60,  // number of items per page\n        totalItems: 0, // total number of items\n        searchQuery: searchQuery,  // search query\n        archived: cookie.get('archived', false),\n        order: cookie.get('order', {\n            ascending: true,\n            column: 'expires'  // string: current sorted column\n        }),\n        visibility: cookie.get('visibility', {\n            caseId: true,\n            client: true,\n            subject: true,\n            priority: true,\n            type: true,\n            status: true,\n            expires: true,\n            assignedTo: true,\n            createdBy: true,\n            tags: true\n        })\n    };\n\n    $scope.displayFilterClear = false;\n\n    getFilterList();\n\n    /**\n     * Gets the filter list. Is either the value in the cookie or a new list\n     *\n     * @returns filterList (object): object containing the filter list\n     */\n    function getFilterList() {\n        var filterListCookie = cookie.get('filterList', null);\n\n        if (!filterListCookie) {\n            var filterList = [\n                {\n                    name: 'Assigned to me',\n                    value: 'assigned_to_id:' + $scope.currentUser.id,\n                    selected: false\n                },\n                {\n                    name: 'Assigned to nobody',\n                    value: 'NOT(assigned_to_id:*)',\n                    selected: false\n                },\n                {\n                    name: 'Expired 7 days or more ago',\n                    value: 'expires:[* TO ' + HLDate.getSubtractedDate(7) + ']',\n                    selected: false\n                },\n                {\n                    name: 'Expired 30 days or more ago',\n                    value: 'expires:[* TO ' + HLDate.getSubtractedDate(30) + ']',\n                    selected: false\n                },\n                {\n                    name: 'Archived',\n                    value: '',\n                    selected: false,\n                    id: 'archived'\n                }\n            ];\n\n            // Update filterList for now\n            $scope.filterList = filterList;\n\n            Case.getCaseTypes().then(function (cases) {\n                for (var key in cases) {\n                    if (cases.hasOwnProperty(key)) {\n                        filterList.push({\n                            name: 'Case type ' + cases[key],\n                            value: 'casetype_id:' + key,\n                            selected: false\n                        });\n                    }\n                }\n\n                // Update filterList once AJAX call is done\n                $scope.filterList = filterList;\n                // Watch doesn't get triggered here, so manually call updateTableSettings\n                updateTableSettings();\n            });\n        } else {\n            // Cookie is set, so use it as the filterList\n            $scope.filterList = filterListCookie;\n        }\n    }\n\n    /**\n     * updateTableSettings() sets scope variables to the cookie\n     */\n    function updateTableSettings() {\n        cookie.put('searchQuery', $scope.table.searchQuery);\n        cookie.put('archived', $scope.table.archived);\n        cookie.put('order', $scope.table.order);\n        cookie.put('visibility', $scope.table.visibility);\n        cookie.put('filterList', $scope.filterList);\n    }\n\n    /**\n     * updateCases() reloads the cases through a service\n     *\n     * Updates table.items and table.totalItems\n     */\n    function updateCases() {\n        Case.getCases(\n            $scope.table.searchQuery,\n            $scope.table.page,\n            $scope.table.pageSize,\n            $scope.table.order.column,\n            $scope.table.order.ascending,\n            $scope.table.archived,\n            $scope.table.filterQuery\n        ).then(function (data) {\n                $scope.table.items = data.cases;\n                $scope.table.totalItems = data.total;\n            }\n        );\n    }\n\n    /**\n     * Watches the model info from the table that, when changed,\n     * needs a new set of cases\n     */\n    $scope.$watchGroup([\n        'table.page',\n        'table.order.column',\n        'table.order.ascending',\n        'table.searchQuery',\n        'table.archived',\n        'table.filterQuery'\n    ], function () {\n        updateTableSettings();\n        updateCases();\n    });\n\n    /**\n     * Watches the model info from the table that, when changed,\n     * needs to store the info to the cache\n     */\n    $scope.$watchCollection('table.visibility', function () {\n        updateTableSettings();\n    });\n\n    /**\n     * Watches the filters so when the cookie is loaded,\n     * the filterQuery changes and a new set of deals is fetched\n     */\n    $scope.$watchCollection('filterList', function () {\n        $scope.updateFilterQuery();\n    });\n\n    /**\n     * setSearchQuery() sets the search query of the table\n     *\n     * @param queryString string: string that will be set as the new search query on the table\n     */\n    $scope.setSearchQuery = function (queryString) {\n        $scope.table.searchQuery = queryString;\n    };\n\n    $scope.toggleArchived = function () {\n        $scope.table.archived = !$scope.table.archived;\n    };\n\n    $scope.updateFilterQuery = function () {\n        HLFilters.updateFilterQuery($scope);\n    };\n\n    $scope.clearFilters = function () {\n        HLFilters.clearFilters($scope);\n    };\n\n    /**\n     * Deletes the case in django and updates the angular view\n     */\n    $scope.delete = function(id, subject, cases) {\n        var req = {\n            method: 'POST',\n            url: '/cases/delete/' + id + '/',\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        if(confirm('Are you sure you want to delete case ' + subject + '?')){\n            $http(req).\n                success(function(data, status, headers, config) {\n                    var index = $scope.table.items.indexOf(cases);\n                    $scope.table.items.splice(index, 1);\n                }).\n                error(function(data, status, headers, config) {\n                    // Request failed proper error?\n                });\n        }\n    };\n\n    $scope.assignTo = function(myCase) {\n        var modalInstance = $modal.open({\n            templateUrl: 'cases/controllers/assignto.html',\n            controller: 'CaseAssignModal',\n            controllerAs: 'vm',\n            size: 'sm',\n            resolve: {\n                myCase: function() {\n                    return myCase;\n                }\n            }\n        });\n\n        modalInstance.result.then(function() {\n            $state.go($state.current, {}, {reload: true});\n        });\n    };\n}\n","angular.module('app.cases').controller('CasePostponeModal', CasePostponeModal);\n\nCasePostponeModal.$inject = ['$filter', '$modalInstance', '$scope', 'Case', 'myCase'];\nfunction CasePostponeModal ($filter, $modalInstance, $scope, Case, myCase) {\n    var vm = this;\n    vm.myCase = myCase;\n    vm.pickerIsOpen = false;\n    vm.expireDate = new Date(myCase.expires);\n    vm.dateFormat = 'dd MMMM yyyy';\n    vm.datepickerOptions = {\n        startingDay: 1\n    };\n\n    vm.disabledDates = disabledDates;\n    vm.openDatePicker = openDatePicker;\n    vm.postponeWithDays = postponeWithDays;\n    vm.getFutureDate = getFutureDate;\n\n    activate();\n\n    ////\n\n    function activate() {\n        _watchCloseDatePicker();\n    }\n\n    /**\n     * When the datepicker popup is closed, update model and close modal\n     *\n     * @private\n     */\n    function _watchCloseDatePicker () {\n        $scope.$watch('vm.pickerIsOpen', function(newValue, oldValue) {\n            if (!newValue && oldValue) {\n                _updateDayAndCloseModal();\n            }\n        });\n    }\n\n    function _updateDayAndCloseModal() {\n        if (vm.expireDate != new Date(myCase.expires)) {\n            // Update the expire date for this case\n            var newDate = $filter('date')(vm.expireDate, 'yyyy-MM-dd');\n            Case.update({id: myCase.id}, {expires: newDate}, function() {\n                $modalInstance.close();\n            })\n        } else {\n            $modalInstance.close();\n        }\n    }\n    function disabledDates (date, mode) {\n        return ( mode === 'day' && ( date.getDay() === 0 || date.getDay() === 6 ) );\n    }\n\n    function openDatePicker ($event) {\n        $event.preventDefault();\n        $event.stopPropagation();\n        vm.pickerIsOpen = true;\n    }\n\n    function postponeWithDays (days) {\n        vm.expireDate.setDate(vm.expireDate.getDate() + days);\n        _updateDayAndCloseModal();\n    }\n\n    function getFutureDate(days) {\n        var futureDate = new Date(vm.expireDate);\n        return futureDate.setDate(futureDate.getDate() + days);\n    }\n}\n","angular.module('app.cases.directives').directive('caseListWidget', CaseListWidget);\nfunction CaseListWidget(){\n    return {\n        restrict: 'E',\n        replace: true,\n        scope: {\n            title: '@',\n            list: '=',\n            height: '=',\n            addLink: '@'\n        },\n        templateUrl: 'cases/directives/list_widget.html'\n    }\n}\n","angular.module('app.cases.directives').directive('updateCaseExpireDate', updateCaseExpireDate);\n\nfunction updateCaseExpireDate () {\n    return {\n        restrict: \"A\",\n        link: function(scope, element, attrs) {\n\n            var select = $('#id_priority');\n            var daysToAdd = [5, 3, 1, 0];\n\n            select.on('change', function(event) {\n                var priority = parseInt(select.val());\n                if(isNaN(select.val())){\n                    priority = 3;\n                }\n                var due = addBusinessDays(new Date(), daysToAdd[priority]);\n                var month = due.getMonth() + 1;\n                if(month < 10){\n                    month = '0' + month;\n                }\n                var expires = due.getDate() + '/' + month + '/' + due.getFullYear();\n                $('#id_expires').val(expires);\n                $('#id_expires_picker').datepicker('update', expires);\n            });\n        }\n    }\n}\n","angular.module('app.cases.services').factory('Case', Case);\n\nCase.$inject = ['$http', '$resource', '$q', 'AccountDetail', 'ContactDetail'];\nfunction Case ($http, $resource, $q, AccountDetail, ContactDetail) {\n\n    var Case = $resource(\n        '/api/cases/case/:id',\n        {},\n        {\n            query: {\n                url: '/search/search/?type=cases_case&filterquery=:filterquery',\n                isArray: true,\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    var objects = [];\n                    if (data && data.hits && data.hits.length > 0) {\n                        data.hits.forEach(function(obj) {\n                            objects.push(obj);\n                        });\n                    }\n                    return objects;\n                }\n            },\n            update: {\n                method: 'PATCH',\n                params: {\n                    id: '@id'\n                }\n            }\n        }\n    );\n\n    Case.getCases = getCases;\n    Case.getCaseTypes = getCaseTypes;\n    Case.getMyCasesWidget = getMyCasesWidget;\n    Case.getCallbackRequests = getCallbackRequests;\n    Case.getUnassignedCasesForTeam = getUnassignedCasesForTeam;\n\n    return Case;\n\n    /////////\n\n    /**\n     * getCases() gets the cases from the search backend through a promise\n     *\n     * @param queryString string: current filter on the caselist\n     * @param page int: current page of pagination\n     * @param pageSize int: current page size of pagination\n     * @param orderColumn string: current sorting of cases\n     * @param orderedAsc {boolean}: current ordering\n     * @param archived {boolean}: when true, only archived are fetched, if false, only active\n     * @param filterQuery {string}: contains the filters which are used in ElasticSearch\n     *\n     * @returns Promise object: when promise is completed:\n     *      {\n     *          cases list: paginated cases objects\n     *          total int: total number of case objects\n     *      }\n     */\n    function getCases (queryString, page, pageSize, orderColumn, orderedAsc, archived, filterQuery) {\n\n        return $http({\n            url: '/search/search/',\n            method: 'GET',\n            params: {\n                type: 'cases_case',\n                q: queryString,\n                page: page - 1,\n                size: pageSize,\n                sort: _getSorting(orderColumn, orderedAsc),\n                filterquery: filterQuery\n            }\n        }).then(function(response) {\n            return {\n                cases: response.data.hits,\n                total: response.data.total\n            };\n        });\n    }\n\n    function getCaseTypes () {\n        return $http({\n            url: '/cases/casetypes/',\n            method: 'GET'\n        }).then(function (response) {\n            return response.data.casetypes;\n        });\n    }\n\n    function _getSorting (field, sorting) {\n        var sort = '';\n        sort += sorting ? '-': '';\n        sort += field;\n        return sort;\n    }\n\n    /**\n     * Service to return a resource for my cases widget\n     */\n    function getMyCasesWidget (field, sorting) {\n        var deferred = $q.defer();\n        var filterQuery = 'archived:false AND NOT casetype_name:Callback';\n        filterQuery += ' AND assigned_to_id:' + currentUser.id;\n        Case.query({\n            filterquery: filterQuery,\n            sort: _getSorting(field, sorting)\n        }, function (cases) {\n            deferred.resolve(cases);\n        });\n\n        return deferred.promise;\n    }\n\n    /**\n     * Gets all cases with the 'callback' case type\n     *\n     * @returns cases with the callback case type\n     */\n    function getCallbackRequests (field, sorting) {\n        var filterQuery = 'archived:false AND casetype_name:Callback';\n        filterQuery += ' AND assigned_to_id:' + currentUser.id;\n\n        var deferred = $q.defer();\n        Case.query({\n            filterquery: filterQuery,\n            sort: _getSorting(field, sorting)\n        }, function (cases) {\n            angular.forEach(cases, function(callbackCase) {\n                if (callbackCase.account) {\n                    AccountDetail.get({id: callbackCase.account}, function(account) {\n                        callbackCase.accountPhone = account.phone;\n                    });\n                }\n                if (callbackCase.contact) {\n                    ContactDetail.get({id: callbackCase.contact}, function(contact) {\n                        callbackCase.contactPhone = contact.phone;\n                    });\n                }\n            });\n            deferred.resolve(cases);\n        });\n        return deferred.promise;\n    }\n\n    function getUnassignedCasesForTeam (teamId, field, sorting) {\n        var filterQuery = 'archived:false AND _missing_:assigned_to_id';\n        filterQuery += ' AND assigned_to_groups:' + teamId;\n\n        return Case.query({\n            filterquery: filterQuery,\n            sort: _getSorting(field, sorting)\n        }).$promise;\n    }\n}\n","/**\n * $resource for Case model, now only used for detail page.\n */\nangular.module('app.cases.services').factory('CaseDetail', CaseDetail);\n\nCaseDetail.$inject = ['$resource'];\nfunction CaseDetail ($resource) {\n    return $resource(\n        '/search/search/?type=cases_case&filterquery=id\\::id',\n        {},\n        {\n            get: {\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    if (data && data.hits && data.hits.length > 0) {\n                        var obj = data.hits[0];\n                        return obj;\n                    }\n                    return null;\n                }\n            },\n            query: {\n                url: '/search/search/?type=cases_case&filterquery=:filterquery',\n                isArray: true,\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    var objects = [];\n                    if (data && data.hits && data.hits.length > 0) {\n                        data.hits.forEach(function(obj) {\n                            obj = $.extend(obj, {historyType: 'case', color: 'grey', date: obj.expires});\n                            objects.push(obj);\n                        });\n                    }\n                    return objects;\n                }\n            },\n            totalize: {\n                url: '/search/search/?type=cases_case&size=0&filterquery=:filterquery',\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    if (data && data.total) {\n                        return {total: data.total};\n                    }\n                    return {total: 0};\n                }\n            }\n        }\n    );\n}\n","angular.module('app.cases.services').factory('CaseStatuses', CaseStatuses);\n\nCaseStatuses.$inject = ['$resource'];\nfunction CaseStatuses ($resource) {\n    return $resource('/api/cases/statuses');\n}\n","angular.module('app.cases.services').factory('UnassignedTeamCases', UnassignedTeamCases);\n\nUnassignedTeamCases.$inject = ['$resource'];\nfunction UnassignedTeamCases ($resource) {\n    return $resource('/api/cases/teams/:teamId/?is_assigned=False&is_archived=false&is_deleted=False')\n}\n","angular.module('app.contacts').config(contactsConfig);\n\ncontactsConfig.$inject = ['$stateProvider'];\nfunction contactsConfig ($stateProvider) {\n    $stateProvider.state('base.contacts.create', {\n        url: '/create',\n        views: {\n            '@': {\n                templateUrl: 'contacts/create/',\n                controller: ContactCreateController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Create'\n        }\n    });\n    $stateProvider.state('base.contacts.create.fromAccount', {\n        url: '/account/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: function(elem, attr){\n                    return '/contacts/add/from_account/' + elem.id + '/';\n                },\n                controller: ContactCreateController\n            }\n        },\n        ncyBreadcrumb:{\n            skip: true\n        }\n    });\n}\n\nangular.module('app.contacts').controller('ContactCreateController', ContactCreateController);\n\nContactCreateController.$inject = ['$scope'];\nfunction ContactCreateController ($scope) {\n    $scope.conf.pageTitleBig = 'New contact';\n    $scope.conf.pageTitleSmall = 'who did you talk to?';\n}\n","angular.module('app.contacts').config(contactsConfig);\n\ncontactsConfig.$inject = ['$stateProvider'];\nfunction contactsConfig ($stateProvider) {\n    $stateProvider.state('base.contacts.detail.delete', {\n        url: '/delete',\n        views: {\n            '@': {\n                controller: ContactDeleteController\n            }\n        }\n    });\n}\n\nangular.module('app.contacts').controller('ContactDeleteController', ContactDeleteController);\n\nContactDeleteController.$inject = ['$state', '$stateParams', 'ContactTest'];\nfunction ContactDeleteController($state, $stateParams, ContactTest) {\n    var id = $stateParams.id;\n\n    ContactTest.delete({\n        id:id\n    }, function() {  // On success\n        $state.go('base.contacts');\n    }, function(error) {  // On error\n        // Error notification needed\n        $state.go('base.contacts');\n    });\n}\n","angular.module('app.contacts').config(contactsConfig);\n\ncontactsConfig.$inject = ['$stateProvider'];\nfunction contactsConfig ($stateProvider) {\n    $stateProvider.state('base.contacts.detail', {\n        url: '/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: 'contacts/controllers/detail.html',\n                controller: 'ContactDetailController'\n            }\n        },\n        ncyBreadcrumb: {\n            label: '{{ contact.name }}'\n        },\n        resolve: {\n            contact: ['ContactDetail', '$stateParams', function (ContactDetail, $stateParams) {\n                var contactId = $stateParams.id;\n                return ContactDetail.get({id: contactId}).$promise\n            }]\n        }\n    });\n}\n\nangular.module('app.contacts').controller('ContactDetailController', ContactDetail);\n\nContactDetail.$inject = ['$scope', '$stateParams', 'ContactDetail', 'CaseDetail', 'contact'];\nfunction ContactDetail($scope, $stateParams, ContactDetail, CaseDetail, contact) {\n    var id = $stateParams.id;\n\n    $scope.contact = contact;\n\n    if ($scope.contact.accounts) {\n        $scope.contact.accounts.forEach(function(account) {\n            var colleagueList = ContactDetail.query({filterquery: 'NOT(id:' + id + ') AND accounts.id:' + account.id});\n            colleagueList.$promise.then(function(colleagues) {\n                account.colleagueList = colleagues;\n            })\n        });\n    }\n\n    $scope.conf.pageTitleBig = 'Contact detail';\n    $scope.conf.pageTitleSmall = 'the devil is in the details';\n\n    $scope.caseList = CaseDetail.query({filterquery: 'contact:' + id});\n    $scope.caseList.$promise.then(function(caseList) {\n        $scope.caseList = caseList;\n    });\n}\n","angular.module('app.contacts').config(contactsConfig);\n\ncontactsConfig.$inject = ['$stateProvider'];\nfunction contactsConfig ($stateProvider) {\n    $stateProvider.state('base.contacts.detail.edit', {\n        url: '/edit',\n        views: {\n            '@': {\n                templateUrl: function(elem, attr) {\n                    return '/contacts/edit/' + elem.id +'/';\n                },\n                controller: ContactEditController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Edit'\n        }\n    });\n}\n\nangular.module('app.contacts').controller('ContactEditController', ContactEditController);\n\nContactEditController.$inject = ['$scope', '$stateParams', 'ContactDetail'];\nfunction ContactEditController ($scope, $stateParams, ContactDetail) {\n    var id = $stateParams.id;\n    var contactPromise = ContactDetail.get({id: id}).$promise;\n\n    contactPromise.then(function(contact) {\n        $scope.contact = contact;\n        $scope.conf.pageTitleBig = contact.name;\n        $scope.conf.pageTitleSmall = 'change is natural';\n        HLSelect2.init();\n    });\n}\n","angular.module('app.contacts').config(contactsConfig);\n\ncontactsConfig.$inject = ['$stateProvider'];\nfunction contactsConfig ($stateProvider) {\n    $stateProvider.state('base.contacts', {\n        url: '/contacts',\n        views: {\n            '@': {\n                templateUrl: 'contacts/controllers/list.html',\n                controller: ContactListController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Contacts'\n        }\n    });\n}\n\nangular.module('app.contacts').controller('ContactListController', ContactListController);\n\nContactListController.$inject = ['$scope', '$window', 'Contact', 'Cookie', 'ContactTest'];\nfunction ContactListController($scope, $window, Contact, Cookie, ContactTest) {\n    var cookie = Cookie('contactList');\n\n    $scope.conf.pageTitleBig = 'Contacts';\n    $scope.conf.pageTitleSmall = 'do all your lookin\\' here';\n\n    /**\n     * table object: stores all the information to correctly display the table\n     */\n    $scope.table = {\n        page: 1,  // current page of pagination: 1-index\n        pageSize: 20,  // number of items per page\n        totalItems: 0, // total number of items\n        filter: cookie.get('filter', ''),  // search filter\n        order:  cookie.get('order', {\n            ascending: true,\n            column:  'modified'  // string: current sorted column\n        }),\n        visibility: cookie.get('visibility', {\n            name: true,\n            contactInformation: true,\n            worksAt: true,\n            created: true,\n            modified: true,\n            tags: true\n        })};\n\n    $scope.deleteContact = function(contact) {\n        if (confirm('Are you sure?')) {\n            ContactTest.delete({\n                id:contact.id\n            }, function() {  // On success\n                var index = $scope.table.items.indexOf(contact);\n                $scope.table.items.splice(index, 1);\n            }, function(error) {  // On error\n                alert('something went wrong.')\n            })\n        }\n    };\n\n    /**\n     * updateTableSettings() sets scope variables to the cookie\n     */\n    function updateTableSettings() {\n        cookie.put('filter', $scope.table.filter);\n        cookie.put('order', $scope.table.order);\n        cookie.put('visibility', $scope.table.visibility);\n    }\n\n    /**\n     * updateContacts() reloads the contacts through a service\n     *\n     * Updates table.items and table.totalItems\n     */\n    function updateContacts() {\n        Contact.query(\n            $scope.table\n        ).then(function(data) {\n                $scope.table.items = data.contacts;\n                $scope.table.totalItems = data.total;\n            }\n        );\n    }\n\n    /**\n     * Watches the model info from the table that, when changed,\n     * needs a new set of contacts\n     */\n    $scope.$watchGroup([\n        'table.page',\n        'table.order.column',\n        'table.order.ascending',\n        'table.filter'\n    ], function() {\n        updateTableSettings();\n        updateContacts();\n    });\n\n    /**\n     * Watches the model info from the table that, when changed,\n     * needs to store the info to the cache\n     */\n    $scope.$watchCollection('table.visibility', function() {\n        updateTableSettings();\n    });\n\n    /**\n     * setFilter() sets the filter of the table\n     *\n     * @param queryString string: string that will be set as the new filter on the table\n     */\n    $scope.setFilter = function(queryString) {\n        $scope.table.filter = queryString;\n    };\n\n    /**\n     * exportToCsv() creates an export link and opens it\n     */\n    $scope.exportToCsv = function() {\n        var getParams = '';\n\n        // If there is a filter, add it\n        if ($scope.table.filter) {\n            getParams += '&export_filter=' + $scope.table.filter;\n        }\n\n        // Add all visible columns\n        angular.forEach($scope.table.visibility, function(value, key) {\n            if (value) {\n                getParams += '&export_columns='+ key;\n            }\n        });\n\n        // Setup url\n        var url = '/contacts/export/';\n        if (getParams) {\n            url += '?' + getParams.substr(1);\n        }\n\n        // Open url\n        $window.open(url);\n    }\n}\n","angular.module('app.contacts.directives').directive('contactDetailWidget', ContactDetailWidget);\n\nfunction ContactDetailWidget() {\n    return {\n        restrict: 'E',\n        replace: true,\n        scope: {\n            contact: '=',\n            height: '='\n        },\n        templateUrl: 'contacts/directives/detail_widget.html'\n    }\n}\n","angular.module('app.contacts.directives').directive('contactListWidget', ContactListWidget);\n\nfunction ContactListWidget() {\n    return {\n        restrict: 'E',\n        replace: true,\n        scope: {\n            title: '@',\n            list: '=',\n            height: '=',\n            accountId: '@',\n            addLink: '@'\n        },\n        templateUrl: 'contacts/directives/list_widget.html'\n    }\n}\n","angular.module('app.contacts.services').factory('ContactDetail', ContactDetail);\n\nContactDetail.$inject = ['$resource'];\nfunction ContactDetail ($resource) {\n    function getPhone(contact) {\n        if (contact.phone_mobile) return contact.phone_mobile[0];\n        if (contact.phone_work) return contact.phone_work[0];\n        if (contact.phone_other) return contact.phone_other[0];\n        return '';\n    }\n\n    function getPhones(contact) {\n        var phones = [];\n        if (contact.phone_mobile) phones = phones.concat(contact.phone_mobile);\n        if (contact.phone_work) phones = phones.concat(contact.phone_work);\n        if (contact.phone_other) phones = phones.concat(contact.phone_other);\n        return phones;\n    }\n\n    return $resource(\n        '/search/search/?type=contacts_contact&filterquery=id\\::id',\n        {},\n        {\n            get: {\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    if (data && data.hits && data.hits.length > 0) {\n                        var contact = data.hits[0];\n                        contact.phones = getPhones(contact);\n                        contact.phone = getPhone(contact);\n                        return contact;\n                    }\n                    return null;\n                }\n            },\n            query: {\n                url: '/search/search/?type=contacts_contact&size=1000&filterquery=:filterquery',\n                isArray: true,\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    var contacts = [];\n                    if (data && data.hits && data.hits.length > 0) {\n                        data.hits.forEach(function (contact) {\n                            contact.phones = getPhones(contact);\n                            contact.phone = getPhone(contact);\n                            contacts.push(contact);\n                        });\n                    }\n                    return contacts;\n                }\n            }\n        }\n    )\n}\n","angular.module('app.contacts.services').factory('Contact', Contact);\n\nContact.$inject = ['$http'];\nfunction Contact ($http) {\n    var Contact = {};\n\n    /**\n     * getContacts() get the contacts from the search backend through a promise\n     *\n     * @param queryString string: current filter on the contactlist\n     * @param page int: current page of pagination\n     * @param pageSize int: current page size of pagination\n     * @param orderColumn string: current sorting of contacts\n     * @param orderedAsc {boolean}: current ordering\n     *\n     * @returns Promise object: when promise is completed:\n     *      {\n     *          contacts list: paginated contact objects\n     *          total int: total number of contact objects\n     *      }\n     */\n    var getContacts = function(queryString, page, pageSize, orderColumn, orderedAsc) {\n\n        var sort = '';\n        if (orderedAsc) sort += '-';\n        sort += orderColumn;\n\n        return $http({\n            url: '/search/search/',\n            method: 'GET',\n            params: {\n                type: 'contacts_contact',\n                q: queryString,\n                page: page - 1,\n                size: pageSize,\n                sort: sort\n            }\n        })\n            .then(function(response) {\n                return {\n                    contacts: response.data.hits,\n                    total: response.data.total\n                };\n            });\n    };\n\n    /**\n     * query() makes it possible to query on contacts on backend search\n     *\n     * @param table object: holds all the info needed to get contacts from backend\n     *\n     * @returns Promise object: when promise is completed:\n     *      {\n     *          contacts list: paginated contact objects\n     *          total int: total number of contact objects\n     *      }\n     */\n    Contact.query = function(table) {\n        return getContacts(table.filter, table.page, table.pageSize, table.order.column, table.order.ascending);\n    };\n\n    return Contact;\n}\n\n","angular.module('app.contacts.services').factory('ContactTest', ContactTest);\n\nContactTest.$inject = ['$resource'];\nfunction ContactTest ($resource) {\n    return $resource('/api/contacts/contact/:id/');\n}\n","angular.module('app.dashboard').config(dashboardConfig);\n\ndashboardConfig.$inject = ['$stateProvider'];\nfunction dashboardConfig ($stateProvider) {\n    $stateProvider.state('base.dashboard', {\n        url: '/',\n        views: {\n            '@': {\n                templateUrl: 'dashboard/controllers/base.html',\n                controller: DashboardController,\n                controllerAs: 'vm'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Dashboard'\n        }\n    });\n}\n\nangular.module('app.dashboard').controller('DashboardController', DashboardController);\n\nDashboardController.$inject = ['$scope'];\nfunction DashboardController ($scope) {\n    $scope.conf.pageTitleBig = 'Dashboard';\n    $scope.conf.pageTitleSmall = 'statistics and usage';\n}\n","angular.module('app.dashboard.directives').directive('callbackRequests', CallbackRequestsDirective);\n\nfunction CallbackRequestsDirective () {\n    return {\n        scope: {},\n        templateUrl: 'dashboard/directives/callback.html',\n        controller: CallbackRequestsController,\n        controllerAs: 'vm'\n    }\n}\n\nCallbackRequestsController.$inject = ['$scope', 'Case', 'Cookie'];\nfunction CallbackRequestsController ($scope, Case, Cookie) {\n    var vm = this;\n    var cookie = Cookie('callbackWidget');\n\n    vm.table = {\n        order: cookie.get('order', {\n            ascending: true,\n            column: 'created'  // string: current sorted column\n        }),\n        items: []\n    };\n\n    activate();\n\n    ///////////\n\n    function activate () {\n        _watchTable();\n    }\n\n    function _getCallbackRequests () {\n        Case.getCallbackRequests(\n            vm.table.order.column,\n            vm.table.order.ascending\n        ).then(function (callbackRequests) {\n            vm.table.items = callbackRequests;\n        });\n    }\n\n    function _watchTable() {\n        $scope.$watchGroup(['vm.table.order.ascending', 'vm.table.order.column'], function() {\n            _getCallbackRequests();\n            cookie.put('order', vm.table.order);\n        })\n    }\n}\n","\nangular.module('app.dashboard.directives').directive('dealsToCheck', dealsToCheckDirective);\n\nfunction dealsToCheckDirective () {\n    return {\n        scope: {},\n        templateUrl: 'dashboard/directives/dealstocheck.html',\n        controller: DealsToCheckController,\n        controllerAs: 'vm'\n    }\n}\n\nDealsToCheckController.$inject = ['$scope', 'Cookie', 'Deal', 'UserTeams'];\nfunction DealsToCheckController ($scope, Cookie, Deal, UserTeams) {\n    var cookie = Cookie('dealsToCheckkWidget');\n    var vm = this;\n    vm.users = [];\n    vm.table = {\n        order: cookie.get('order', {\n            ascending: true,\n            column: 'closing_date'  // string: current sorted column\n        }),\n        items: [],\n        selectedUserId: cookie.get('selectedUserId')\n    };\n    vm.markDealAsChecked = markDealAsChecked;\n    activate();\n\n    ///////////\n\n    function activate () {\n        _watchTable();\n        _getUsers();\n    }\n\n    function _getDealsToCheck () {\n        if (vm.table.selectedUserId) {\n            Deal.getDealsToCheck(\n                vm.table.order.column,\n                vm.table.order.ascending,\n                vm.table.selectedUserId\n            ).then(function (deals) {\n                vm.table.items = deals;\n            });\n        }\n    }\n\n    function _getUsers() {\n        UserTeams.mine(function (teams) {\n            angular.forEach(teams, function (team) {\n                vm.users = vm.users.concat(team.user_set);\n            });\n        });\n    }\n\n    function _watchTable() {\n        $scope.$watchGroup(['vm.table.order.ascending', 'vm.table.order.column', 'vm.table.selectedUserId'], function() {\n            _getDealsToCheck();\n            cookie.put('order', vm.table.order);\n            cookie.put('selectedUserId', vm.table.selectedUserId);\n        })\n    }\n\n    function markDealAsChecked (deal) {\n        deal.markDealAsChecked().then(function() {\n           vm.table.items.splice(vm.table.items.indexOf(deal), 1);\n        });\n    }\n\n}\n","\nangular.module('app.dashboard.directives').directive('feedback', feedbackDirective);\n\nfunction feedbackDirective () {\n    return {\n        scope: {},\n        templateUrl: 'dashboard/directives/feedback.html',\n        controller: FeedbackController,\n        controllerAs: 'vm'\n    }\n}\n\nFeedbackController.$inject = ['$scope', '$state', 'Account', 'Cookie', 'Deal'];\nfunction FeedbackController ($scope, $state, Account, Cookie, Deal) {\n    var cookie = Cookie('feedbackWidget');\n\n    var vm = this;\n    vm.table = {\n        order: cookie.get('order', {\n            ascending: true,\n            column: 'closing_date'  // string: current sorted column\n        }),\n        items: []\n    };\n\n    vm.feedbackFormSentForDeal = feedbackFormSentForDeal;\n    vm.openFeedbackForm = openFeedbackForm;\n\n    activate();\n\n    ///////////\n\n    function activate () {\n        _watchTable();\n    }\n\n    function _getFeedbackDeals () {\n        Deal.getFeedbackDeals(\n            vm.table.order.column,\n            vm.table.order.ascending\n        ).then(function (deals) {\n            vm.table.items = deals;\n        });\n    }\n\n    function feedbackFormSentForDeal (deal) {\n        deal.feedbackFormSent().then(function() {\n           vm.table.items.splice(vm.table.items.indexOf(deal), 1);\n        });\n    }\n\n    function openFeedbackForm (deal) {\n        Account.get({id: deal.account}, function(account) {\n            var emailAddress = account.getEmailAddress();\n            if (emailAddress) {\n                $state.go('base.email.composeEmail', {email: emailAddress.email_address});\n            } else {\n                $state.go('base.email.compose');\n            }\n        });\n    }\n\n    function _watchTable() {\n        $scope.$watchGroup(['vm.table.order.ascending', 'vm.table.order.column'], function() {\n            _getFeedbackDeals();\n            cookie.put('order', vm.table.order);\n        })\n    }\n}\n","angular.module('app.dashboard.directives').directive('followUp', followUpDirective);\n\nfunction followUpDirective (){\n    return {\n        scope: {},\n        templateUrl: 'dashboard/directives/followup.html',\n        controller: FollowUpController,\n        controllerAs: 'vm'\n    }\n}\n\nFollowUpController.$inject = ['$modal', '$scope', 'Deal', 'Cookie'];\nfunction FollowUpController ($modal, $scope, Deal, Cookie){\n\n    var cookie = Cookie('followupWidget');\n\n    var vm = this;\n    vm.table = {\n        order: cookie.get('order', {\n            ascending: true,\n            column: 'created'\n        }),\n        items: []\n    };\n\n    vm.openFollowUpWidgetModal = openFollowUpWidgetModal;\n\n    activate();\n\n    //////\n\n    function activate(){\n        _watchTable();\n    }\n\n    function _getFollowUp(){\n        Deal.getFollowUpWidgetData(\n            vm.table.order.column,\n            vm.table.order.ascending\n        ).then(function (data){\n            vm.table.items = data;\n        });\n    }\n\n    function openFollowUpWidgetModal(followUp){\n        var modalInstance = $modal.open({\n            templateUrl: 'deals/controllers/followup_widget.html',\n            controller: 'FollowUpWidgetModal',\n            controllerAs: 'vm',\n            size: 'md',\n            resolve: {\n                followUp: function(){\n                    return followUp;\n                }\n            }\n        });\n\n        modalInstance.result.then(function() {\n            _getFollowUp();\n        });\n    }\n\n    function _watchTable(){\n        $scope.$watchGroup(['vm.table.order.ascending', 'vm.table.order.column'], function() {\n            _getFollowUp();\n            cookie.put('order', vm.table.order);\n        })\n    }\n}\n","angular.module('app.dashboard.directives').directive('myCases', myCasesDirective);\n\nfunction myCasesDirective () {\n    return {\n        scope: {},\n        templateUrl: 'dashboard/directives/mycases.html',\n        controller: MyCasesController,\n        controllerAs: 'vm'\n    }\n}\n\nMyCasesController.$inject = ['$modal', '$scope', 'Case', 'Cookie'];\nfunction MyCasesController ($modal, $scope, Case, Cookie) {\n    var cookie = Cookie('myCasesWidget');\n\n    var vm = this;\n    vm.table = {\n        order: cookie.get('order', {\n            ascending: true,\n            column: 'expires'  // string: current sorted column\n        }),\n        items: []\n    };\n\n    vm.openPostponeWidget = openPostponeWidget;\n\n    activate();\n\n    /////\n\n    function activate() {\n        _watchTable();\n    }\n\n    function _getMyCases() {\n        Case.getMyCasesWidget(\n            vm.table.order.column,\n            vm.table.order.ascending\n        ).then(function (data) {\n            vm.table.items = data;\n        });\n    }\n\n    function openPostponeWidget(myCase) {\n        var modalInstance = $modal.open({\n            templateUrl: 'cases/controllers/postpone.html',\n            controller: 'CasePostponeModal',\n            controllerAs: 'vm',\n            size: 'sm',\n            resolve: {\n                myCase: function() {\n                    return myCase\n                }\n            }\n        });\n\n        modalInstance.result.then(function() {\n            _getMyCases();\n        });\n    }\n\n    function _watchTable() {\n        $scope.$watchGroup(['vm.table.order.ascending', 'vm.table.order.column'], function() {\n            _getMyCases();\n            cookie.put('order', vm.table.order);\n        })\n    }\n}\n","angular.module('app.dashboard.directives').directive('queueSize', queueSizeDirective);\n\nfunction queueSizeDirective (){\n    return {\n        scope: {},\n        templateUrl: 'dashboard/directives/queuesize.html',\n        controller: QueueSizeController\n    }\n}\n\nQueueSizeController.$inject = ['$filter', '$http', '$interval', '$scope'];\nfunction QueueSizeController ($filter, $http, $interval, $scope) {\n    $scope.show = false;\n    $scope.currentUser = currentUser;\n    if (!currentUser.isSuperUser) return;\n    $scope.labels = [];\n    $scope.series = ['Queue Size'];\n    $scope.data = [[]];\n    $scope.options = {\n        animation: false\n    };\n    $scope.queueName = 'queue1';\n\n    var getQueueInfo = function() {\n        $http.get('/api/utils/queues/' + $scope.queueName + '/').then(function(data){\n            $scope.labels.push($filter('date')(Date.now(), 'H:mm:ss'));\n            $scope.data[0].push(data.data.size);\n            if ($scope.data[0].length > 15) {\n                $scope.data[0].shift();\n                $scope.labels.shift();\n            }\n            $scope.totalSize = data.data.total_messages;\n            $scope.show = true;\n        }, function() {\n            $interval.cancel(stop);\n            $scope.show = false;\n        });\n    };\n    //Fetch again every 10 seconds\n    getQueueInfo();\n    var stop = $interval(getQueueInfo, 10000);\n\n    $scope.$on('$destroy', function() {\n        // Make sure that the interval is destroyed too\n        if (angular.isDefined(stop)) {\n            $interval.cancel(stop);\n            stop = undefined;\n        }\n    });\n}\n","angular.module('app.dashboard.directives').directive('teams', teamsDirective);\n\nfunction teamsDirective () {\n    return {\n        templateUrl: 'dashboard/directives/teams.html',\n        controller: TeamsController,\n        controllerAs: 'vm'\n    }\n}\n\nTeamsController.$inject = ['UserTeams'];\nfunction TeamsController (UserTeams) {\n    var vm = this;\n    vm.teams = [];\n\n    activate();\n\n    /////\n\n    function activate() {\n        _getTeams();\n    }\n\n    function _getTeams() {\n        UserTeams.mine(function(teams) {\n            vm.teams = teams;\n        });\n    }\n}\n","angular.module('app.dashboard.directives').directive('unassignedCases', unassignedCasesDirective);\n\nfunction unassignedCasesDirective () {\n    return {\n        templateUrl: 'dashboard/directives/unassignedcases.html',\n        controller: UnassignedCasesController,\n        controllerAs: 'vm',\n        bindToController: true,\n        scope: {\n            team: '='\n        }\n    }\n}\n\nUnassignedCasesController.$inject = ['$http', '$scope', 'Case', 'Cookie'];\nfunction UnassignedCasesController ($http, $scope, Case, Cookie) {\n    var vm = this;\n    var cookie = Cookie('unassignedCasesForTeam' + vm.team.id + 'Widget');\n\n    vm.table = {\n        order: cookie.get('order', {\n            ascending: true,\n            column: 'id'  // string: current sorted column\n        }),\n        items: []\n    };\n\n    vm.assignToMe = assignToMe;\n\n    activate();\n\n    /////\n\n    function activate() {\n        _watchTable();\n    }\n\n    function _getUnassignedCases() {\n        Case.getUnassignedCasesForTeam(\n            vm.team.id,\n            vm.table.order.column,\n            vm.table.order.ascending\n        ).then(function(cases) {\n            vm.table.items = cases;\n        });\n    }\n\n    function assignToMe (caseObj){\n        if(confirm('Assign this case to yourself?')){\n            var req = {\n                method: 'POST',\n                url: '/cases/update/assigned_to/' + caseObj.id + '/',\n                data: 'assignee=' + currentUser.id,\n                headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n            };\n\n            $http(req).success(function() {\n                vm.table.items.splice(vm.table.items.indexOf(caseObj), 1);\n                $scope.loadNotifications();\n            });\n        }\n    }\n\n    function _watchTable() {\n        $scope.$watchGroup(['vm.table.order.ascending', 'vm.table.order.column'], function() {\n             _getUnassignedCases();\n            cookie.put('order', vm.table.order);\n        })\n    }\n}\n","angular.module('app.dashboard.directives').directive('unreadEmail', unreadEmailDirective);\n\nfunction unreadEmailDirective () {\n    return {\n        scope: {},\n        templateUrl: 'dashboard/directives/unreademail.html',\n        controller: UnreadEmailController,\n        controllerAs: 'vm'\n    }\n}\n\nUnreadEmailController.$inject = ['$scope', 'EmailMessage', 'Cookie'];\nfunction UnreadEmailController ($scope, EmailMessage, Cookie) {\n    var cookie = Cookie('unreadEmailWidget');\n\n    var vm = this;\n    vm.table = {\n        order: cookie.get('order', {\n            ascending: true,\n            column: 'sent_date'  // string: current sorted column\n        }),\n        items: []\n    };\n    activate();\n\n    //////\n\n    function activate() {\n        _watchTable();\n    }\n\n    function _getMessages () {\n        EmailMessage.getDashboardMessages(\n            vm.table.order.column,\n            vm.table.order.ascending\n        ).then(function (messages) {\n            vm.table.items = messages;\n        });\n    }\n\n    function _watchTable() {\n        $scope.$watchGroup(['vm.table.order.ascending', 'vm.table.order.column'], function() {\n            _getMessages();\n            cookie.put('order', vm.table.order);\n        })\n    }\n}\n","angular.module('app.deals').config(dealsConfig);\n\ndealsConfig.$inject = ['$stateProvider'];\nfunction dealsConfig ($stateProvider) {\n    $stateProvider.state('base.deals.create', {\n        url: '/create',\n        views: {\n            '@': {\n                templateUrl: '/deals/create',\n                controller: DealCreateController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'New'\n        }\n    });\n    $stateProvider.state('base.deals.create.fromAccount', {\n        url: '/account/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: function(elem, attr) {\n                    return '/deals/create/from_account/' + elem.id +'/';\n                },\n                controller: DealCreateController\n            }\n        },\n        ncyBreadcrumb: {\n            skip: true\n        }\n    });\n}\n\nangular.module('app.deals').controller('DealCreateController', DealCreateController);\n\nDealCreateController.$inject = ['$scope'];\nfunction DealCreateController ($scope) {\n    $scope.conf.pageTitleBig = 'New deal';\n    $scope.conf.pageTitleSmall = 'making deals';\n}\n","angular.module('app.deals').config(dealsConfig);\n\ndealsConfig.$inject = ['$stateProvider'];\nfunction dealsConfig ($stateProvider) {\n    $stateProvider.state('base.deals.detail.delete', {\n        url: '/delete',\n        views: {\n            '@': {\n                controller: DealDeleteController\n            }\n        }\n    });\n}\n\nangular.module('app.deals').controller('DealDeleteController', DealDeleteController);\n\nDealDeleteController.$inject = ['$http', '$state', '$stateParams'];\nfunction DealDeleteController ($http, $state, $stateParams) {\n    var id = $stateParams.id;\n    var req = {\n        method: 'POST',\n        url: '/deals/delete/' + id + '/',\n        headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n    };\n\n    $http(req).\n        success(function(data, status, headers, config) {\n            $state.go('base.deals');\n        }).\n        error(function(data, status, headers, config) {\n            $state.go('base.deals');\n        });\n}\n","angular.module('app.deals').config(dealsConfig);\n\ndealsConfig.$inject = ['$stateProvider'];\nfunction dealsConfig ($stateProvider) {\n    $stateProvider.state('base.deals.detail', {\n        url: '/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: 'deals/controllers/detail.html',\n                controller: DealDetailController\n            }\n        },\n        ncyBreadcrumb: {\n            label: '{{ deal.name }}'\n        }\n    });\n}\n\nangular.module('app.deals').controller('DealDetailController', DealDetailController);\n\nDealDetailController.$inject = ['$http', '$scope', '$stateParams', 'DealDetail', 'DealStages'];\nfunction DealDetailController ($http, $scope, $stateParams, DealDetail, DealStages) {\n    $scope.conf.pageTitleBig = 'Deal detail';\n    $scope.conf.pageTitleSmall = 'the devil is in the details';\n\n    var id = $stateParams.id;\n\n    $scope.deal = DealDetail.get({id: id});\n    $scope.dealStages = DealStages.query();\n\n    /**\n     * Change the state of a deal\n     */\n    $scope.changeState = function(stage) {\n        var newStage = stage;\n\n        var req = {\n            method: 'POST',\n            url: '/deals/update/stage/' + $scope.deal.id + '/',\n            data: 'stage=' + stage,\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        $http(req).\n            success(function(data, status, headers, config) {\n                $scope.deal.stage = newStage;\n                $scope.deal.stage_name = data.stage;\n                if(data.closed_date !== undefined){\n                    $scope.deal.closing_date = data.closed_date;\n                }\n                $scope.loadNotifications();\n            }).\n            error(function(data, status, headers, config) {\n                // Request failed propper error?\n            });\n    };\n\n    /**\n     * Archive a deal\n     */\n    $scope.archive = function(id) {\n        var req = {\n            method: 'POST',\n            url: '/deals/archive/',\n            data: 'id=' + id,\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        $http(req).\n            success(function(data, status, headers, config) {\n                $scope.deal.archived = true;\n            }).\n            error(function(data, status, headers, config) {\n                // Request failed propper error?\n            });\n    };\n\n    /**\n     * Unarchive a deal\n     */\n    $scope.unarchive = function(id) {\n        var req = {\n            method: 'POST',\n            url: '/deals/unarchive/',\n            data: 'id=' + id,\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        $http(req).\n            success(function(data, status, headers, config) {\n                $scope.deal.archived = false;\n            }).\n            error(function(data, status, headers, config) {\n                // Request failed propper error?\n            });\n    };\n}\n","angular.module('app.deals').config(dealsConfig);\n\ndealsConfig.$inject = ['$stateProvider'];\nfunction dealsConfig ($stateProvider) {\n    $stateProvider.state('base.deals.detail.edit', {\n        url: '/edit',\n        views: {\n            '@': {\n                templateUrl: function (elem, attr) {\n                    return '/deals/update/' + elem.id + '/';\n                },\n                controller: DealEditController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Edit'\n        }\n    });\n}\n\nangular.module('app.deals').controller('DealEditController', DealEditController);\n\nDealEditController.$inject = ['$scope', '$stateParams', 'DealDetail'];\nfunction DealEditController ($scope, $stateParams, DealDetail) {\n    var id = $stateParams.id;\n    var dealPromise = DealDetail.get({id: id}).$promise;\n\n    dealPromise.then(function(deal) {\n        $scope.deal = deal;\n        $scope.conf.pageTitleBig = 'Edit ' + deal.name;\n        $scope.conf.pageTitleSmall = 'change is natural';\n    })\n}\n","angular.module('app.deals').controller('FollowUpWidgetModal', FollowUpWidgetModalController);\n\nFollowUpWidgetModalController.$inject = ['$filter', '$modalInstance', 'Deal', 'DealStages', 'followUp'];\nfunction FollowUpWidgetModalController ($filter, $modalInstance, Deal, DealStages, followUp) {\n    var vm = this;\n    vm.dealStages = [];\n    vm.selectedStage = { id: followUp.stage, name: followUp.stage_name };\n    vm.followUp = followUp;\n    vm.pickerIsOpen = false;\n    vm.closingDate = new Date(followUp.closing_date);\n    vm.dateFormat = 'dd MMMM yyyy';\n    vm.datepickerOptions = {\n        startingDay: 1\n    };\n\n    vm.openDatePicker = openDatePicker;\n    vm.saveModal = saveModal;\n    vm.closeModal = closeModal;\n\n    activate();\n\n    function activate(){\n        _getDealStages();\n    }\n\n    function _getDealStages(){\n        DealStages.query({}, function(data){\n            vm.dealStages = [];\n            for(var i = 0; i < data.length; i++){\n                vm.dealStages.push({ id: data[i][0], name: data[i][1]});\n            }\n        });\n    }\n\n    function saveModal(){\n        var newDate = $filter('date')(vm.closingDate, 'yyyy-MM-dd');\n        var newStage = vm.selectedStage.id;\n        Deal.update({id: followUp.id}, {stage: newStage, expected_closing_date: newDate}, function() {\n            $modalInstance.close();\n        });\n    }\n\n    function openDatePicker($event){\n        $event.preventDefault();\n        $event.stopPropagation();\n        vm.pickerIsOpen = true;\n    }\n\n    function closeModal(){\n        $modalInstance.close();\n    }\n}\n","angular.module('app.deals').config(dealsConfig);\n\ndealsConfig.$inject = ['$stateProvider'];\nfunction dealsConfig ($stateProvider) {\n    $stateProvider.state('base.deals', {\n        url: '/deals',\n        views: {\n            '@': {\n                templateUrl: 'deals/controllers/list.html',\n                controller: DealListController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Deals'\n        }\n    });\n}\n\nangular.module('app.deals').controller('DealListController', DealListController);\n\nDealListController.$inject = ['$http', '$location', '$scope', 'Cookie', 'Deal', 'HLDate', 'HLFilters'];\nfunction DealListController($http, $location, $scope, Cookie, Deal, HLDate, HLFilters) {\n    var cookie = Cookie('dealList');\n\n    $scope.conf.pageTitleBig = 'Deals';\n    $scope.conf.pageTitleSmall = 'do all your lookin\\' here';\n\n    // Setup search query\n    var searchQuery = '';\n\n    // Check if searchQuery is set as query parameter\n    var search = $location.search().search;\n    if (search != undefined) {\n        searchQuery = search;\n    } else {\n        // Get searchQuery from cookie\n        searchQuery = cookie.get('searchQuery', '');\n    }\n\n    /**\n     * table object: stores all the information to correctly display the table\n     */\n    $scope.table = {\n        page: 1,  // current page of pagination: 1-index\n        pageSize: 20,  // number of items per page\n        totalItems: 0, // total number of items\n        searchQuery: searchQuery,  // search query\n        filterQuery: '',\n        archived: cookie.get('archived', false),\n        order:  cookie.get('order', {\n            ascending: true,\n            column:  'closing_date'  // string: current sorted column\n        }),\n        visibility: cookie.get('visibility', {\n            deal: true,\n            stage: true,\n            created: true,\n            name: true,\n            amountOnce: true,\n            amountRecurring: true,\n            assignedTo: true,\n            closingDate: true,\n            feedbackFormSent: true,\n            newBusiness: true,\n            tags: true\n        })};\n\n    /**\n     * stores the selected filters\n     */\n    $scope.filterList = cookie.get('filterList', [\n        {\n            name: 'Assigned to me',\n            value: 'assigned_to_id:' + currentUser.id,\n            selected: false\n        },\n        {\n            name: 'New business',\n            value: 'new_business:true',\n            selected: false\n        },\n        {\n            name: 'Proposal stage',\n            value: 'stage:1',\n            selected: false\n        },\n        {\n            name: 'Won stage',\n            value: 'stage:2',\n            selected: false\n        },\n        {\n            name: 'Called',\n            value: 'stage:4',\n            selected: false\n        },\n        {\n            name: 'Emailed',\n            value: 'stage:5',\n            selected: false\n        },\n        {\n            name: 'Feedback form not sent',\n            value: 'feedback_form_sent:false',\n            selected: false\n        },\n        {\n            name: 'Age between 7 and 30 days',\n            value: 'created:[' + HLDate.getSubtractedDate(30) + ' TO ' + HLDate.getSubtractedDate(7) + ']',\n            selected: false\n        },\n        {\n            name: 'Age between 30 and 120 days',\n            value: 'created:[' + HLDate.getSubtractedDate(120) + ' TO ' + HLDate.getSubtractedDate(30) + ']',\n            selected: false\n        },\n        {\n            name: 'Archived',\n            value: '',\n            selected: false,\n            id: 'archived'\n        }\n    ]);\n\n    /**\n     * updateTableSettings() sets scope variables to the cookie\n     */\n    function updateTableSettings() {\n        cookie.put('searchQuery', $scope.table.searchQuery);\n        cookie.put('archived', $scope.table.archived);\n        cookie.put('order', $scope.table.order);\n        cookie.put('visibility', $scope.table.visibility);\n        cookie.put('filterList', $scope.filterList);\n    }\n\n    /**\n     * updateDeals() reloads the deals through a service\n     *\n     * Updates table.items and table.totalItems\n     */\n    function updateDeals() {\n        Deal.getDeals(\n            $scope.table.searchQuery,\n            $scope.table.page,\n            $scope.table.pageSize,\n            $scope.table.order.column,\n            $scope.table.order.ascending,\n            $scope.table.filterQuery\n        ).then(function(deals) {\n            $scope.table.items = deals;\n            $scope.table.totalItems = deals.length ? deals[0].total_size: 0;\n        });\n    }\n\n    /**\n     * Watches the model info from the table that, when changed,\n     * needs a new set of deals\n     */\n    $scope.$watchGroup([\n        'table.page',\n        'table.order.column',\n        'table.order.ascending',\n        'table.searchQuery',\n        'table.archived',\n        'table.filterQuery'\n    ], function() {\n        updateTableSettings();\n        updateDeals();\n    });\n\n    /**\n     * Watches the model info from the table that, when changed,\n     * needs to store the info to the cache\n     */\n    $scope.$watchCollection('table.visibility', function() {\n        updateTableSettings();\n    });\n\n    /**\n     * Watches the filters so when the cookie is loaded,\n     * the filterQuery changes and a new set of deals is fetched\n     */\n    $scope.$watchCollection('filterList', function() {\n        $scope.updateFilterQuery();\n    });\n\n    /**\n     * setSearchQuery() sets the search query of the table\n     *\n     * @param queryString string: string that will be set as the new search query on the table\n     */\n    $scope.setSearchQuery = function(queryString) {\n        $scope.table.searchQuery = queryString;\n    };\n\n    $scope.toggleArchived = function() {\n        $scope.table.archived = !$scope.table.archived;\n    };\n\n    $scope.updateFilterQuery = function() {\n        HLFilters.updateFilterQuery($scope);\n    };\n\n    $scope.clearFilters = function() {\n        HLFilters.clearFilters($scope);\n    };\n\n    /**\n     * Deletes the deal in django and updates the angular view\n     */\n    $scope.delete = function(id, name, deal) {\n        var req = {\n            method: 'POST',\n            url: '/deals/delete/' + id + '/',\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        if(confirm(\"Are you sure you want to delete deal \" + name + \"?\")){\n            $http(req).\n                success(function(data, status, headers, config) {\n                    var index = $scope.table.items.indexOf(deal);\n                    $scope.table.items.splice(index, 1);\n                }).\n                error(function(data, status, headers, config) {\n                    // Request failed propper error?\n                });\n        }\n    };\n}\n","angular.module('app.deals.directives').directive('dealListWidget', DealListWidgetDirective);\n\nfunction DealListWidgetDirective () {\n    return {\n        restrict: 'E',\n        replace: true,\n        scope: {\n            title: '@',\n            list: '=',\n            height: '=',\n            addLink: '@'\n        },\n        templateUrl: 'deals/directives/list_widget.html'\n    }\n}\n","angular.module('app.deals.services').factory('Deal', Deal);\n\nDeal.$inject = ['$resource'];\nfunction Deal ($resource) {\n    var Deal = $resource(\n        '/api/deals/deal/:id',\n        null,\n        {\n            update: {\n                method: 'PUT',\n                params: {\n                    id: '@id'\n                }\n            },\n            query: {\n                url: '/search/search/',\n                method: 'GET',\n                params:\n                {\n                    type: 'deals_deal'\n                },\n                isArray: true,\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    var objects = [];\n                    if (data && data.hits && data.hits.length > 0) {\n                        data.hits.forEach(function(obj) {\n                            obj = $.extend(obj, {\n                                historyType: 'deal',\n                                color: 'blue',\n                                date: obj.modified,\n                                total_size: data.total\n                            });\n                            objects.push(obj)\n                        });\n                    }\n                    return objects;\n                }\n            }\n        }\n    );\n\n    Deal.getDeals = getDeals;\n    Deal.getDealsToCheck = getDealsToCheck;\n    Deal.getFeedbackDeals = getFeedbackDeals;\n    Deal.getFollowUpWidgetData = getFollowUpWidgetData;\n    Deal.prototype.markDealAsChecked = markDealAsChecked;\n    Deal.prototype.feedbackFormSent = feedbackFormSent;\n\n    /////\n\n    /**\n     * getDeals() gets the deals from the search backend through a promise\n     *\n     * @param queryString string: current search query on the deallist\n     * @param page int: current page of pagination\n     * @param pageSize int: current page size of pagination\n     * @param orderColumn string: current sorting of deals\n     * @param orderedAsc {boolean}: current ordering\n     * @param filterQuery {string}: contains the filters which are used in ElasticSearch\n     *\n     * @returns Promise object: when promise is completed:\n     *      {\n     *          deals list: paginated deals objects\n     *          total int: total number of deal objects\n     *      }\n     */\n    function getDeals (queryString, page, pageSize, orderColumn, orderedAsc, filterQuery) {\n        var sort = '';\n        if (orderedAsc) sort += '-';\n        sort += orderColumn;\n\n        return Deal.query({\n            q: queryString,\n            page: page - 1,\n            size: pageSize,\n            sort: sort,\n            filterquery: filterQuery\n        }, function (deals) {\n            if (deals.length) {\n                return {\n                    deals: deals,\n                    total: deals[0].total_size\n                };\n            }\n        }).$promise;\n    }\n\n    function getDealsToCheck (column, ordering, userId) {\n\n        var filterQuery = 'stage:2 AND is_checked:false';\n        if (userId) {\n            filterQuery += ' AND assigned_to_id:' + userId;\n        }\n        return getDeals('', 1, 20, column, ordering, filterQuery);\n    }\n\n    function getFeedbackDeals (column, ordering) {\n        var filterQuery = 'stage:2 AND feedback_form_sent:false AND assigned_to_id:' + currentUser.id;\n        return getDeals('', 1, 20, column, ordering, filterQuery);\n    }\n\n    function getFollowUpWidgetData (column, ordering){\n        var filterQuery = '(stage: 0 OR stage: 1 OR stage: 4 OR stage: 5) AND assigned_to_id: ' + currentUser.id;\n        return getDeals('', 1, 20, column, ordering, filterQuery);\n    }\n\n    function feedbackFormSent () {\n        var deal = this;\n        deal.feedback_form_sent = true;\n        return deal.$update();\n    }\n\n    function markDealAsChecked () {\n        var deal = this;\n        deal.is_checked = true;\n        return deal.$update();\n    }\n\n    return Deal;\n}\n","angular.module('app.deals.services').factory('DealDetail', DealDetail);\n\nDealDetail.$inject = ['$resource'];\nfunction DealDetail ($resource) {\n    return $resource(\n        '/search/search/?type=deals_deal&filterquery=id\\::id',\n        {},\n        {\n            get: {\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    if (data && data.hits && data.hits.length > 0) {\n                        var obj = data.hits[0];\n                        return obj;\n                    }\n                    return null;\n                }\n            },\n            query: {\n                url: '/search/search/?type=deals_deal&filterquery=:filterquery',\n                isArray: true,\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    var objects = [];\n                    if (data && data.hits && data.hits.length > 0) {\n                        data.hits.forEach(function(obj) {\n                            obj = $.extend(obj, {historyType: 'deal', color: 'blue', date: obj.modified});\n                            objects.push(obj)\n                        });\n                    }\n                    return objects;\n                }\n            },\n            totalize: {\n                url: '/search/search/?type=deals_deal&size=0&filterquery=:filterquery',\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    if (data && data.total) {\n                        return {total: data.total};\n                    }\n                    return {total: 0};\n                }\n            }\n        }\n    );\n}\n","angular.module('app.deals.services').factory('DealStages', DealStages);\n\nDealStages.$inject = ['$resource'];\n\nfunction DealStages ($resource) {\n    return $resource('/api/deals/stages');\n}\n","angular.module('app.email').config(emailConfig);\nemailConfig.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction emailConfig($stateProvider, $urlRouterProvider) {\n    $urlRouterProvider.when('/email', '/email/all/INBOX');\n    $stateProvider.state('base.email', {\n        url: '/email',\n        views: {\n            '@': {\n                templateUrl: 'email/controllers/base.html',\n                controller: EmailBaseController,\n                controllerAs: 'vm'\n            },\n            'labelList@base.email': {\n                templateUrl: 'email/controllers/label_list.html',\n                controller: 'LabelListController',\n                controllerAs: 'vm'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Email'\n        },\n        resolve: {\n            primaryEmailAccountId: ['$q', 'User', function($q, User) {\n                var deferred = $q.defer();\n                User.me(null, function(data) {\n                    deferred.resolve(data.primary_email_account);\n                });\n                return deferred.promise;\n            }]\n        }\n    });\n}\n\nangular.module('app.email').controller('EmailBaseController', EmailBaseController);\n\nEmailBaseController.$inject = ['$scope'];\nfunction EmailBaseController ($scope) {\n    $scope.conf.pageTitleBig = 'Email';\n    $scope.conf.pageTitleSmall = 'sending love through the world!';\n}\n","angular.module('app.email').config(emailConfig);\nemailConfig.$inject = ['$stateProvider'];\nfunction emailConfig ($stateProvider) {\n    // TODO: LILY-XXX: Clean up compose states and make email/template optional params\n    $stateProvider.state('base.email.compose', {\n        url: '/compose',\n        views: {\n            '@base.email': {\n                templateUrl: '/messaging/email/compose/',\n                controller: EmailComposeController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n    $stateProvider.state('base.email.composeEmail', {\n        url: '/compose/{email}',\n        views: {\n            '@base.email': {\n                templateUrl: '/messaging/email/compose/',\n                controller: EmailComposeController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n    $stateProvider.state('base.email.composeEmailTemplate', {\n        url: '/compose/{email}/{template}',\n        views: {\n            '@base.email': {\n                templateUrl: '/messaging/email/compose/',\n                controller: EmailComposeController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n    $stateProvider.state('base.email.draft', {\n        url: '/draft/{id:[0-9]{1,}}',\n        params: {\n            messageType: 'draft'\n        },\n        views: {\n            '@base.email': {\n                templateUrl: function(elem, attr) {\n                    return '/messaging/email/draft/' + elem.id + '/';\n                },\n                controller: EmailComposeController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n    $stateProvider.state('base.email.reply', {\n        url: '/reply/{id:[0-9]{1,}}',\n        params: {\n            messageType: 'reply'\n        },\n        views: {\n            '@base.email': {\n                templateUrl: function(elem, attr) {\n                    return '/messaging/email/reply/' + elem.id + '/';\n                },\n                controller: EmailComposeController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n    $stateProvider.state('base.email.replyAll', {\n        // TODO: This should probably be redone so the url is nicer.\n        // Maybe we can save the action in the scope?\n        url: '/replyall/{id:[0-9]{1,}}',\n        params: {\n            messageType: 'reply-all'\n        },\n        views: {\n            '@base.email': {\n                templateUrl: function(elem, attr) {\n                    return '/messaging/email/replyall/' + elem.id + '/';\n                },\n                controller: EmailComposeController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n    $stateProvider.state('base.email.forward', {\n        url: '/forward/{id:[0-9]{1,}}',\n        params: {\n            messageType: 'forward'\n        },\n        views: {\n            '@base.email': {\n                templateUrl: function(elem, attr) {\n                    return '/messaging/email/forward/' + elem.id + '/';\n                },\n                controller: EmailComposeController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n}\n\nangular.module('app.email').controller('EmailComposeController', EmailComposeController);\n\nEmailComposeController.$inject = ['$scope', '$stateParams', '$templateCache', '$q', 'ContactDetail', 'EmailMessage', 'EmailTemplate', 'SelectedEmailAccount'];\nfunction EmailComposeController ($scope, $stateParams, $templateCache, $q, ContactDetail, EmailMessage, EmailTemplate, SelectedEmailAccount) {\n\n    $scope.conf.pageTitleBig = 'Send email';\n    $scope.conf.pageTitleSmall = 'sending love through the world!';\n\n    activate();\n\n    //////////\n\n    function activate () {\n        // Remove cache so new compose will always hit the server\n        $templateCache.remove('/messaging/email/compose/');\n\n        if ($stateParams.messageType == 'reply') {\n            // If it's a reply, load the email message first\n            EmailMessage.get({id: $stateParams.id}).$promise.then(function (emailMessage) {\n                _initEmailCompose(emailMessage);\n            });\n        }\n        else {\n            // Otherwise just initialize the email compose\n            _initEmailCompose();\n        }\n    }\n\n    function _initEmailCompose(emailMessage) {\n        var email = $stateParams.email;\n\n        var promises = [];\n\n        var recipient = null;\n        var contactPromise;\n\n        if (emailMessage) {\n            contactPromise = ContactDetail.query({filterquery: 'email_addresses.email_address:' + emailMessage.sender.email_address}).$promise;\n            promises.push(contactPromise);\n        }\n        else if (email) {\n            contactPromise = ContactDetail.query({filterquery: 'email_addresses.email_address:' + email}).$promise;\n            promises.push(contactPromise);\n        }\n\n        var emailTemplatePromise = EmailTemplate.query().$promise;\n        promises.push(emailTemplatePromise);\n\n        // TODO: LILY-XXX: Check if this can be cleaned up\n        // Once all promises are done, continue\n        $q.all(promises).then(function(results) {\n            var templates;\n            // This part should only be executed if we've loaded a contact\n            if(contactPromise) {\n                var contact = results[0][0];\n                templates = results[1];\n\n                if (emailMessage) {\n                    email = emailMessage.sender.email_address;\n                }\n\n                if (contact) {\n                    // The text which is actually used in the application/select2\n                    var used_text = '\"' + contact.name + '\" <' + email + '>';\n                    // The text shown in the recipient input\n                    var displayed_text = contact.name + ' <' + email + '>';\n\n                    recipient = {\n                        id: used_text,\n                        text: displayed_text,\n                        object_id: contact.id\n                    };\n                } else {\n                    recipient = {\n                        id: email,\n                        text: email,\n                        object_id: null\n                    };\n                }\n            } else {\n                templates = results[0];\n            }\n\n            var template = $stateParams.template;\n            // Determine whether the default template should be loaded or not\n            var loadDefaultTemplate = template == undefined;\n\n            // Set message type to given message type if available, otherwise set to message type 'new'\n            var messageType = $stateParams.messageType ? $stateParams.messageType : 'new';\n\n            HLInbox.init();\n            HLInbox.initEmailCompose({\n                templateList: templates,\n                defaultEmailTemplateUrl: '/messaging/email/templates/get-default/',\n                getTemplateUrl: '/messaging/email/templates/detail/',\n                messageType: messageType,\n                loadDefaultTemplate: loadDefaultTemplate,\n                recipient: recipient,\n                template: template\n            });\n            HLInbox.setSuccesURL($scope.previousState);\n            if (SelectedEmailAccount.currentAccountId) {\n                angular.element(HLInbox.config.emailAccountInput).select2('val', SelectedEmailAccount.currentAccountId);\n            }\n        });\n    }\n}\n","angular.module('app.email').config(emailConfig);\nemailConfig.$inject = ['$stateProvider'];\nfunction emailConfig ($stateProvider){\n    $stateProvider.state('base.email.detail', {\n        url: '/detail/{id:[0-9]{1,}}',\n        views: {\n            '@base.email': {\n                templateUrl: 'email/controllers/detail.html',\n                controller: EmailDetailController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n}\n\nangular.module('app.email').controller('EmailDetail', EmailDetailController);\n\nEmailDetailController.$inject = ['$scope', '$state', '$stateParams', 'EmailMessage', 'RecipientInformation', 'SelectedEmailAccount'];\nfunction EmailDetailController ($scope, $state, $stateParams, EmailMessage, RecipientInformation, SelectedEmailAccount) {\n    var vm = this;\n    vm.displayAllRecipients = false;\n    vm.message = null;\n    vm.archiveMessage = archiveMessage;\n    vm.trashMessage = trashMessage;\n    vm.deleteMessage = deleteMessage;\n    vm.toggleOverlay = toggleOverlay;\n    vm.markAsUnread = markAsUnread;\n\n    $scope.conf.pageTitleBig = 'Email message';\n    $scope.conf.pageTitleSmall = 'sending love through the world!';\n\n    activate();\n\n    //////\n\n    function activate() {\n        _getMessage();\n    }\n\n    function _getMessage() {\n        EmailMessage.get({id: $stateParams.id}, function(result) {\n            if (result.body_html) {\n                result.bodyHTMLUrl = '/messaging/email/html/' + result.id + '/';\n            }\n            vm.message = result;\n            // It's easier to iterate through a single array, so make an array with all recipients\n            vm.message.all_recipients = result.received_by.concat(result.received_by_cc);\n            // Get contacts\n            RecipientInformation.getInformation(vm.message.all_recipients);\n\n            if (!result.read) {\n                EmailMessage.markAsRead($stateParams.id, true);\n            }\n            // Store current email account\n            SelectedEmailAccount.setCurrentAccountId(vm.message.account);\n        });\n    }\n\n    function archiveMessage() {\n        EmailMessage.archive({id: vm.message.id}).$promise.then(function () {\n            $state.go('base.email.list', { 'labelId': 'INBOX' });\n        });\n    }\n\n    function trashMessage() {\n        EmailMessage.trash({id: vm.message.id}).$promise.then(function () {\n            $state.go('base.email.list', { 'labelId': 'INBOX' });\n        });\n    }\n\n    function deleteMessage () {\n        EmailMessage.delete({id: vm.message.id}).$promise.then(function () {\n            $state.go('base.email.list', { 'labelId': 'INBOX' });\n        });\n    }\n\n    function toggleOverlay () {\n        vm.displayAllRecipients = !vm.displayAllRecipients;\n\n        var $emailRecipients = $('.email-recipients');\n\n        if (vm.displayAllRecipients) {\n            $emailRecipients.height($emailRecipients[0].scrollHeight);\n        } else {\n            $emailRecipients.height('1.30em');\n        }\n    }\n\n    function markAsUnread() {\n        EmailMessage.markAsRead(vm.message.id, false).$promise.then(function () {\n            $state.go('base.email.list', { 'labelId': 'INBOX' });\n        });\n    }\n}\n","angular.module('app.email').config(emailConfig);\nemailConfig.$inject = ['$stateProvider'];\nfunction emailConfig($stateProvider) {\n    $stateProvider.state('base.email.list', {\n        url: '/all/{labelId}',\n        views: {\n            '@base.email': {\n                templateUrl: 'email/controllers/email_list.html',\n                controller: EmailListController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n    $stateProvider.state('base.email.accountAllList', {\n        url: '/account/{accountId}/all',\n        views: {\n            '@base.email': {\n                templateUrl: 'email/controllers/email_list.html',\n                controller: EmailListController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n    $stateProvider.state('base.email.accountList', {\n        url: '/account/{accountId}/{labelId}',\n        views: {\n            '@base.email': {\n                templateUrl: 'email/controllers/email_list.html',\n                controller: EmailListController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n}\n\nangular.module('app.email').controller('EmailListController', EmailListController);\n\nEmailListController.$inject = ['$location', '$scope', '$state', '$stateParams', 'EmailMessage', 'EmailLabel', 'EmailAccount', 'HLText', 'SelectedEmailAccount'];\nfunction EmailListController ($location, $scope, $state, $stateParams, EmailMessage, EmailLabel, EmailAccount, HLText, SelectedEmailAccount) {\n    var vm = this;\n    vm.emailMessages = [];\n    // Check if filter is set as query parameter\n    vm.table = {\n        page: 0,  // current page of pagination: 1-index\n        pageSize: 20,  // number of items per page\n        totalItems: 0, // total number of items\n        filter: ''  // search filter\n    };\n    vm.opts = {\n        checkboxesAll: false\n    };\n    vm.primaryEmailAccount = null;\n    vm.setPage = setPage;\n    vm.toggleCheckboxes = toggleCheckboxes;\n    vm.showReplyOrForwardButtons = showReplyOrForwardButtons;\n    vm.replyOnMessage = replyOnMessage;\n    vm.replyAllOnMessage = replyAllOnMessage;\n    vm.forwardOnMessage = forwardOnMessage;\n    vm.markAsRead = markAsRead;\n    vm.markAsUnread = markAsUnread;\n    vm.archiveMessages = archiveMessages;\n    vm.trashMessages = trashMessages;\n    vm.deleteMessages = deleteMessages;\n    vm.moveMessages = moveMessages;\n    vm.reloadMessages = reloadMessages;\n    vm.goToDraft = goToDraft;\n\n    $scope.conf.pageTitleBig = 'Email';\n    $scope.conf.pageTitleSmall = 'sending love through the world!';\n\n    activate();\n\n    ///////\n\n    function activate() {\n        vm.table.filter = $location.search().search || '';\n        watchTable();\n        // Store current email account\n        SelectedEmailAccount.setCurrentAccountId($stateParams.accountId);\n    }\n\n    function watchTable() {\n        // Check for search input and pagination\n        $scope.$watchGroup([\n            'vm.table.filter',\n            'vm.table.page'\n        ], function (newValues, oldValues) {\n            // Reset page if we start searching\n            if (oldValues[0] == \"\" && newValues[0] != \"\") {\n                vm.setPage(0);\n            }\n            _reloadMessages();\n        });\n    }\n\n    function setPage(pageNumber) {\n        if (pageNumber >= 0 && pageNumber * vm.table.pageSize < vm.table.totalItems) {\n            vm.table.page = pageNumber;\n        }\n    }\n\n\n    function toggleCheckboxes () {\n        for (var i in vm.emailMessages) {\n            vm.emailMessages[i].checked = vm.opts.checkboxesAll;\n        }\n    }\n\n    function _toggleReadMessages(read) {\n        for (var i in vm.emailMessages) {\n            if (vm.emailMessages[i].checked) {\n                EmailMessage.markAsRead(vm.emailMessages[i].id, read);\n                vm.emailMessages[i].read = read;\n            }\n        }\n    }\n\n    /**\n     * Only show the reply and forward buttons if there is one message checked.\n     */\n    function showReplyOrForwardButtons () {\n        var number = 0;\n        for (var i in vm.emailMessages) {\n            if (vm.emailMessages[i].checked) {\n                number++;\n                if (number > 1) {\n                    return false;\n                }\n            }\n        }\n        return number == 1;\n    }\n\n    /**\n     * Get the currently selected EmailMessage instance.\n     *\n     * @returns EmailMessage instance\n     */\n    function _selectedMessage() {\n        for (var i in vm.emailMessages) {\n            if (vm.emailMessages[i].checked) {\n                return vm.emailMessages[i];\n            }\n        }\n    }\n\n    /**\n     * Reply on selected message.\n     */\n    function replyOnMessage() {\n        var message = _selectedMessage();\n        if (message) {\n            $state.go('base.email.reply', {id: message.id});\n        }\n    }\n\n    /**\n     * Reply-all on selected message.\n     */\n    function replyAllOnMessage () {\n        var message = _selectedMessage();\n        if (message) {\n            $state.go('base.email.replyAll', {id: message.id});\n        }\n    }\n\n    /**\n     * Forward on selected message.\n     */\n    function forwardOnMessage () {\n        var message = _selectedMessage();\n        if (message) {\n            $state.go('base.email.forward', {id: message.id});\n        }\n    }\n\n    function markAsRead () {\n        _toggleReadMessages(true);\n    }\n\n    function markAsUnread() {\n        _toggleReadMessages(false);\n    }\n\n    function _removeCheckedMessagesFromList() {\n        var i = vm.emailMessages.length;\n        while (i--) {\n            if (vm.emailMessages[i].checked) {\n                vm.emailMessages.splice(i, 1);\n            }\n        }\n    }\n\n    function archiveMessages () {\n        for (var i in vm.emailMessages) {\n            if (vm.emailMessages[i].checked) {\n                EmailMessage.archive({id: vm.emailMessages[i].id});\n            }\n        }\n        _removeCheckedMessagesFromList();\n    }\n\n    function trashMessages () {\n        for (var i in vm.emailMessages) {\n            if (vm.emailMessages[i].checked) {\n                EmailMessage.trash({id: vm.emailMessages[i].id});\n            }\n        }\n        _removeCheckedMessagesFromList();\n    }\n\n    function deleteMessages () {\n        for (var i in vm.emailMessages) {\n            if (vm.emailMessages[i].checked) {\n                EmailMessage.delete({id: vm.emailMessages[i].id});\n            }\n        }\n        _removeCheckedMessagesFromList();\n    }\n\n    function moveMessages (labelId) {\n        var removedLabels = [];\n        if (vm.label.label_id) {\n            removedLabels = [vm.label.label_id];\n        }\n        var addedLabels = [labelId];\n        // Gmail API needs to know the new labels as well as the old ones, so send them too\n        var data = {\n            remove_labels: removedLabels,\n            add_labels: addedLabels\n        };\n        for (var i in vm.emailMessages) {\n            if (vm.emailMessages[i].checked) {\n                EmailMessage.move({id: vm.emailMessages[i].id, data: data});\n            }\n        }\n        _removeCheckedMessagesFromList();\n    }\n\n    function reloadMessages () {\n        vm.emailMessages = [];\n        _reloadMessages();\n    }\n\n    function goToDraft (messageId) {\n        window.open('/messaging/email/draft/' + messageId + '/', '_self');\n    }\n\n    function _reloadMessages() {\n        var filterquery = [];\n\n        if ($stateParams.labelId) {\n            filterquery.push('label_id:' + $stateParams.labelId);\n        } else {\n            filterquery.push('NOT label_id:Sent');\n        }\n\n        if ($stateParams.accountId) {\n            filterquery.push('account:' + $stateParams.accountId);\n\n            if ($stateParams.labelId) {\n                // Get the label for the given accountId\n                EmailLabel.query({\n                    label_id: $stateParams.labelId,\n                    account__id: $stateParams.accountId\n                }, function (results) {\n                    if (results.length) {\n                        vm.label = results[0];\n                        vm.label.name = vm.label.name.hlCapitalize();\n                    } else {\n                        vm.label = {id: $stateParams.labelId, name: $stateParams.labelId.hlCapitalize()};\n                    }\n                });\n            }\n            // Get the account for the given accountId\n            vm.account = EmailAccount.get({id: $stateParams.accountId});\n        } else {\n            vm.label = {id: $stateParams.labelId, name: $stateParams.labelId.hlCapitalize()};\n        }\n\n        if ($stateParams.labelId && $stateParams.labelId != 'TRASH') {\n            filterquery.push('is_removed:false');\n        }\n\n        if (filterquery) {\n            filterquery = filterquery.join(' AND ');\n        }\n\n        EmailMessage.search({\n            filterquery: filterquery,\n            q: vm.table.filter,\n            size: vm.table.pageSize,\n            page: vm.table.page\n        }, function (data) {\n            vm.emailMessages = data.hits;\n            vm.table.totalItems = data.total;\n        });\n    }\n}\n\n","angular.module('app.email').controller('LabelListController', LabelListController);\n\nLabelListController.$inject = ['$filter', '$interval', '$scope', 'EmailAccount', 'primaryEmailAccountId'];\nfunction LabelListController ($filter, $interval, $scope, EmailAccount, primaryEmailAccountId) {\n    var vm = this;\n    vm.accountList = [];\n    vm.primaryEmailAccountId = primaryEmailAccountId;\n    vm.labelCount = 0;\n    vm.hasUnreadLabel = hasUnreadLabel;\n    vm.unreadCountForLabel = unreadCountForLabel;\n\n    activate();\n\n    //////////\n\n    function activate() {\n        _startIntervalAccountInfo();\n    }\n\n    function _startIntervalAccountInfo() {\n        _getAccountInfo();\n        var stopGetAccountInfo = $interval(_getAccountInfo, 60000);\n\n        // Stop fetching when out of scope\n        $scope.$on('$destroy', function() {\n            // Make sure that the interval is destroyed too\n            if (angular.isDefined(stopGetAccountInfo)) {\n                $interval.cancel(stopGetAccountInfo);\n                stopGetAccountInfo = undefined;\n            }\n        });\n    }\n\n    // Fetch the EmailAccounts & associated labels\n    function _getAccountInfo () {\n        EmailAccount.mine(function (results) {\n            // Sort accounts on id\n            results = $filter('orderBy')(results, 'id');\n\n            vm.accountList = [];\n            // Make sure primary account is set first\n            angular.forEach(results, function(account) {\n                if (account.id != vm.primaryEmailAccountId) {\n                    this.push(account);\n                } else {\n                    this.unshift(account);\n                }\n            }, vm.accountList);\n\n            // Check for unread email count\n            var labelCount = {};\n            for (var i in vm.accountList) {\n                for (var j in vm.accountList[i].labels) {\n                    var label = vm.accountList[i].labels[j];\n                    if (label.label_type == 0) {\n                        if (labelCount.hasOwnProperty(label.label_id)) {\n                            labelCount[label.label_id] += parseInt(label.unread);\n                        } else {\n                            labelCount[label.label_id] = parseInt(label.unread);\n                        }\n                    }\n                }\n            }\n            vm.labelCount = labelCount;\n        });\n    }\n\n    function unreadCountForLabel(account, labelId) {\n        var count = 0;\n        angular.forEach(account.labels, function(label) {\n            if (label.label_id == labelId) {\n                count = label.unread;\n                return true\n            }\n        });\n        return count;\n    }\n\n    function hasUnreadLabel (account, labelId) {\n        return unreadCountForLabel(account, labelId) > 0;\n\n    }\n}\n","/**\n * contactIcon Directive shows how the email is connected with an account or contact\n *\n * @param message object: object with message info\n *\n * Example:\n *\n * <td contact-icon message=\"message\"></td>\n *\n */\nangular.module('app.email.directives').directive('contactIcon', contactIcon);\n\ncontactIcon.$inject = ['$http'];\nfunction contactIcon ($http) {\n    return {\n        restrict: 'A',\n        scope: {\n            message: '='\n        },\n        replace: true,\n        templateUrl: 'email/directives/contact_icon.html',\n        link: function (scope, element, attrs) {\n\n            // Do we have an associated account or contact?\n            if (scope.message.sender_email) {\n                $http.get('/search/emailaddress/' + scope.message.sender_email)\n                    .success(function (data) {\n                        scope.emailAddressResults = data;\n                        if (data.type == 'contact') {\n                            // Contact and has account\n                            if (data.data.accounts) {\n                                scope.status = 'complete';\n                                // Contact without account\n                            } else {\n                                scope.status = 'needsAccount';\n                            }\n                        } else if (data.type == 'account') {\n                            // Is the emailadress from the account it self (eg. info@)\n                            if (data.complete) {\n                                scope.status = 'complete';\n                            } else {\n                                scope.status = 'needsContact';\n                            }\n                        } else {\n                            scope.status = 'needsEverything';\n                        }\n                    });\n            } else {\n                scope.status = 'complete';\n            }\n        }\n    };\n}\n","angular.module('app.email.services').factory('EmailAccount', EmailAccount);\n\nEmailAccount.$inject = ['$resource'];\nfunction EmailAccount ($resource) {\n    return $resource('/api/messaging/email/account/:id/', null,\n        {\n            'update': { method: 'PUT' },\n            'shareWith': {\n                method: 'POST',\n                url: '/api/messaging/email/account/:id/shared/'\n            },\n            'mine': {\n                method: 'GET',\n                url: '/api/messaging/email/account/mine/',\n                isArray: true\n            }\n        }\n    );\n}\n","angular.module('app.email.services').factory('EmailDetail', EmailDetail);\n\nEmailDetail.$inject = ['$resource'];\nfunction EmailDetail ($resource) {\n    return $resource(\n        '',\n        {size:100},\n        {\n            query: {\n                url: '/search/search/?type=email_emailmessage&size=:size&sort=-sent_date&filterquery=:filterquery&account_related=:account_related',\n                isArray: true,\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    var objects = [];\n                    if (data && data.hits && data.hits.length > 0) {\n                        data.hits.forEach(function(obj) {\n                            obj = $.extend(obj, {historyType: 'email', color: 'green', date: obj.sent_date, right: false});\n                            objects.push(obj)\n                        });\n                    }\n                    return objects;\n                }\n            }\n        }\n    );\n}\n","angular.module('app.email.services').factory('EmailLabel', EmailLabel);\n\nEmailLabel.$inject = ['$resource'];\nfunction EmailLabel ($resource) {\n    return $resource('/api/messaging/email/label/:id/');\n}\n","angular.module('app.email.services').factory('EmailMessage', EmailMessage);\n\nEmailMessage.$inject = ['$resource', '$q'];\nfunction EmailMessage ($resource, $q) {\n    var EmailMessage = $resource(\n        '/api/messaging/email/email/:id/:actions',\n        {},\n        {\n            'update': {\n                method: 'PUT',\n                params: {\n                    id: '@id',\n                    actions: ''\n                }\n            },\n            'delete': {\n                method: 'DELETE',\n                params: {\n                    id: '@id',\n                    actions: ''\n                }\n            },\n            'archive': {\n                method: 'PUT',\n                params: {\n                    id: '@id',\n                    actions: 'archive'\n                }\n            },\n            'trash': {\n                method: 'PUT',\n                params: {\n                    id: '@id',\n                    actions: 'trash'\n                }\n            },\n            'get': {\n                method: 'GET',\n                params: {\n                    id: '@id',\n                    actions: ''\n                }\n            },\n            'move': {\n                method: 'PUT',\n                params: {\n                    id: '@id',\n                    actions: 'move'\n                }\n            },\n            'search': {\n                method: 'GET',\n                url: '/search/search/',\n                params: {\n                    user_email_related: 1,\n                    type: 'email_emailmessage',\n                    sort: '-sent_date',\n                    size: 20\n                }\n            }\n        }\n    );\n\n    EmailMessage.markAsRead = markAsRead;\n    EmailMessage.getDashboardMessages = getDashboardMessages;\n\n    //////\n\n    function markAsRead (id, read) {\n        return this.update({id: id, read: read});\n    }\n\n    function getDashboardMessages (field, sorting) {\n        var filterQuery = ['read:false AND label_id:INBOX'];\n        var sort = '';\n        sort += sorting ? '-': '';\n        sort += field;\n\n        var deferred = $q.defer();\n        EmailMessage.search({\n            filterquery: filterQuery,\n            sort: sort\n        }, function (data) {\n            deferred.resolve(data.hits);\n        });\n        return deferred.promise;\n    }\n    return EmailMessage\n}\n","angular.module('app.email.services').factory('EmailTemplate', EmailTemplate);\n\nEmailTemplate.$inject = ['$resource'];\nfunction EmailTemplate ($resource) {\n    return $resource('/api/messaging/email/emailtemplate/:id/');\n}\n","angular.module('app.email.services').factory('RecipientInformation', RecipientInformation);\n\nRecipientInformation.$inject = ['$http'];\nfunction RecipientInformation ($http) {\n\n    var RecipientInformation = {};\n\n    RecipientInformation.getInformation = getInformation;\n\n    //////\n\n    function getInformation(recipients) {\n        recipients.forEach(function (recipient) {\n            // If there's a name set, try to get the contact id\n            // Don't set/change the name because we want to keep the original email intact\n            if (recipient.name != '') {\n                $http.get('/search/emailaddress/' + recipient.email_address)\n                    .success(function (data) {\n                        if (data.type == 'contact') {\n                            if (data.data.id) {\n                                recipient.contact_id = data.data.id;\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    return RecipientInformation;\n}\n","angular.module('app.email.services').factory('SelectedEmailAccount', SelectedEmailAccount);\n\nfunction SelectedEmailAccount () {\n\n    var factory = {\n        currentAccountId: null,\n        setCurrentAccountId: setCurrentAccountId\n    };\n    return factory;\n\n    function setCurrentAccountId (accountId) {\n        factory.currentAccountId = accountId;\n    }\n}\n"],"sourceRoot":"/source/"}