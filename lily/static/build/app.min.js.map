{"version":3,"sources":["accounts/module.js","base/controllers/module.js","base/directives/module.js","base/services/module.js","base/filters/module.js","accounts/directives/module.js","base/analytics.js","base/app.js","base/utils.js","accounts/services.js","forms/formsets.js","forms/select2.js","forms/show-and-hide.js","provide/dataprovider.js","base/controllers/base.js","base/controllers/header.js","base/controllers/sidebar.js","base/directives/checkbox.js","base/directives/date_formatter.js","base/directives/detail_delete.js","base/directives/resize_iframe.js","base/directives/sort_column.js","base/directives/spinnerbar.js","base/services/cookie.js","base/services/hl_date.js","base/services/hl_filters.js","base/services/hl_text.js","base/services/notifications.js","base/filters/min_value.js","base/filters/nl2br.js","base/filters/relative_date.js","base/filters/trust_as_resource_url.js","accounts/controllers/delete.js","accounts/controllers/detail.js","accounts/controllers/list.js","accounts/controllers/upsert.js","accounts/directives/detail_widget.js"],"names":["angular","module","i","s","o","g","r","a","m","q","push","arguments","l","Date","createElement","getElementsByTagName","async","src","parentNode","insertBefore","window","document","ga","settings","$rootScope","layout","pageSidebarClosed","appConfig","$breadcrumbProvider","$controllerProvider","$httpProvider","$resourceProvider","$urlRouterProvider","setOptions","templateUrl","includeAbstract","allowGlobals","defaults","xsrfCookieName","xsrfHeaderName","stripTrailingSlashes","otherwise","runApp","$state","currentUser","factory","$inject","config","run","$","on","$phoneNumberInput","this","phone","val","match","typeId","attr","replace","select2","length","startsWith","substring","e","currentTarget","each","is","HLSelect2","init","Account","$filter","$http","$resource","getAccounts","queryString","page","pageSize","orderColumn","orderedAsc","sort","url","method","params","type","size","then","response","accounts","data","hits","total","getEmailAddress","account","primaryEmails","email_addresses","status","update","id","delete","prototype","getPhone","phone_mobile","phone_work","phone_other","getPhones","phones","concat","get","transformResponse","fromJson","undefined","HLFormsets","formsetClass","self","isPlainObject","extend","formset","initListeners","body","formset_element","parents","add_element","find","indent","addClass","removeClass","stop","slideDown","toggleClass","closest","removeAttr","change","jQuery","tagInputs","ajaxInputs","tagsAjaxClass","ajaxPageLimit","clearText","setupSelect2","minimumResultsForSearch","createTagInputs","createAjaxInputs","hasOwnProperty","tags","$this","split","tokenSeparators","width","cf","_data","options","ajax","cache","term","hasClass","filterQuery","filterquery","term_stripped","trim","filters","forEach","filter","indexOf","filter_val","filter_name","results","more","parsed_data","hit","used_text","name","email_address","displayed_text","text","object_id","unshift","initSelection","item","callback","createSearchChoice","localeCompare","openOnEnter","multiple","initial","HLShowAndHide","selector","field","parent","input","setTimeout","HLDataProvider","buttonDataProvider","loadingText","loadingHeader","provideUrl","dataProviderClass","errorHeader","errorText","successHeader","successText","hiddenSuccessHeader","hiddenSuccessText","overwriteConfirmHeader","fields","formsets","event","findDataProviderInfo","call","which","preventDefault","button","$button","$form","$input","domain","sanitizeDomain","toastr","info","getJSON","done","error","message","fillForm","success","fail","always","slice","checkOverwrite","loopTroughFields","checkOverwriteFields","checkOverwriteLabels","confirm","join","fillField","loopTroughFormSets","filledHiddenField","label","$foundInput","$formsetDiv","$formsetAddLink","newFormsets","j","$newElement","newFormset","insertNewFormset","key","hasFoundInput","newVal","click","value","uniqueValues","index","JSON","stringify","trigger","$stateProvider","state","abstract","controller","ncyBreadcrumb","baseController","$scope","Notifications","activate","$on","_setPreviousState","_contentLoadedActions","loadNotifications","query","notifications","level","console","log","Metronic","initComponents","autosize","toState","toParams","fromState","fromParams","previousState","href","conf","headTitle","pageTitleBig","pageTitleSmall","headerController","Layout","initHeader","sidebarController","initSidebar","checkbox","restrict","transclude","scope","model","directive","dateFormatter","dateFilter","require","link","element","attrs","ngModel","$formatters","detailDelete","elem","go","resizeIframe","maxHeight","outerHeight","ifDoc","ifRef","contentWindow","documentElement","e1","contentDocument","e2","subtractHeights","offset","top","height","scrollHeight","sortColumn","_setSortableIcon","sorted","table","order","column","ascending","$watchCollection","$apply","ngSpinnerBar","scrollTop","pageAutoScrollOnLoad","Cookie","$cookieStore","CookieFactory","prefix","defaultValue","remove","put","service","HLDate","getSubtractedDate","days","date","setDate","getDate","getFullYear","getMonth","HLFilters","updateFilterQuery","displayFilterClear","filterStrings","filterList","selected","clearFilters","HLText","String","hlCapitalize","newString","toLowerCase","charAt","toUpperCase","minValue","values","b","nl2br","$sce","msg","is_xhtml","breakTag","trustAsHtml","relativeDate","fallbackDateFormat","compareWithMidnight","calculateDelta","day","delta","hour","minute","week","month","year","now","setHours","setMinutes","setSeconds","Math","round","innerWidth","ceil","floor","trustAsResourceUrl","accountConfig","views","@","AccountDeleteController","$stateParams","resolve","AccountDetail","accountId","$promise","AccountDetailController","CaseDetail","ContactDetail","DealDetail","caseList","dealList","contactList","controllerAs","AccountList","$window","_setupWatches","deleteAccount","vm","items","splice","alert","_updateTableSettings","cookie","visibility","_updateAccounts","totalItems","$watchGroup","setFilter","exportToCsv","getParams","substr","open","contactInformation","assignedTo","created","modified","customerId","AccountUpsertController","accountPromise","AccountDetailWidget"],"mappings":"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","file":"app.min.js","sourcesContent":["/**\n * app.accounts manages all routes, controllers eg.\n * that relate to Account.\n */\nangular.module('app.accounts', [\n    'ngCookies',\n    'ui.bootstrap',\n    'ui.slimscroll',\n    'app.accounts.services',\n    'app.cases.services',\n    'app.email.services',\n    'contactServices',\n    'noteServices'\n]);\n","angular.module('app.base', [\n    'ui.bootstrap'\n]);\n","/**\n * app.directives is a container for all global lily related Angular directives\n */\nangular.module('app.directives', []);\n","angular.module('app.services', []);\n","angular.module('app.filters', []);\n","angular.module('app.accounts.directives', []);\n","(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\nga('create', 'UA-60721851-1', 'auto');\n","/**\n * App Module is the entry point for Lily related Angular code\n */\nangular.module('app', [\n    'ui.router',\n    'ui.bootstrap',\n    'ngResource',\n    'ngSanitize',\n    'ncy-angular-breadcrumb',\n\n    // Controllers\n    'app.accounts',\n    'app.base',\n    'app.cases',\n    'app.dashboard',\n    'app.email',\n    'app.preferences',\n    'app.preferences.email',\n    'app.preferences.user',\n    'app.templates',\n    'ContactsControllers',\n    'DealControllers',\n    'UtilsControllers',\n\n    // Directives\n    'app.directives',\n    'app.accounts.directives',\n    'app.cases.directives',\n    'app.contacts.directives',\n    'app.deals.directives',\n    'UtilsDirectives',\n\n    // Google Analytics\n    'angulartics',\n    'angulartics.google.analytics',\n\n    // Services\n    'app.services',\n\n    // Filters\n    'app.filters'\n]);\n\n/* Setup global settings */\nangular.module('app').factory('settings', settings);\n\nsettings.$inject = ['$rootScope'];\nfunction settings ($rootScope) {\n    // supported languages\n    var settings = {\n        layout: {\n            pageSidebarClosed: false // sidebar state\n        }\n    };\n\n    $rootScope.settings = settings;\n\n    return settings;\n}\n\nangular.module('app').config(appConfig);\n\nappConfig.$inject = [\n    '$breadcrumbProvider',\n    '$controllerProvider',\n    '$httpProvider',\n    '$resourceProvider',\n    '$urlRouterProvider'\n];\nfunction appConfig ($breadcrumbProvider, $controllerProvider, $httpProvider, $resourceProvider, $urlRouterProvider){\n    // Don't strip trailing slashes from calculated URLs, because django needs them\n    $breadcrumbProvider.setOptions({\n        templateUrl: 'breadcrumbs.html',\n        includeAbstract: true\n    });\n    $controllerProvider.allowGlobals();\n    $httpProvider.defaults.xsrfCookieName = 'csrftoken';\n    $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';\n    $resourceProvider.defaults.stripTrailingSlashes = false;\n    $urlRouterProvider.otherwise('/');\n}\n\n/* Init global settings and run the app */\nangular.module('app').run(runApp);\n\nrunApp.$inject = ['$rootScope', 'settings', '$state'];\nfunction runApp ($rootScope, $state) {\n    $rootScope.$state = $state; // state to be accessed from view\n    $rootScope.currentUser = currentUser;\n}\n","$('body').on('blur', 'input[name^=\"phone\"]', function() {\n    // Format telephone number\n    var $phoneNumberInput = $(this);\n    var phone = $phoneNumberInput.val();\n    if (phone.match(/[a-z]|[A-Z]/)) {\n        // if letters are found, skip formatting: it may not be a phone field after all\n        return false;\n    }\n\n    // Match on mobile phone nrs e.g. +316 or 06, so we can automatically set the type to mobile.\n    if (phone.match(/^\\+316|^06/)) {\n        var typeId = $phoneNumberInput.attr('id').replace('raw_input', 'type');\n        $('#' + typeId).select2('val', 'mobile');\n    }\n\n    phone = phone\n        .replace(\"(0)\",\"\")\n        .replace(/\\s|\\(|\\-|\\)|\\.|x|:|\\*/g, \"\")\n        .replace(/^00/,\"+\");\n\n    if (phone.length == 0) {\n        return false;\n    }\n\n    if (!phone.startsWith('+')) {\n        if (phone.startsWith('0')) {\n            phone = phone.substring(1);\n        }\n        phone = '+31' + phone;\n    }\n\n    if (phone.startsWith('+310')) {\n        phone = '+31' + phone.substring(4);\n    }\n    $phoneNumberInput.val(phone);\n});\n\n$('body').on('change', 'select[id*=\"is_primary\"]', function(e) {\n    if($(e.currentTarget).val() == 'True'){\n        $('select[id*=\"is_primary\"]').each(function(i){\n            if($(this).is('select') && $(this).val() == 'True'){\n                $(this).val('False');\n            }\n        });\n        $(e.currentTarget).val('True');\n        HLSelect2.init();\n    }\n});\n\nfunction addBusinessDays(date, businessDays) {\n    var weeks = Math.floor(businessDays/5);\n    var days = businessDays % 5;\n    var day = date.getDay();\n    if (day === 6 && days > -1) {\n       if (days === 0) {days-=2; day+=2;}\n       days++; dy -= 6;}\n    if (day === 0 && days < 1) {\n       if (days === 0) {days+=2; day-=2;}\n       days--; day += 6;}\n    if (day + days > 5) days += 2;\n    if (day + days < 1) days -= 2;\n    date.setDate(date.getDate() + weeks * 7 + days);\n    return date;\n}\n","(function () {\n    'use strict';\n\n    /**\n     * accountServices is a container for all account related Angular services\n     */\n    angular.module('app.accounts.services', [\n        'ngResource'\n    ]);\n\n    /**\n     * $resource for Account model, now only used for detail page.\n     */\n    angular.module('app.accounts.services').factory('AccountDetail', ['$resource', function($resource) {\n        function getPhone(account) {\n            if (account.phone_mobile) return account.phone_mobile[0];\n            if (account.phone_work) return account.phone_work[0];\n            if (account.phone_other) return account.phone_other[0];\n            return '';\n        }\n        function getPhones(account) {\n            var phones = [];\n            if (account.phone_mobile) phones = phones.concat(account.phone_mobile);\n            if (account.phone_work) phones = phones.concat(account.phone_work);\n            if (account.phone_other) phones = phones.concat(account.phone_other);\n            return phones;\n        }\n        return $resource(\n            '/search/search/?type=accounts_account&filterquery=id\\::id',\n            {},\n            {\n                get: {\n                    transformResponse: function(data) {\n                        data = angular.fromJson(data);\n                        if (data && data.hits && data.hits.length > 0) {\n                            var account = data.hits[0];\n                            account.phone = getPhone(account);\n                            account.phones = getPhones(account);\n                            return account;\n                        }\n                        return null;\n                    }\n                }\n            }\n        );\n    }]);\n\n    /**\n     * Account Service makes it possible to get Accounts from search backend\n     *\n     * @returns: Account object: object with functions related to Accounts\n     */\n    angular.module('app.accounts.services').factory('Account', Account);\n\n    Account.$inject = ['$filter', '$http', '$resource'];\n    function Account ($filter, $http, $resource) {\n        var Account = $resource(\n            '/api/accounts/account/:id',\n            null,\n            {\n                update: {\n                    method: 'PUT',\n                    params: {\n                        id: '@id'\n                    }\n                },\n                delete:  {\n                    method: 'DELETE'\n                }\n            });\n\n        Account.getAccounts = getAccounts;\n        Account.prototype.getEmailAddress = getEmailAddress;\n\n        //////\n\n        /**\n         * getAccounts() gets the accounts from the search backend through a promise\n         *\n         * @param queryString string: current filter on the accountlist\n         * @param page int: current page of pagination\n         * @param pageSize int: current page size of pagination\n         * @param orderColumn string: current sorting of accounts\n         * @param orderedAsc {boolean}: current ordering\n         *\n         * @returns Promise object: when promise is completed:\n         *      {\n         *          accounts list: paginated account objects\n         *          total int: total number of account objects\n         *      }\n         */\n        function getAccounts (queryString, page, pageSize, orderColumn, orderedAsc) {\n\n            var sort = '';\n            if (orderedAsc) sort += '-';\n            sort += orderColumn;\n\n            return $http({\n                url: '/search/search/',\n                method: 'GET',\n                params: {\n                    type: 'accounts_account',\n                    q: queryString,\n                    page: page - 1,\n                    size: pageSize,\n                    sort: sort\n                }\n            })\n                .then(function(response) {\n                    return {\n                        accounts: response.data.hits,\n                        total: response.data.total\n                    };\n                });\n        }\n\n        function getEmailAddress() {\n            var account = this;\n\n            var primaryEmails = $filter('filter')(account.email_addresses, {status: 2});\n\n            if (primaryEmails.length) {\n                return primaryEmails[0];\n            } else if (account.email_addresses.length) {\n                return account.email_addresses[0];\n            }\n        }\n        return Account;\n    }\n})();\n","(function($, window, document, undefined){\n    window.HLFormsets = {\n        config: {\n            formsetClass: '.formset'\n        },\n        init: function (config) {\n            var self = this;\n            // Setup configuration\n            if ($.isPlainObject(config)) {\n                $.extend(self.config, config);\n            }\n\n            $(self.config.formsetClass).formset();\n            self.initListeners();\n        },\n\n        initListeners: function() {\n            var self = this;\n            var body = $('body');\n\n            body.on('formAdded', '[data-formset-form]', function() {\n                var formset_element = $(this).parents('.formset');\n                var add_element = $(formset_element).find('.add-link');\n\n                var indent = ($(formset_element).attr('data-formset-indent') || 'true') == 'true';\n                if(indent) {\n                    $(add_element).find('.form-control-static').addClass('col-md-offset-2').removeClass('form-control-static');\n                }\n                $(add_element).find('label').addClass('hide');\n\n                if ($(formset_element).find('[data-formset-form]').length === 1) {\n                    $(this).find('label.hide').removeClass('hide');\n\n                    if(indent) {\n                        $(this).find('.field_wrapper').removeClass('col-md-offset-2');\n                    }\n                }\n                HLSelect2.init();\n            });\n\n            body.on('formDeleted', '[data-formset-form]', function() {\n                $(this).stop().slideDown();\n                $(this).find(':input:enabled:visible').attr('data-formset-disabled', true).attr('readonly', 'readonly');\n                $(this).find('[data-formset-delete-button]').toggleClass('hidden');\n                $(this).find('[data-formset-undo-delete]').toggleClass('hidden');\n            });\n\n            body.on('click', '[data-formset-form] [data-formset-undo-delete]', function() {\n                var formset = $(this).closest('[data-formset-form]');\n\n                formset.find('[data-formset-disabled=true]').removeAttr('data-formset-disabled').removeAttr('readonly');\n                formset.find('input[name$=\"DELETE\"]').attr('checked', false).change();\n                formset.find('[data-formset-delete-button]').toggleClass('hidden');\n                $(this).toggleClass('hidden');\n            });\n\n        }\n    }\n})(jQuery, window, document);\n","(function($, window, document, undefined){\n    window.HLSelect2 = {\n        config: {\n            tagInputs: 'input.tags',\n            ajaxInputs: 'input.select2ajax',\n            tagsAjaxClass: 'tags-ajax',\n            ajaxPageLimit: 30,\n            clearText: '-- Clear --'\n        },\n\n        init: function( config ) {\n            var self = this;\n            // Setup configuration\n            if ($.isPlainObject(config)) {\n                $.extend(self.config, config);\n            }\n            // On initialize, setup select2\n            self.setupSelect2();\n            self.initListeners();\n        },\n\n        initListeners: function() {\n            var self = this;\n            // When modal is shown, lets instantiate the select2 in the modals\n            $(document).on('shown.bs.modal', '.modal', function() {\n                self.setupSelect2();\n            });\n        },\n\n        setupSelect2: function() {\n            // Setup select2 for non-ajaxified selects, ajaxified selects\n            // are using hidden inputs.\n            $('select').select2({\n                // at least this many results are needed to enable the search field\n                // (9 is the amount at which the user must scroll to see all items)\n                minimumResultsForSearch: 9\n            });\n            this.createTagInputs();\n            this.createAjaxInputs();\n        },\n\n        createTagInputs: function() {\n            // Setup tag inputs\n            $(this.config.tagInputs).each(function() {\n                if (!$(this).data().hasOwnProperty('select2')) {\n                    var tags = [];\n                    var $this = $(this);\n                    if ($this.data('choices')) {\n                        tags = $this.data('choices').split(',');\n                    }\n                    $this.select2({\n                        tags: tags,\n                        tokenSeparators: [',', ' '],\n                        width: '100%'\n                    });\n                }\n            });\n        },\n\n        createAjaxInputs: function() {\n            // Setup inputs that needs remote link\n            var self = this;\n            var cf = self.config;\n\n            $(cf.ajaxInputs).each(function() {\n                var $this = $(this);\n                var _data = $this.data();\n                // _data.tags is a marker for AjaxSelect2Widget which indicates\n                // that it expects multiple values as input.\n\n                // Prevent Select2 from being initialized on elements that already have Select2\n                if (!_data.hasOwnProperty('select2')) {\n                    var options = {\n                        ajax: {\n                            cache: true,\n                            data: function (term, page) {\n                                // page is the one-based page number tracked by Select2\n                                var data = null;\n\n                                if ($this.hasClass(cf.tagsAjaxClass) && !_data.tags) {\n                                    if (term === '') {\n                                        // elasticsearch breaks when the term is empty, so just look for non-empty results\n                                        term = '*';\n                                    }\n                                    // search for contacts and accounts containing the search term, but only those with an email address\n                                    var filterQuery = '((_type:contacts_contact AND (name:' + term + ' OR email_addresses.email_address:' + term + ')) ' +\n                                        'OR (_type:accounts_account AND (name:' + term + ' OR email_addresses.email_address:' + term + '))) ' +\n                                        'AND email_addresses.email_address:*';\n\n                                    data = {\n                                        filterquery: filterQuery,\n                                        size: cf.ajaxPageLimit, // page size\n                                        page: (page - 1), // page number, zero-based\n                                        sort: '-modified' //sort modified descending\n                                    };\n                                }\n                                else {\n                                    var term_stripped = term.trim();\n                                    data = {\n                                        filterquery: term_stripped ? 'name:('+term_stripped+')' : '', //search term\n                                        size: cf.ajaxPageLimit, // page size\n                                        page: (page - 1), // page number, zero-based\n                                        sort: '-modified' //sort modified descending\n                                    };\n                                }\n\n                                var filters = $this.data('filter-on');\n                                if (typeof filters !== 'undefined' && filters !== '') {\n                                    filters.split(',').forEach(function (filter) {\n                                        if (filter.indexOf('id_') === 0) {\n                                            var filter_val = $('#' + filter).val();\n                                            var filter_name = filter.substring(3);\n                                            if (filter_name.indexOf('case_quickbutton_') === 0) {\n                                                filter_name = filter.substring(20);\n                                            } else if (filter_name == 'account') {\n                                                // This is a special case at the moment, in the future we might have\n                                                // more cases like this.\n                                                // But for now, just do this check\n                                                filter_name = 'accounts.id';\n                                            }\n                                            if (filter_val && filter_val > 0) {\n                                                data.filterquery += ' ' + filter_name + ':' + filter_val;\n                                            }\n                                        } else {\n                                            data.type = filter;\n                                        }\n                                    });\n                                }\n\n                                return data;\n                            },\n\n                            results: function (data, page) {\n                                var more = (page * cf.ajaxPageLimit) < data.total; // whether or not there are more results available\n\n                                if ($this.hasClass(cf.tagsAjaxClass) && !_data.tags) {\n                                    var parsed_data = [];\n\n                                    data.hits.forEach(function (hit) {\n                                        // Only display contacts with an e-mail address\n                                        for (var i = 0; i < hit.email_addresses.length; i++) {\n                                            // The text which is actually used in the application\n                                            var used_text = '\"' + hit.name + '\" <' + hit.email_addresses[i].email_address + '>';\n                                            // The displayed text\n                                            var displayed_text = hit.name + ' <' + hit.email_addresses[i].email_address + '>';\n                                            // Select2 sends 'id' as the value, but we want to use the email\n                                            // So store the actual id (hit.id) under a different name\n                                            parsed_data.push({id: used_text, text: displayed_text, object_id: hit.id});\n                                        }\n                                    });\n\n                                    // Array elements with empty text can't be added to select2, so manually fill a new array\n                                    data.hits = parsed_data;\n                                }\n                                else {\n                                    data.hits.forEach(function (hit) {\n                                        hit.text = hit.name;\n                                    });\n                                }\n\n                                // Add clear option, but not for multiple select2.\n                                if ((page == 1 && !$this.hasClass(cf.tagsAjaxClass)) && !_data.tags) {\n                                    data.hits.unshift({id: -1, text:cf.clearText});\n                                }\n                                return {\n                                    results: data.hits,\n                                    more: more\n                                };\n                            }\n                        },\n\n                        initSelection: function (item, callback) {\n                            var id = item.val();\n                            var text = item.data('selected-text');\n                            var data = { id: id, text: text };\n                            callback(data);\n                        }\n                    };\n\n                    if ($this.hasClass(cf.tagsAjaxClass)) {\n                        options.tags = true;\n                        options.tokenSeparators = [',', ' '];\n                        // Create a new tag if there were no results\n                        options.createSearchChoice = function (term, data) {\n                            if ($(data).filter(function () {\n                                    return this.text.localeCompare(term) === 0;\n                                }).length === 0) {\n                                return {\n                                    id: term,\n                                    text: term\n                                };\n                            }\n                        };\n                        // Prevent select2 dropdown from opening when pressing enter\n                        options.openOnEnter = false;\n                    }\n\n                    // Set select2 to multiple.\n                    if(_data.tags) {\n                        options.tags = true;\n                        options.multiple = true;\n                    }\n\n\n                    $this.select2(options);\n                    // Set the initial form value from a JSON encoded data attribute called data-initial\n                    if(_data.tags) {\n                        $this.select2('data', _data.initial);\n                    }\n                }\n            });\n        }\n    };\n\n})(jQuery, window, document);\n","(function($, window, document, undefined){\n    window.HLShowAndHide = {\n        config: {\n            selector: '.show-and-hide-input'\n        },\n\n        init: function( config ) {\n            var self = this;\n            // Setup configuration\n            if ($.isPlainObject(config)) {\n                $.extend(self.config, config);\n            }\n            // On initialize, setup show and hide\n            self.initListeners();\n        },\n\n        initListeners: function() {\n            var self = this;\n\n            // When modal is shown, lets instantiate the select2 in the modals\n            $('body').on('click', '.form .toggle-original-form-input', function() {\n                var field = $(this).closest('.show-and-hide-input');\n\n                /* hide clicked link */\n                $(this).parent().addClass('hide');\n\n                /* toggle form input */\n                if($(this).data('action') == 'show') {\n                    /* show the other link */\n                    $(field).find('[data-action=\"hide\"]').parent().removeClass('hide');\n\n                    /* show the form input */\n                    $(field).find('.original-form-widget').removeClass('hide');\n\n                    /* (re)enable fields */\n                    $(field).find(':input').removeAttr('disabled');\n\n                    var input = $(field).find(':input:visible:not([type=\"file\"]):first');\n                    if(input) {\n                        /* adding to the end of the execution queue reliably sets the focus */\n                        /*  e.g. without, this only works once for select2 inputs */\n                        setTimeout(function() {\n                            // setCaretAtEnd(input);\n                        }, 0);\n                    }\n                } else if($(this).data('action') == 'hide') {\n                    /* show the other link */\n                    $(field).find('[data-action=\"show\"]').parent().removeClass('hide');\n\n                    /* hide the form input */\n                    $(field).find('.original-form-widget').addClass('hide');\n\n                    /* disabled fields will not be posted */\n                    $(field).find(':input').attr('disabled', 'disabled');\n                }\n            });\n        }\n    };\n\n})(jQuery, window, document);\n","(function($, window, document, undefined) {\n    window.HLDataProvider = {\n        config: {\n            buttonDataProvider: ':button.dataprovider',\n            loadingText: 'Beaming up the information now, almost within range!',\n            loadingHeader: 'I\\'m on my way!',\n            provideUrl: '/provide/account/',\n            dataProviderClass: '.dataprovider',\n            errorHeader: 'Oops!',\n            errorText: 'There was an error trying to fetch your data, please don\\'t be mad.',\n            successHeader: 'Yeah!',\n            successText: 'We did it! Your new data should be right there waiting for you.',\n            hiddenSuccessHeader: 'Psst!',\n            hiddenSuccessText: 'Did you know I did more work in the background? ;)',\n            overwriteConfirmHeader: 'Do you wish to overwrite the following fields?\\n',\n            fields: [\n                'name',\n                'description',\n                'legalentity',\n                'taxnumber',\n                'bankaccountnumber',\n                'cocnumber',\n                'iban',\n                'bic',\n            ],\n            formsets: [\n                'email_addresses',\n                'phone_numbers',\n                'addresses'\n            ]\n        },\n\n        init: function(config) {\n            // Setup config\n            var self = this;\n            if ($.isPlainObject(config)) {\n                $.extend(self.config, config);\n            }\n\n            self.initListeners();\n        },\n\n        initListeners: function() {\n            var self = this,\n                cf = self.config;\n\n            $('body').on('click', cf.buttonDataProvider, function(event) {\n                // On button press\n                self.findDataProviderInfo.call(self, this, event);\n            }).on('keydown', 'div' + cf.dataProviderClass + ' > input', function(event) {\n                // Catch ENTER on Dataprovider input\n                if (event.which === 13) {\n                    self.findDataProviderInfo.call(self, cf.buttonDataProvider, event);\n                    // Prevent form submission\n                    event.preventDefault();\n                }\n            });\n        },\n\n        findDataProviderInfo: function(button, event) {\n            var self = this,\n                cf = self.config,\n                $button = $(button),\n                $form = $button.closest('form'),\n                $input = $('div' + cf.dataProviderClass +' > input'),\n                domain = self.sanitizeDomain($input.val());\n\n            // Show busy gui to user\n            $button.button('loading');\n            toastr.info(cf.loadingText, cf.loadingHeader);\n\n            var url = cf.provideUrl + domain;\n            $.getJSON(url)\n                .done(function(data) {\n                    if (data.error) {\n                        toastr.error(data.error.message, cf.errorHeader);\n                    } else {\n                        self.fillForm($form, data, cf.fields, cf.formsets);\n                        toastr.success(cf.successText, cf.successHeader);\n                    }\n                })\n                .fail(function() {\n                    toastr.error(cf.errorText, cf.errorHeader);\n                })\n                .always(function() {\n                    $button.button('reset');\n                });\n\n            event.preventDefault();\n        },\n\n        sanitizeDomain: function(url) {\n            var domain = $.trim(url.replace('http://', ''));\n            domain = $.trim(domain.replace('https://', ''));\n            // Always add last '/'\n            if (domain.slice(-1) !== '/') {\n                domain += '/';\n            }\n            return domain;\n        },\n\n        fillForm: function($form, data, fields, formsets) {\n            var self = this,\n                cf = self.config;\n\n            var checkOverwrite = self.loopTroughFields(fields, $form, data),\n                checkOverwriteFields = checkOverwrite[0],\n                checkOverwriteLabels = checkOverwrite[1];\n\n            // Check if there are fields for which we need to do an overwrite check\n            if (checkOverwriteFields.length) {\n                // Ask the user whether to overwrite or not\n                if (confirm(cf.overwriteConfirmHeader + checkOverwriteLabels.join('\\n'))) {\n                    // Loop through fields that need to be overwritten\n                    checkOverwriteFields.forEach(function(field) {\n                        var $input = $form.find('[name=\"' + field + '\"]');\n                        self.fillField($input, data[field]);\n                    });\n                }\n            }\n\n            // Loop through formsets\n            self.loopTroughFormSets(formsets, $form, data);\n\n        },\n\n        loopTroughFields: function(fields, $form, data) {\n            var self = this,\n                cf = self.config,\n                checkOverwriteFields = [],\n                checkOverwriteLabels = [],\n                filledHiddenField = false;\n\n            // Loop through all fields\n            fields.forEach(function(field) {\n                // Input is the field in the current form\n                var $input = $form.find('[name=\"' + field + '\"]');\n                // Always clear the field if it's hidden\n                if ($input.attr('type') == 'hidden' || $input.parent().hasClass('hide')) {\n                    $input.val('');\n                    if (data[field]) {\n                        filledHiddenField = true;\n                    }\n                }\n                // Check if there is data for the field, else do nothing\n                if (data[field]) {\n                    // Check if the field does not exist in the current form\n                    if ($input.val() !== undefined) {\n                        // Check if the field has a value and that value is not the field placeholder\n                        if ($input.val().length && $input.val() !== $input.attr('placeholder')) {\n                            // Display label of field instead of field name\n                            var label = $input.parents('.form-group').find('label').text();\n                            // Field is not empty, check before overwrite\n                            checkOverwriteFields.push(field);\n                            checkOverwriteLabels.push('- ' + label);\n                        } else {\n                            // Field is empty, fill it with new data\n                            self.fillField($input, data[field]);\n                        }\n                    }\n                }\n            });\n\n            if (filledHiddenField) {\n                toastr.success(cf.hiddenSuccessText, cf.hiddenSuccessHeader);\n            }\n\n            return [checkOverwriteFields, checkOverwriteLabels];\n        },\n\n        loopTroughFormSets: function(formsets, $form, data){\n            for (var i=0; i < formsets.length; i++) {\n                var formset = formsets[i];\n                // Check if there is data for the formset\n                if (data[formset] && data[formset].length) {\n                    var $formsetDiv = $form.find('#' + formset),\n                        $formsetAddLink = $formsetDiv.find('[data-formset-add]'),\n                        newFormsets = data[formset],\n                        $foundInput;\n\n                    for (var j = 0; j < newFormsets.length; j++) {\n                        var newFormset = newFormsets[j],\n                            insertNewFormset = false,\n                            $newElement;\n\n                        if (typeof newFormset === 'object') {\n                            var key,\n                                hasFoundInput = false;\n                            for (key in newFormset) {\n                                $foundInput = $formsetDiv.find(':input[name$=\"' + key +'\"]');\n                                if ($foundInput.length){\n                                    hasFoundInput = true;\n                                    $foundInput = $foundInput.filter(function () {\n                                        var val = $(this).val(),\n                                            newVal = newFormset[key];\n\n                                        return ((val === '' && newVal === null) || val == newVal);\n                                    });\n                                    if (!$foundInput.length) {\n                                        // One of the values is different so we need to add a new formset\n                                        insertNewFormset = true;\n                                    }\n                                }\n                            }\n                            if (insertNewFormset || !hasFoundInput) {\n                                $formsetAddLink.click();\n                                $newElement =  $formsetDiv.find('[data-formset-body] [data-formset-form]:last');\n                                for (key in newFormset) {\n                                    $newElement.find(':input[name$=\"' + key +'\"]').val(newFormset[key]);\n                                }\n                            }\n                        } else if (typeof newFormset === 'string') {\n                            $foundInput = $formsetDiv.find(':input').filter(function () {\n                                return $(this).val() == newFormset;\n                            });\n                            if (!$foundInput.length) {\n                                $formsetAddLink.click();\n                                $newElement =  $formsetDiv.find('[data-formset-body] [data-formset-form]:last');\n                                $newElement.find(':input:first').val(newFormset);\n                            }\n                        }\n                    }\n                }\n            }\n        },\n\n        fillField: function($input, value) {\n            if (typeof value === 'string') {\n                // String\n                $input.val(value);\n            } else if (typeof value[0] === 'string') {\n                // List of strings\n                var uniqueValues = value.concat($input.val().split(',')).filter(function(val, index, self) {\n                    return (self.indexOf(val) === index) && (val !== '');\n                });\n                $input.val(uniqueValues.join());\n            } else {\n                // JSON object\n                $input.val(JSON.stringify(value));\n            }\n            $input.change();\n            if ($input.parent().hasClass('original-form-widget') && $input.parent().hasClass('hide')) {\n                // show the input, by reusing the click handler as defined in the utils.\n                $input.parents(\".show-and-hide-input\").find('a[data-action=\"show\"]').trigger('click');\n            }\n        }\n    }\n})(jQuery, window, document);\n","angular.module('app.base').config(appConfig);\n\nappConfig.$inject = ['$stateProvider'];\nfunction appConfig ($stateProvider) {\n    $stateProvider.state('base', {\n        abstract: true,\n        controller: 'baseController',\n        ncyBreadcrumb: {\n            label: 'Lily'\n        }\n    });\n}\n\n/**\n * BaseController is the controller where all the default things are loaded\n *\n */\nangular.module('app.base').controller('baseController', baseController);\n\nbaseController.$inject = ['$scope', '$state', 'Notifications'];\nfunction baseController ($scope, $state, Notifications) {\n        $scope.conf = {\n            headTitle: 'Welcome!',\n            pageTitleBig: 'HelloLily',\n            pageTitleSmall: 'welcome to my humble abode!'\n        };\n\n        $scope.loadNotifications = loadNotifications;\n\n        activate();\n\n        //////////\n\n        function activate(){\n            $scope.$on('$stateChangeSuccess', _setPreviousState);\n            $scope.$on('$viewContentLoaded', _contentLoadedActions);\n        }\n\n        function loadNotifications() {\n            Notifications.query(function(notifications) {  // On success\n                angular.forEach(notifications, function(message) {\n                    toastr[message.level](message.message);\n                });\n            }, function(error) {  // On error\n                console.log('error!');\n                console.log(error);\n            })\n        }\n\n        function _contentLoadedActions() {\n            Metronic.initComponents(); // init core components\n            HLSelect2.init();\n            HLFormsets.init();\n            HLShowAndHide.init();\n            autosize($('textarea'));\n\n            $scope.loadNotifications();\n        }\n\n        function _setPreviousState(event, toState, toParams, fromState, fromParams){\n            $scope.previousState = $state.href(fromState, fromParams);\n        }\n}\n","angular.module('app.base').controller('headerController', headerController);\n\nheaderController.$inject = ['$scope'];\nfunction headerController ($scope) {\n    $scope.$on('$includeContentLoaded', function() {\n        Layout.initHeader(); // init header\n    });\n}\n","angular.module('app.base').controller('sidebarController', sidebarController);\n\nsidebarController.$inject = ['$scope'];\nfunction sidebarController ($scope) {\n    $scope.$on('$includeContentLoaded', function() {\n        Layout.initSidebar(); // init sidebar\n    });\n}\n","/**\n * checkbox Directive makes a nice uniform checkbox and binds to a model\n *\n * @param model object: model to bind checkbox with\n *\n * Example:\n * <checkbox model=\"table.visibility.name\">Name</checkbox>\n */\nangular.module('app.directives').directive('checkbox', checkbox);\n\nfunction checkbox () {\n    return {\n        restrict: 'E',\n        replace: true,\n        transclude: true,\n        scope: {\n            model: '='\n        },\n        templateUrl: 'base/directives/checkbox.html'\n    }\n}\n","/**\n * Directive give a nice formatting on input elements.\n *\n * It makes sure that the value of the ngModel on the scope has a nice\n * formatting for the user\n */\nangular.module('app.directives').directive('dateFormatter', dateFormatter);\n\ndateFormatter.$inject = ['dateFilter'];\nfunction dateFormatter(dateFilter) {\n    return {\n        restrict: 'A',\n        require: 'ngModel',\n        link: function(scope, element, attrs, ngModel) {\n            ngModel.$formatters.push(function(value) {\n                if (value) {\n                    return dateFilter(value, attrs.dateFormatter);\n                }\n            })\n        }\n    }\n}\n","/**\n * Directive for a confirmation box before the delete in the detail\n * view happens\n */\nangular.module('app.directives').directive('detailDelete', detailDelete);\n\ndetailDelete.$inject = ['$state'];\nfunction detailDelete ($state) {\n    return {\n        restrict: 'A',\n        link: function (scope, elem, attrs) {\n\n            $(elem).click(function () {\n                if (confirm('You are deleting! Are you sure ?')) {\n                    $state.go('.delete');\n                }\n            });\n        }\n    }\n}\n","angular.module('app.directives').directive('resizeIframe', resizeIframe);\n\nfunction resizeIframe () {\n    return {\n        restrict: 'A',\n        link: function ($scope, element, attrs) {\n            var maxHeight = $('body').outerHeight();\n            element.on('load', function() {\n                element.removeClass('hidden');\n\n                // do this after .inbox-view is visible\n                var ifDoc, ifRef = this;\n\n                // set ifDoc to 'document' from frame\n                try {\n                    ifDoc = ifRef.contentWindow.document.documentElement;\n                } catch (e1) {\n                    try {\n                        ifDoc = ifRef.contentDocument.documentElement;\n                    } catch (e2) {\n                    }\n                }\n\n                // calculate and set max height for frame\n                if (ifDoc) {\n                    var subtractHeights = [\n                        element.offset().top,\n                        $('.footer').outerHeight(),\n                        $('.inbox-attached').outerHeight()\n                    ];\n                    for (var height in subtractHeights) {\n                        maxHeight = maxHeight - height;\n                    }\n\n                    if (ifDoc.scrollHeight > maxHeight) {\n                        ifRef.height = maxHeight;\n                    } else {\n                        ifRef.height = ifDoc.scrollHeight;\n                    }\n                }\n            });\n        }\n    }\n}\n","/**\n * sortColumn Directive adds sorting classes to an DOM element based on `table` object\n *\n * It makes the element clickable and sets the table sorting based on that element\n *\n * @param sortColumn string: name of the column to sort on when clicked\n * @param table object: The object to bind sort column and ordering\n *\n * Example:\n *\n * <th sort-column=\"last_name\" table=\"table\">Name</th>\n *\n * Possible classes:\n * - sorting: Unsorted\n * - sorting_asc: Sorted ascending\n * - sorting_desc: Sorted descending\n */\nangular.module('app.directives').directive('sortColumn', sortColumn);\n\nfunction sortColumn () {\n    /**\n     * _setSortableIcon() removes current sorting classes and adds new based on current\n     * sorting column and direction\n     *\n     * @param $scope object: current scope\n     * @param element object: current DOM element\n     * @param sortColumn string: column from current DOM element\n     */\n    var _setSortableIcon = function($scope, element, sortColumn) {\n        // Add classes based on current sorted column\n        if($scope.table.order.column === sortColumn) {\n            if ($scope.table.order.ascending) {\n                $scope.sorted = 1;\n            } else {\n                $scope.sorted = -1;\n            }\n        } else {\n            $scope.sorted = 0;\n        }\n    };\n\n    return {\n        restrict: 'A',\n        scope: {\n            table: '='\n        },\n        transclude: true,\n        templateUrl: 'base/directives/sort_column.html',\n        link: function ($scope, element, attrs) {\n            // Watch the table ordering & sorting\n            $scope.$watchCollection('table.order', function() {\n                _setSortableIcon($scope, element, attrs.sortColumn);\n            });\n\n            // When element is clicked, set the table ordering & sorting based on this DOM element\n            element.on('click', function() {\n                if($scope.table.order.column === attrs.sortColumn) {\n                    $scope.table.order.ascending = !$scope.table.order.ascending;\n                    $scope.$apply();\n                } else {\n                    $scope.table.order.column = attrs.sortColumn;\n                    $scope.$apply();\n                }\n            });\n        }\n    }\n}\n","angular.module('app.directives').directive('ngSpinnerBar', ngSpinnerBar);\n\nngSpinnerBar.$inject = ['$rootScope'];\nfunction ngSpinnerBar ($rootScope) {\n    return {\n        link: function(scope, element, attrs) {\n            // by defult hide the spinner bar\n            element.addClass('hide'); // hide spinner bar by default\n\n            // display the spinner bar whenever the route changes(the content part started loading)\n            $rootScope.$on('$stateChangeStart', function() {\n                element.removeClass('hide'); // show spinner bar\n            });\n\n            // hide the spinner bar on rounte change success(after the content loaded)\n            $rootScope.$on('$stateChangeSuccess', function() {\n                element.addClass('hide'); // hide spinner bar\n                $('body').removeClass('page-on-load'); // remove page loading indicator\n\n                // auto scroll to page top\n                setTimeout(function () {\n                    Metronic.scrollTop(); // scroll to the top on content load\n                }, $rootScope.settings.layout.pageAutoScrollOnLoad);\n            });\n\n            // handle errors\n            $rootScope.$on('$stateNotFound', function() {\n                element.addClass('hide'); // hide spinner bar\n            });\n\n            // handle errors\n            $rootScope.$on('$stateChangeError', function() {\n                element.addClass('hide'); // hide spinner bar\n            });\n        }\n    };\n}\n","/**\n * Cookie Service provides a simple interface to get and store cookie values\n *\n * Set `prefix` to give cookie keys a prefix\n */\nangular.module('app.services').service('Cookie', Cookie);\n\nCookie.$inject = ['$cookieStore'];\nfunction Cookie ($cookieStore) {\n    function CookieFactory (prefix) {\n        return new Cookie(prefix);\n    }\n\n    function Cookie(prefix) {\n        this.prefix = prefix;\n    }\n\n    /**\n     * getCookieValue() tries to retrieve a value from the cookie, or returns default value\n     *\n     * @param field string: key to retrieve info from\n     * @param defaultValue {*}: default value when nothing set on cache\n     * @returns {*}: retrieved or default value\n     */\n    Cookie.prototype.get = function (field, defaultValue) {\n        try {\n            var value = $cookieStore.get(this.prefix + field);\n            return (value !== undefined) ? value : defaultValue;\n        } catch (error) {\n            $cookieStore.remove(this.prefix + field);\n            return defaultValue;\n        }\n    };\n\n    /**\n     * setCookieValue() sets value on the cookie\n     *\n     * It prefixes the field to make field unique for this controller\n     *\n     * @param field string: the key on which to store the value\n     * @param value {*}: JSON serializable object to store\n     */\n    Cookie.prototype.put = function (field, value) {\n        $cookieStore.put(this.prefix + field, value);\n    };\n\n    return CookieFactory;\n}\n","angular.module('app.services').service('HLDate', HLDate);\n\nfunction HLDate () {\n    /**\n     * getSubtractedDate() subtracts x amount of days from the current date\n     *\n     * @param days (int): amount of days to subtract from the current date\n     *\n     * @returns (string): returns the subtracted date in a yyyy-mm-dd format\n     */\n    this.getSubtractedDate = function (days) {\n        var date = new Date();\n        date.setDate(date.getDate() - days);\n\n        return date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();\n    };\n}\n","angular.module('app.services').service('HLFilters', HLFilters);\n\nfunction HLFilters () {\n    this.updateFilterQuery = function ($scope) {\n        $scope.table.filterQuery = '';\n        $scope.displayFilterClear = false;\n        var filterStrings = [];\n\n        for (var i = 0; i < $scope.filterList.length; i++) {\n            var filter = $scope.filterList[i];\n            if (filter.id && filter.id == 'archived') {\n                if (!filter.selected) {\n                    filterStrings.push('archived:false');\n                }\n                else {\n                    $scope.displayFilterClear = true;\n                }\n            }\n            else {\n                if (filter.selected) {\n                    filterStrings.push(filter.value);\n                    $scope.displayFilterClear = true;\n                }\n            }\n        }\n\n        $scope.table.filterQuery = filterStrings.join(' AND ');\n    };\n\n    this.clearFilters = function ($scope) {\n        for (var i = 0; i < $scope.filterList.length; i++) {\n            $scope.filterList[i].selected = false;\n        }\n\n        $scope.updateFilterQuery();\n    };\n}\n","angular.module('app.services').service('HLText', HLText);\nfunction HLText () {\n    /**\n     * hlCapitalize() lowercases the whole string and makes the first character uppercase\n     * This means 'STRING' becomes 'String'\n     *\n     * @returns (string): returns a string with only the first character uppercased\n     */\n    String.prototype.hlCapitalize = function () {\n        var newString = this.toLowerCase();\n        return newString.charAt(0).toUpperCase() + newString.substring(1);\n    }\n}\n","angular.module('app.services').factory('Notifications', Notifications);\n\nNotifications.$inject = ['$resource'];\n\nfunction Notifications ($resource) {\n    return $resource('/api/utils/notifications/');\n}\n","angular.module('app.filters').filter('minValue', minValue);\nfunction minValue () {\n    return function(values) {\n        values.sort(function(a, b){return a-b});\n        return values[0];\n    }\n}\n","angular.module('app.filters').filter('nl2br', nl2br);\n\nnl2br.$inject = ['$sce'];\nfunction nl2br ($sce) {\n    return function(msg,is_xhtml) {\n        var is_xhtml = is_xhtml || true;\n        var breakTag = (is_xhtml) ? '<br />' : '<br>';\n        var msg = (msg + '').replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1'+ breakTag +'$2');\n        return $sce.trustAsHtml(msg);\n    }\n}\n","/**\n * relativeDate filter is a filter that represents the date in a nice format\n *\n * relativeDate will return a relative date string given the date. If the\n * date is to far in the past, it will fallback to angulars $filter\n *\n * @param: date {date|string} : date object or date string to transform\n * @param: fallbackDateFormat string (optional): fallback $filter argument\n * @param: compareWithMidnight boolean (optional): should the date comparison be with midnight or not\n *\n * @returns: string : a relative date string\n *\n * usage:\n *\n * {{ '2014-11-19T12:44:15.795312+00:00' | relativeDate }}\n */\nangular.module('app.filters').filter('relativeDate', relativeDate);\n\nrelativeDate.$inject = ['$filter'];\nfunction relativeDate ($filter) {\n    return function (date, fallbackDateFormat, compareWithMidnight) {\n        // Get current date\n        var now = new Date(),\n            calculateDelta, day, delta, hour, minute, week, month, year;\n\n        // If date is a string, format to date object\n        if (!(date instanceof Date)) {\n            date = new Date(date);\n            if (compareWithMidnight) {\n                // In certain cases we want to compare with midnight\n                date.setHours(23);\n                date.setMinutes(59);\n                date.setSeconds(59);\n            }\n        }\n\n        delta = null;\n        minute = 60;\n        hour = minute * 60;\n        day = hour * 24;\n        week = day * 7;\n        month = day * 30;\n        year = day * 365;\n\n        // Calculate delta in seconds\n        calculateDelta = function () {\n            return delta = Math.round((date - now) / 1000);\n        };\n\n        calculateDelta();\n\n        if (delta > day && delta < week) {\n            date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n            if (compareWithMidnight) {\n                // In certain cases we want to compare with midnight\n                date.setHours(23);\n                date.setMinutes(59);\n                date.setSeconds(59);\n            }\n            calculateDelta();\n        }\n\n        if (!fallbackDateFormat) {\n            if (window.innerWidth < 992) {\n                // Display as a short version if it's a small screen (tablet, smartphone, etc.)\n                fallbackDateFormat = 'dd MMM. yyyy'; // Renders as 29 Jan. 2015\n            }\n            else {\n                fallbackDateFormat = 'dd MMMM yyyy'; // Renders as 29 January 2015\n            }\n        }\n\n        // Check delta and return result\n        if (delta < 0) {\n            switch (false) {\n                case !(-delta > week):\n                    return $filter('date')(date, fallbackDateFormat);\n                case !(-delta > day * 2):\n                    return '' + -(Math.ceil(delta / day)) + ' days ago';\n                case !(-delta > day):\n                    return 'yesterday';\n                case !(-delta > hour):\n                    return '' + -(Math.ceil(delta / hour)) + ' hours ago';\n                case !(-delta > minute * 2):\n                    return '' + -(Math.ceil(delta / minute)) + ' minutes ago';\n                case !(-delta > minute):\n                    return 'a minutes ago';\n                case !(-delta > 30):\n                    return '' + -delta + ' seconds ago';\n                default:\n                    return 'just now';\n            }\n        } else {\n            switch (false) {\n                case !(delta < 30):\n                    return 'just now';\n                case !(delta < minute):\n                    return '' + delta + ' seconds';\n                case !(delta < 2 * minute):\n                    return 'a minute';\n                case !(delta < hour):\n                    return '' + (Math.floor(delta / minute)) + ' minutes';\n                case Math.floor(delta / hour) !== 1:\n                    return 'an hour';\n                case !(delta < day):\n                    return '' + (Math.floor(delta / hour)) + ' hours';\n                case !(delta < day * 2):\n                    return 'tomorrow';\n                case !(delta < week):\n                    return '' + (Math.floor(delta / day)) + ' days';\n                case Math.floor(delta / week) !== 1:\n                    return 'a week';\n                default:\n                    // Use angular $filter\n                    return $filter('date')(date, fallbackDateFormat);\n            }\n        }\n    }\n}\n","angular.module('app.filters').filter('trustAsResourceUrl', trustAsResourceUrl);\n\ntrustAsResourceUrl.$inject = ['$sce'];\nfunction trustAsResourceUrl ($sce) {\n    return function(val) {\n        return $sce.trustAsResourceUrl(val);\n    };\n}\n","/**\n * Router definition.\n */\nangular.module('app.accounts').config(accountConfig);\n\naccountConfig.$inject = ['$stateProvider'];\nfunction accountConfig ($stateProvider) {\n\n    $stateProvider.state('base.accounts.detail.delete', {\n        url: '/delete',\n        views: {\n            '@': {\n                controller: 'AccountDeleteController'\n            }\n        }\n    });\n}\n\n/**\n * Controller to delete a account\n */\nangular.module('app.accounts').controller('AccountDeleteController', AccountDeleteController);\n\nAccountDeleteController.$inject = ['$state', '$stateParams', 'Account'];\nfunction AccountDeleteController ($state, $stateParams, Account) {\n    var id = $stateParams.id;\n\n    Account.delete({\n        id:id\n    }, function() {  // On success\n        $state.go('base.accounts');\n    }, function(error) {  // On error\n        // Error notification needed\n        $state.go('base.accounts');\n    });\n}\n","/**\n * Router definition.\n */\nangular.module('app.accounts').config(accountConfig);\n\naccountConfig.$inject = ['$stateProvider'];\nfunction accountConfig ($stateProvider) {\n    $stateProvider.state('base.accounts.detail', {\n        url: '/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: 'accounts/controllers/detail.html',\n                controller: 'AccountDetailController'\n            }\n        },\n        ncyBreadcrumb: {\n            label: '{{ account.name }}'\n        },\n        resolve: {\n            account: ['AccountDetail', '$stateParams', function(AccountDetail, $stateParams) {\n                var accountId = $stateParams.id;\n                return AccountDetail.get({id: accountId}).$promise\n            }]\n        }\n    })\n}\n\nangular.module('app.accounts').controller('AccountDetailController', AccountDetailController);\n\nAccountDetailController.$inject = ['$scope', '$stateParams', 'CaseDetail', 'ContactDetail', 'DealDetail', 'account'];\nfunction AccountDetailController($scope, $stateParams, CaseDetail, ContactDetail, DealDetail, account) {\n    /**\n     * Details page with historylist and more detailed account information.\n     */\n    var id = $stateParams.id;\n\n    $scope.account = account;\n    $scope.conf.pageTitleBig = account.name;\n    $scope.conf.pageTitleSmall = 'change is natural';\n\n    $scope.caseList = CaseDetail.query({filterquery: 'account:' + id});\n    $scope.caseList.$promise.then(function(caseList) {\n        $scope.caseList = caseList;\n    });\n\n    $scope.dealList = DealDetail.query({filterquery: 'account:' + id});\n    $scope.dealList.$promise.then(function(dealList) {\n        $scope.dealList = dealList;\n    });\n\n    $scope.contactList = ContactDetail.query({filterquery: 'accounts.id:' + id});\n    $scope.contactList.$promise.then(function(contactList) {\n        $scope.contactList = contactList;\n    });\n}\n","/**\n * Router definition.\n */\nangular.module('app.accounts').config(accountConfig);\n\naccountConfig.$inject = ['$stateProvider'];\nfunction accountConfig ($stateProvider) {\n    $stateProvider.state('base.accounts', {\n        url: '/accounts',\n        views: {\n            '@': {\n                templateUrl: 'accounts/controllers/list.html',\n                controller: 'AccountList',\n                controllerAs: 'vm'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Accounts'\n        }\n    });\n}\n\n/**\n * AccountList is a controller to show list of contacts\n *\n */\nangular.module('app.accounts').controller('AccountList', AccountList);\n\nAccountList.$inject = ['$scope', '$window', 'Account', 'Cookie'];\nfunction AccountList ($scope, $window, Account, Cookie) {\n    var vm = this;\n    var cookie = Cookie('accountList');\n    /**\n     * table object: stores all the information to correctly display the table\n     */\n    vm.table = {\n        page: 1,  // current page of pagination: 1-index\n        pageSize: 20,  // number of items per page\n        totalItems: 0, // total number of items\n        filter: cookie.get('filter', ''),  // search filter\n        order:  cookie.get('order', {\n            ascending: true,\n            column:  'modified'  // string: current sorted column\n        }),\n        visibility: cookie.get('visibility', {\n            name: true,\n            contactInformation: true,\n            assignedTo: true,\n            created: true,\n            modified: true,\n            tags: true,\n            customerId: true\n        })\n    };\n    vm.deleteAccount = deleteAccount;\n    vm.setFilter = setFilter;\n    vm.exportToCsv = exportToCsv;\n\n    activate();\n\n    /////////////\n\n    function activate() {\n        _setupWatches();\n    }\n\n    $scope.conf.pageTitleBig = 'Accounts';\n    $scope.conf.pageTitleSmall = 'An overview of accounts';\n\n\n    function deleteAccount (account) {\n        if (confirm('Are you sure?')) {\n            Account.delete({\n                id:account.id\n            }, function() {  // On success\n                var index = vm.table.items.indexOf(account);\n                vm.table.items.splice(index, 1);\n            }, function(error) {  // On error\n                alert('something went wrong.')\n            })\n        }\n    }\n\n    /**\n     * _updateTableSettings() sets scope variables to the cookie\n     */\n    function _updateTableSettings() {\n        cookie.put('filter', vm.table.filter);\n        cookie.put('order', vm.table.order);\n        cookie.put('visibility', vm.table.visibility);\n    }\n\n    /**\n     * _updateAccounts() reloads the accounts through a service\n     *\n     * Updates table.items and table.totalItems\n     */\n    function _updateAccounts() {\n        Account.getAccounts(\n            vm.table.filter,\n            vm.table.page,\n            vm.table.pageSize,\n            vm.table.order.column,\n            vm.table.order.ascending\n        ).then(function(data) {\n                vm.table.items = data.accounts;\n                vm.table.totalItems = data.total;\n            }\n        );\n    }\n\n    function _setupWatches() {\n        /**\n         * Watches the model info from the table that, when changed,\n         * needs a new set of accounts\n         */\n        $scope.$watchGroup(['vm.table.page', 'vm.table.order.column', 'vm.table.order.ascending', 'vm.table.filter'], function() {\n            _updateTableSettings();\n            _updateAccounts();\n        });\n\n        /**\n         * Watches the model info from the table that, when changed,\n         * needs to store the info to the cache\n         */\n        $scope.$watchCollection('vm.table.visibility', function() {\n            _updateTableSettings();\n        });\n    }\n\n\n    /**\n     * setFilter() sets the filter of the table\n     *\n     * @param queryString string: string that will be set as the new filter on the table\n     */\n    function setFilter (queryString) {\n        vm.table.filter = queryString;\n    }\n\n    /**\n     * exportToCsv() creates an export link and opens it\n     */\n    function exportToCsv () {\n        var getParams = '';\n        // If there is a filter, add it\n        if (vm.table.filter) {\n            getParams += '&export_filter=' + vm.table.filter;\n        }\n\n        // Add all visible columns\n        angular.forEach(vm.table.visibility, function(value, key) {\n            if (value) {\n                getParams += '&export_columns='+ key;\n            }\n        });\n\n        // Setup url\n        var url = '/accounts/export/';\n        if (getParams) {\n            url += '?' + getParams.substr(1);\n        }\n\n        $window.open(url);\n    }\n}\n","/**\n * Router definition.\n */\nangular.module('app.accounts').config(accountConfig);\n\naccountConfig.$inject = ['$stateProvider'];\nfunction accountConfig ($stateProvider) {\n    $stateProvider.state('base.accounts.create', {\n        url: '/create',\n        views: {\n            '@': {\n                templateUrl: '/accounts/create/',\n                controller: 'AccountUpsertController'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Create'\n        }\n    });\n\n    $stateProvider.state('base.accounts.detail.edit', {\n        url: '/edit',\n        views: {\n            '@': {\n                templateUrl: function(elem) {\n                    return '/accounts/' + elem.id + '/edit/';\n                },\n                controller: 'AccountUpsertController'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Edit'\n        }\n    });\n}\n\n/**\n * Controller for update and new Account actions.\n */\nangular.module('app.accounts').controller('AccountUpsertController', AccountUpsertController);\n\nAccountUpsertController.$inject = ['$scope', '$stateParams', 'AccountDetail'];\nfunction AccountUpsertController ($scope, $stateParams, AccountDetail) {\n    var id = $stateParams.id;\n    // New Account; set title.\n    if(!id) {\n        $scope.conf.pageTitleBig = 'New Account';\n        $scope.conf.pageTitleSmall = 'change is natural';\n    } else {\n        // Existing Account; Get details from ES and set title.\n        var accountPromise = AccountDetail.get({id: id}).$promise;\n        accountPromise.then(function(account) {\n            $scope.account = account;\n            $scope.conf.pageTitleBig = account.name;\n            $scope.conf.pageTitleSmall = 'change is natural';\n            HLSelect2.init();\n        });\n    }\n    HLDataProvider.init();\n    HLFormsets.init();\n}\n","/**\n * Account detail widget\n */\nangular.module('app.accounts.directives').directive('accountDetailWidget', AccountDetailWidget);\n\nfunction AccountDetailWidget() {\n    return {\n        restrict: 'E',\n        replace: true,\n        scope: {\n            account: '=',\n            height: '='\n        },\n        templateUrl: 'accounts/directives/detail_widget.html'\n    }\n}\n"],"sourceRoot":"/source/"}