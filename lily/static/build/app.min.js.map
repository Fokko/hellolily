{"version":3,"sources":["accounts/module.js","cases/module.js","contacts/module.js","dashboard/module.js","deals/module.js","email/module.js","preferences/module.js","utils/module.js","accounts/directives/module.js","accounts/services/module.js","base/controllers/module.js","base/directives/module.js","base/filters/module.js","base/services/module.js","cases/directives/module.js","cases/services/module.js","contacts/directives/module.js","contacts/services/module.js","dashboard/directives/module.js","deals/directives/module.js","deals/services/module.js","email/directives/module.js","email/services/module.js","notes/services/module.js","users/filters/module.js","users/services/module.js","utils/directives/module.js","base/analytics.js","base/app.js","base/utils.js","cases/cases.js","email/emailtemplate.js","email/inbox.js","forms/formsets.js","forms/select2.js","forms/show-and-hide.js","provide/dataprovider.js","utils/utils.js","accounts/controllers/delete.js","accounts/controllers/detail.js","accounts/controllers/list.js","accounts/controllers/upsert.js","accounts/directives/detail_widget.js","accounts/services/account.js","accounts/services/accountdetail.js","base/controllers/base.js","base/controllers/header.js","base/controllers/sidebar.js","base/directives/checkbox.js","base/directives/date_formatter.js","base/directives/detail_delete.js","base/directives/resize_iframe.js","base/directives/sort_column.js","base/directives/spinnerbar.js","base/filters/min_value.js","base/filters/nl2br.js","base/filters/relative_date.js","base/filters/trust_as_resource_url.js","base/services/cookie.js","base/services/hl_date.js","base/services/hl_filters.js","base/services/hl_text.js","base/services/notifications.js","cases/controllers/assignto.js","cases/controllers/create.js","cases/controllers/delete.js","cases/controllers/detail.js","cases/controllers/edit.js","cases/controllers/list.js","cases/controllers/postpone.js","cases/directives/list_widget.js","cases/directives/update_expire_date.js","cases/services/case.js","cases/services/casedetail.js","cases/services/casestatus.js","cases/services/unassignedcases.js","contacts/controllers/create.js","contacts/controllers/delete.js","contacts/controllers/detail.js","contacts/controllers/edit.js","contacts/controllers/list.js","contacts/directives/detail_widget.js","contacts/directives/list_widget.js","contacts/services/contacdetail.js","contacts/services/contact.js","contacts/services/contacttest.js","dashboard/controllers/base.js","dashboard/directives/callback.js","dashboard/directives/dealstocheck.js","dashboard/directives/feedback.js","dashboard/directives/followup.js","dashboard/directives/mycases.js","dashboard/directives/queuesize.js","dashboard/directives/teams.js","dashboard/directives/unassignedcases.js","dashboard/directives/unreademail.js","deals/controllers/create.js","deals/controllers/delete.js","deals/controllers/detail.js","deals/controllers/edit.js","deals/controllers/followup_widget.js","deals/controllers/list.js","deals/directives/list_widget.js","deals/services/deal.js","deals/services/dealdetail.js","deals/services/dealstages.js","email/controllers/base.js","email/controllers/compose.js","email/controllers/detail.js","email/controllers/email_list.js","email/controllers/label_list.js","email/directives/contact_icon.js","email/services/emailaccount.js","email/services/emaildetail.js","email/services/emaillabel.js","email/services/emailmessage.js","email/services/emailtemplate.js","email/services/recipientinformation.js","email/services/selectedemailaccount.js","notes/services/note.js","notes/services/notedetail.js","preferences/controllers/base.js","preferences/controllers/emailaccount_edit.js","preferences/controllers/emailaccount_list.js","preferences/controllers/emailaccount_share.js","preferences/controllers/emailtemplate_create.js","preferences/controllers/emailtemplate_default.js","preferences/controllers/emailtemplate_edit.js","preferences/controllers/emailtemplate_list.js","preferences/controllers/user_account.js","preferences/controllers/user_apitoken.js","preferences/controllers/user_base.js","preferences/controllers/user_profile.js","users/filters/filters.js","users/services/user.js","users/services/userteams.js","utils/controllers/note_edit.js","utils/directives/history_add_note.js","utils/directives/historylist.js","utils/directives/historylist_item.js"],"names":["angular","module","i","s","o","g","r","a","m","q","push","arguments","l","Date","createElement","getElementsByTagName","async","src","parentNode","insertBefore","window","document","ga","settings","$rootScope","layout","pageSidebarClosed","appConfig","$breadcrumbProvider","$controllerProvider","$httpProvider","$resourceProvider","$urlRouterProvider","setOptions","templateUrl","includeAbstract","allowGlobals","defaults","xsrfCookieName","xsrfHeaderName","stripTrailingSlashes","otherwise","runApp","$state","currentUser","factory","$inject","config","run","$","on","$phoneNumberInput","this","phone","val","match","typeId","attr","replace","select2","length","startsWith","substring","e","currentTarget","each","is","HLSelect2","init","undefined","currentStatus","HLCases","caseUpdateUrl","caseUpdateAssignedToUrl","caseId","statusSpan","statusDiv","parcelProviderSelect","parcelIdentifierInput","assignedToField","assignToMeButton","currentAssignedTo","self","isPlainObject","extend","initListeners","setCurrentStatus","cf","event","changeStatus","call","changedParcelProviderSelect","changeAssignedTo","closest","radio_element","target","$radio_element","ajax","url","type","data","status","beforeSend","HLApp","addCSRFHeader","dataType","done","text","load_notifications","fail","removeClass","addClass","select","$select","assignee","id","html","name","always","addAssignToMeButton","after","click","preventDefault","change","jQuery","HLEmailTemplates","insertButton","variablesField","fileUploadField","valuesField","bodyFileField","templateVariableField","attachmentDeleteButton","attachmentUndoDeleteButton","templateAttachmentName","wysiHtmlToolbar","submitButton","updateVariableOptions","templateVariable","HLInbox","getEditor","focus","composer","commands","exec","handleValueChange","handleBodyFileChange","attachmentRow","toggleMarkDeleted","handleFormSubmit","toolbar","find","srcElement","el","valueSelect","category","not","remove","parameterChoices","Contact","contact.full_name","contact.work_phone","contact.last_name","contact.twitter","contact.mobile_phone","contact.first_name","contact.linkedin","contact.preposition","contact.primary_email","contact.account_city","User","user.full_name","user.first_name","user.phone_number","user.preposition","user.linkedin","user.twitter","user.current_email_address","user.last_name","user.user_group","Account","account.work_phone","account.name","account.any_email_address","parameter","label","append","value","openVariable","closeVariable","form","uploadedTemplate","ajaxStart","Metronic","blockUI","nextAll","eq","ajaxStop","unblockUI","ajaxSubmit","parseEmailTemplateUrl","success","response","error","fields","index","field","hasOwnProperty","setValue","body_html","element","blur","rowAttachmentName","hasClass","$containerDiv","innerHTML","getValue","$form","submit","editor","accountDeactivatedMessage","inboxCcInput","inboxBccInput","singleMessageSelector","templateField","inboxComposeSubmit","replyButton","tagsAjaxSelector","emailAccountInput","sendToNormalField","overwriteTemplateConfirm","emptyTemplateAttachmentRow","templateAttachmentDeleteButton","templateAttachmentUndoDeleteButton","templateAttachmentsDiv","templateAttachmentIds","templateAttachmentId","templateAttachmentRow","currentTemplate","previousSendToNormalLength","initUniform","handleAdditionalRecipientsInput","changeTemplateField","inputLength","hide","show","handleInboxComposeSubmit","tags","handleTagsAjaxChange","handleTemplateAttachmentsChange","which","customParser","parse","elementOrHtml","rules","context","cleanUp","initEmailCompose","emailComposeConfig","initWysihtml5","loadDefaultTemplate","loadDefaultEmailTemplate","template","recipient","decodedEditorValue","decodeEntities","$composeEmailTemplate","str","textContent","wysihtml5","Editor","parser","handleTables","observe","initialEditorValue","resizeEditor","style","height","scrollHeight","inputType","$ccLink","$inputField","templateChanged","templateList","selectedTemplate","parseInt","recipientId","emailAccountId","object_id","sender","getTemplateUrl","getJSON","setNewEditorValue","toastr","inboxCompose","buttonName","location","modal","draftPk","appendTo","templateContent","button","filter","tagsAjax","values","recipient_data","join","defaultEmailTemplateUrl","htmlPart","editorValue","newEditorValue","changeTemplate","confirm","addedTemplateText","diff","messageType","JsDiff","diffChars","forEach","part","added","removed","container","emailTemplate","processAttachments","attachments","empty","attachmentIds","attachment","clone","removeAttr","toggleClass","newAttachmentIds","attachmentId","setSuccesURL","previousState","HLFormsets","formsetClass","formset","body","formset_element","parents","add_element","indent","stop","slideDown","tagInputs","ajaxInputs","tagsAjaxClass","ajaxPageLimit","clearText","setupSelect2","minimumResultsForSearch","createTagInputs","createAjaxInputs","$this","split","tokenSeparators","width","_data","options","cache","term","page","filterQuery","filterquery","size","sort","term_stripped","trim","filters","indexOf","filter_val","filter_name","results","more","total","parsed_data","hits","hit","email_addresses","used_text","email_address","displayed_text","unshift","initSelection","item","callback","createSearchChoice","localeCompare","openOnEnter","multiple","initial","HLShowAndHide","selector","parent","input","setTimeout","HLDataProvider","buttonDataProvider","loadingText","loadingHeader","provideUrl","dataProviderClass","errorHeader","errorText","successHeader","successText","hiddenSuccessHeader","hiddenSuccessText","overwriteConfirmHeader","formsets","findDataProviderInfo","$button","$input","domain","sanitizeDomain","info","message","fillForm","slice","checkOverwrite","loopTroughFields","checkOverwriteFields","checkOverwriteLabels","fillField","loopTroughFormSets","filledHiddenField","$foundInput","$formsetDiv","$formsetAddLink","newFormsets","j","$newElement","newFormset","insertNewFormset","key","hasFoundInput","newVal","uniqueValues","concat","JSON","stringify","trigger","accountConfig","$stateProvider","state","views","@","controller","AccountDeleteController","$stateParams","go","AccountDetailController","ncyBreadcrumb","resolve","account","AccountDetail","accountId","get","$promise","$scope","CaseDetail","ContactDetail","DealDetail","conf","pageTitleBig","pageTitleSmall","caseList","query","then","dealList","contactList","AccountList","controllerAs","$window","Cookie","activate","_setupWatches","deleteAccount","vm","table","items","splice","alert","_updateTableSettings","cookie","put","order","visibility","_updateAccounts","getAccounts","pageSize","column","ascending","accounts","totalItems","$watchGroup","$watchCollection","setFilter","queryString","exportToCsv","getParams","substr","open","contactInformation","assignedTo","created","modified","customerId","elem","AccountUpsertController","accountPromise","AccountDetailWidget","restrict","scope","directive","$filter","$http","$resource","orderColumn","orderedAsc","method","params","getEmailAddress","primaryEmails","update","delete","prototype","getPhone","phone_mobile","phone_work","phone_other","getPhones","phones","transformResponse","fromJson","abstract","BaseController","Notifications","$on","_setPreviousState","_contentLoadedActions","loadNotifications","notifications","level","console","log","initComponents","autosize","toState","toParams","fromState","fromParams","href","headTitle","headerController","Layout","initHeader","sidebarController","initSidebar","checkbox","transclude","model","dateFormatter","dateFilter","require","link","attrs","ngModel","$formatters","detailDelete","resizeIframe","maxHeight","outerHeight","ifDoc","ifRef","contentWindow","documentElement","e1","contentDocument","e2","subtractHeights","offset","top","sortColumn","_setSortableIcon","sorted","$apply","ngSpinnerBar","scrollTop","pageAutoScrollOnLoad","minValue","b","nl2br","$sce","msg","is_xhtml","breakTag","trustAsHtml","relativeDate","date","fallbackDateFormat","compareWithMidnight","calculateDelta","day","delta","hour","minute","week","month","year","now","setHours","setMinutes","setSeconds","Math","round","getFullYear","getMonth","getDate","innerWidth","ceil","floor","trustAsResourceUrl","$cookieStore","CookieFactory","prefix","defaultValue","service","HLDate","getSubtractedDate","days","setDate","HLFilters","updateFilterQuery","displayFilterClear","filterStrings","filterList","selected","clearFilters","HLText","String","hlCapitalize","newString","toLowerCase","charAt","toUpperCase","CaseAssignModal","$modalInstance","myCase","Case","_getUsers","users","ok","assigned_to","currentAssigneeId","close","cancel","dismiss","assigned_to_id","caseConfig","CaseCreateController","skip","CaseDeleteController","req","headers","Content-Type","CaseDetailController","$modal","CaseStatuses","getPriorityDisplay","is_archived","priority","changeCaseStatus","assignCase","assigned_to_name","archive","archived","unarchive","openPostponeWidget","modalInstance","result","current","reload","caseStatuses","CaseEditController","casePromise","caseObject","subject","CaseListController","$location","getFilterList","filterListCookie","getCaseTypes","cases","updateTableSettings","searchQuery","updateCases","getCases","search","client","expires","createdBy","setSearchQuery","toggleArchived","assignTo","CasePostponeModal","_watchCloseDatePicker","$watch","newValue","oldValue","_updateDayAndCloseModal","expireDate","newDate","disabledDates","mode","getDay","openDatePicker","$event","stopPropagation","pickerIsOpen","postponeWithDays","getFutureDate","futureDate","dateFormat","datepickerOptions","startingDay","CaseListWidget","title","list","addLink","updateCaseExpireDate","daysToAdd","isNaN","due","addBusinessDays","datepicker","$q","_getSorting","casetypes","sorting","getMyCasesWidget","deferred","defer","promise","getCallbackRequests","callbackCase","accountPhone","contact","contactPhone","getUnassignedCasesForTeam","teamId","isArray","objects","obj","historyType","color","totalize","UnassignedTeamCases","contactsConfig","ContactCreateController","ContactDeleteController","ContactTest","contactId","colleagueList","colleagues","ContactEditController","contactPromise","ContactListController","updateContacts","contacts","worksAt","deleteContact","ContactDetailWidget","ContactListWidget","getContacts","dashboardConfig","DashboardController","CallbackRequestsDirective","CallbackRequestsController","_watchTable","_getCallbackRequests","callbackRequests","dealsToCheckDirective","DealsToCheckController","Deal","UserTeams","_getDealsToCheck","selectedUserId","getDealsToCheck","deals","mine","teams","team","user_set","markDealAsChecked","deal","feedbackDirective","FeedbackController","_getFeedbackDeals","getFeedbackDeals","feedbackFormSentForDeal","feedbackFormSent","openFeedbackForm","emailAddress","email","followUpDirective","FollowUpController","_getFollowUp","getFollowUpWidgetData","openFollowUpWidgetModal","followUp","myCasesDirective","MyCasesController","_getMyCases","queueSizeDirective","QueueSizeController","$interval","isSuperUser","labels","series","animation","queueName","getQueueInfo","shift","totalSize","total_messages","isDefined","teamsDirective","TeamsController","_getTeams","unassignedCasesDirective","UnassignedCasesController","bindToController","_getUnassignedCases","assignToMe","caseObj","unreadEmailDirective","UnreadEmailController","EmailMessage","_getMessages","getDashboardMessages","messages","dealsConfig","DealCreateController","DealDeleteController","DealDetailController","DealStages","dealStages","changeState","stage","newStage","stage_name","closed_date","closing_date","DealEditController","dealPromise","FollowUpWidgetModalController","_getDealStages","saveModal","closingDate","selectedStage","expected_closing_date","closeModal","DealListController","updateDeals","getDeals","total_size","amountOnce","amountRecurring","newBusiness","DealListWidgetDirective","ordering","userId","feedback_form_sent","$update","is_checked","emailConfig","when","EmailBaseController","labelList@base.email","primaryEmailAccountId","me","primary_email_account","@base.email","EmailComposeController","$templateCache","EmailTemplate","SelectedEmailAccount","emailMessage","_initEmailCompose","promises","emailTemplatePromise","all","templates","currentAccountId","EmailDetailController","RecipientInformation","_getMessage","bodyHTMLUrl","all_recipients","received_by","received_by_cc","getInformation","read","markAsRead","setCurrentAccountId","archiveMessage","labelId","trashMessage","trash","deleteMessage","toggleOverlay","displayAllRecipients","$emailRecipients","markAsUnread","EmailListController","EmailLabel","EmailAccount","watchTable","newValues","oldValues","setPage","_reloadMessages","pageNumber","toggleCheckboxes","emailMessages","checked","opts","checkboxesAll","_toggleReadMessages","showReplyOrForwardButtons","number","_selectedMessage","replyOnMessage","replyAllOnMessage","forwardOnMessage","_removeCheckedMessagesFromList","archiveMessages","trashMessages","deleteMessages","moveMessages","removedLabels","label_id","addedLabels","remove_labels","add_labels","move","reloadMessages","goToDraft","messageId","account__id","primaryEmailAccount","LabelListController","_startIntervalAccountInfo","_getAccountInfo","stopGetAccountInfo","accountList","labelCount","label_type","unread","unreadCountForLabel","count","hasUnreadLabel","contactIcon","sender_email","emailAddressResults","complete","shareWith","EmailDetail","sent_date","right","actions","user_email_related","recipients","contact_id","Note","NoteDetail","preferencesConfig","PreferencesBase","@base.preferences","PreferencesEmailAccountEdit","emailPreferencesStates","PreferencesEmailAccountList","ownedAccounts","owner","sharedAccounts","shared_with_users__id","publicAccounts","public","user","loadAccounts","openShareAccountModal","emailAccount","currentAccount","makePrimaryAccount","EmailAccountShareModalController","shared_with_users","sharedWith","PreferencesEmailTemplatesCreate","PreferencesSetTemplateDefaultModal","param","PreferencesEmailTemplatesEdit","PreferencesEmailTemplatesList","emailTemplates","makeDefault","deleteEmailTemplate","emailtemplate","PreferencesUserAccountController","djangoPasswordStrength","UserTokenController","token","auth_token","deleteToken","generateToken","PreferencesUserProfileController","fullName","first_name","preposition","last_name","EditNoteModalController","note","content","historyAddNoteDirective","HistoryAddNoteController","addNote","content_type","HistoryListDirective","object","loadMore","$resolved","_fetchHistory","reloadHistory","history","neededLength","noteTargets","notePromise","caseTargets","caseItem","notes","dealTargets","emailTargets","tenantEmailAccountPromise","emailPromise","account_related","contact_related","tenantEmailAccountList","emailMessageList","orderedHistoryList","types","visible","showMoreText","editNote","deleteNote","case","activeFilter","HistoryListItemDirective","$compile","getTemplate","templateLoader","baseUrl","templateMap","replaceWith"],"mappings":"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","file":"app.min.js","sourcesContent":["/**\n * app.accounts manages all routes, controllers eg.\n * that relate to Account.\n */\nangular.module('app.accounts', [\n    'ngCookies',\n    'ui.bootstrap',\n    'ui.slimscroll',\n    'app.accounts.services',\n    'app.cases.services',\n    'app.contacts.services',\n    'app.email.services',\n    'app.notes'\n]);\n","angular.module('app.cases', [\n    // Angular dependencies\n    'ngCookies',\n\n    // 3rd party\n    'ui.bootstrap',\n\n    // Lily dependencies\n    'app.accounts.services',\n    'app.cases.services',\n    'app.email.services',\n    'app.contacts.services',\n    'app.notes'\n]);\n","angular.module('app.contacts', [\n    // Angular dependencies\n    'ngCookies',\n\n    // 3rd party\n    'ui.bootstrap',\n\n    // Lily dependencies\n    'app.accounts.services',\n    'app.cases.services',\n    'app.contacts.services',\n    'app.notes',\n    'app.email.services'\n]);\n","angular.module('app.dashboard', [\n    'app.dashboard.directives',\n    'app.users.services',\n    'chart.js',\n    'ui.slimscroll'\n]);\n","angular.module('app.deals', [\n    // Angular dependencies\n    'ngCookies',\n\n    // 3rd party\n    'ui.bootstrap',\n    'ui.select',\n\n    // Lily dependencies\n    'app.deals.services'\n]);\n","angular.module('app.email', [\n    // 3rd party\n    'ui.bootstrap',\n    'ui.router',\n\n    // Lily dependencies\n    'app.email.services',\n    'app.email.directives',\n    'app.services'\n]);\n","angular.module('app.preferences', [\n    'ui.bootstrap',\n    'ui.slimscroll',\n    'app.email.services',\n    'app.services',\n    'app.users.services',\n    'app.users.filters'\n]);\n","angular.module('app.utils', []);\n","angular.module('app.accounts.directives', []);\n","angular.module('app.accounts.services', ['ngResource']);\n","angular.module('app.base', [\n    'ui.bootstrap'\n]);\n","/**\n * app.directives is a container for all global lily related Angular directives\n */\nangular.module('app.directives', []);\n","angular.module('app.filters', []);\n","angular.module('app.services', []);\n","angular.module('app.cases.directives', []);\n","angular.module('app.cases.services', ['ngResource']);\n","angular.module('app.contacts.directives', []);\n","angular.module('app.contacts.services', ['ngResource']);\n","angular.module('app.dashboard.directives', []);\n","angular.module('app.deals.directives', []);\n","angular.module('app.deals.services', []);\n","angular.module('app.email.directives', []);\n","angular.module('app.email.services', ['ngResource']);\n","angular.module('app.notes', ['ngResource']);\n","angular.module('app.users.filters', []);\n","angular.module('app.users.services', ['ngResource']);\n","angular.module('app.utils.directives', []);\n","(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\nga('create', 'UA-60721851-1', 'auto');\n","/**\n * App Module is the entry point for Lily related Angular code\n */\nangular.module('app', [\n    'ui.router',\n    'ui.bootstrap',\n    'ngResource',\n    'ngSanitize',\n    'ncy-angular-breadcrumb',\n\n    // Controllers\n    'app.accounts',\n    'app.base',\n    'app.cases',\n    'app.contacts',\n    'app.dashboard',\n    'app.deals',\n    'app.email',\n    'app.preferences',\n    'app.templates',\n    'app.utils',\n\n    // Directives\n    'app.directives',\n    'app.accounts.directives',\n    'app.cases.directives',\n    'app.contacts.directives',\n    'app.deals.directives',\n    'app.utils.directives',\n\n    // Google Analytics\n    'angulartics',\n    'angulartics.google.analytics',\n\n    // Services\n    'app.services',\n\n    // Filters\n    'app.filters'\n]);\n\n/* Setup global settings */\nangular.module('app').factory('settings', settings);\n\nsettings.$inject = ['$rootScope'];\nfunction settings ($rootScope) {\n    // supported languages\n    var settings = {\n        layout: {\n            pageSidebarClosed: false // sidebar state\n        }\n    };\n\n    $rootScope.settings = settings;\n\n    return settings;\n}\n\nangular.module('app').config(appConfig);\n\nappConfig.$inject = [\n    '$breadcrumbProvider',\n    '$controllerProvider',\n    '$httpProvider',\n    '$resourceProvider',\n    '$urlRouterProvider'\n];\nfunction appConfig ($breadcrumbProvider, $controllerProvider, $httpProvider, $resourceProvider, $urlRouterProvider){\n    // Don't strip trailing slashes from calculated URLs, because django needs them\n    $breadcrumbProvider.setOptions({\n        templateUrl: 'base/breadcrumbs.html',\n        includeAbstract: true\n    });\n    $controllerProvider.allowGlobals();\n    $httpProvider.defaults.xsrfCookieName = 'csrftoken';\n    $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';\n    $resourceProvider.defaults.stripTrailingSlashes = false;\n    $urlRouterProvider.otherwise('/');\n}\n\n/* Init global settings and run the app */\nangular.module('app').run(runApp);\n\nrunApp.$inject = ['$rootScope', '$state', 'settings'];\nfunction runApp ($rootScope, $state, settings) {\n    $rootScope.$state = $state; // state to be accessed from view\n    $rootScope.currentUser = currentUser;\n    $rootScope.settings = settings;\n}\n","$('body').on('blur', 'input[name^=\"phone\"]', function() {\n    // Format telephone number\n    var $phoneNumberInput = $(this);\n    var phone = $phoneNumberInput.val();\n    if (phone.match(/[a-z]|[A-Z]/)) {\n        // if letters are found, skip formatting: it may not be a phone field after all\n        return false;\n    }\n\n    // Match on mobile phone nrs e.g. +316 or 06, so we can automatically set the type to mobile.\n    if (phone.match(/^\\+316|^06/)) {\n        var typeId = $phoneNumberInput.attr('id').replace('raw_input', 'type');\n        $('#' + typeId).select2('val', 'mobile');\n    }\n\n    phone = phone\n        .replace(\"(0)\",\"\")\n        .replace(/\\s|\\(|\\-|\\)|\\.|x|:|\\*/g, \"\")\n        .replace(/^00/,\"+\");\n\n    if (phone.length == 0) {\n        return false;\n    }\n\n    if (!phone.startsWith('+')) {\n        if (phone.startsWith('0')) {\n            phone = phone.substring(1);\n        }\n        phone = '+31' + phone;\n    }\n\n    if (phone.startsWith('+310')) {\n        phone = '+31' + phone.substring(4);\n    }\n    $phoneNumberInput.val(phone);\n});\n\n$('body').on('change', 'select[id*=\"is_primary\"]', function(e) {\n    if($(e.currentTarget).val() == 'True'){\n        $('select[id*=\"is_primary\"]').each(function(i){\n            if($(this).is('select') && $(this).val() == 'True'){\n                $(this).val('False');\n            }\n        });\n        $(e.currentTarget).val('True');\n        HLSelect2.init();\n    }\n});\n\nfunction addBusinessDays(date, businessDays) {\n    var weeks = Math.floor(businessDays/5);\n    var days = businessDays % 5;\n    var day = date.getDay();\n    if (day === 6 && days > -1) {\n       if (days === 0) {days-=2; day+=2;}\n       days++; dy -= 6;}\n    if (day === 0 && days < 1) {\n       if (days === 0) {days+=2; day-=2;}\n       days--; day += 6;}\n    if (day + days > 5) days += 2;\n    if (day + days < 1) days -= 2;\n    date.setDate(date.getDate() + weeks * 7 + days);\n    return date;\n}\n","(function($, window, document, undefined) {\r\n    var currentStatus;\r\n\r\n    window.HLCases = {\r\n        config: {\r\n            caseUpdateUrl: '/cases/update/status/',\r\n            caseUpdateAssignedToUrl: '/cases/update/assigned_to/',\r\n            caseId: null,\r\n            statusSpan: '#status',\r\n            statusDiv: '#case-status',\r\n            parcelProviderSelect: '#id_parcel_provider',\r\n            parcelIdentifierInput: '#id_parcel_identifier',\r\n            assignedToField: '#id_assigned_to',\r\n            assignToMeButton: '.assign-me-btn',\r\n            currentAssignedTo: null\r\n        },\r\n\r\n        init: function(config) {\r\n            // Setup config\r\n            var self = this;\r\n            if ($.isPlainObject(config)) {\r\n                $.extend(self.config, config);\r\n            }\r\n            self.initListeners();\r\n            self.setCurrentStatus();\r\n        },\r\n\r\n        initListeners: function() {\r\n            var self = this,\r\n                cf = self.config;\r\n\r\n            $(cf.statusDiv).on('click', function(event) {\r\n               self.changeStatus.call(self, event);\r\n            });\r\n\r\n            $(cf.parcelProviderSelect).on('change', function() {\r\n               self.changedParcelProviderSelect.call(self, this);\r\n            });\r\n\r\n            $(cf.assignToMeButton).on('click', function() {\r\n                self.changeAssignedTo.call(self, this);\r\n            });\r\n        },\r\n\r\n        setCurrentStatus: function() {\r\n            currentStatus = $('input[name=radio]:checked', this.config.statusDiv).closest('label').attr('for');\r\n        },\r\n\r\n        changeStatus: function(event) {\r\n            var self = this,\r\n                cf = self.config;\r\n            var radio_element = $('#' + $(event.target).closest('label').attr('for'));\r\n            if(radio_element.attr('id') != currentStatus) {\r\n                var $radio_element = $(radio_element);\r\n                if (cf.caseId != null) {\r\n                    $.ajax({\r\n                        url: cf.caseUpdateUrl + cf.caseId + '/',\r\n                        type: 'POST',\r\n                        data: {\r\n                            status: $radio_element.val()\r\n                        },\r\n                        beforeSend: HLApp.addCSRFHeader,\r\n                        dataType: 'json'\r\n                    }).done(function (data) {\r\n                        currentStatus = $radio_element.attr('id');\r\n                        $(cf.statusSpan).text(data.status);\r\n                        // loads notifications if any\r\n                        load_notifications();\r\n                    }).fail(function () {\r\n                        // reset selected status\r\n                        $(radio_element).attr('checked', false).closest('label').removeClass('active');\r\n                        $('#' + currentStatus).attr('checked', true).closest('label').addClass('active');\r\n                        // loads notifications if any\r\n                        load_notifications();\r\n                    });\r\n                }\r\n            }\r\n        },\r\n\r\n        changedParcelProviderSelect: function(select) {\r\n            // Remove identifier if the provider is removed\r\n            var $select = $(select);\r\n            if (!$select.val()) {\r\n                $(this.config.parcelIdentifierInput).val('');\r\n            }\r\n        },\r\n\r\n        changeAssignedTo: function () {\r\n            var self = this,\r\n                cf = self.config;\r\n\r\n            var assignee = null;\r\n\r\n            if (cf.currentAssignedTo != currentUser.id) {\r\n                assignee = currentUser.id;\r\n            }\r\n\r\n            if (cf.caseId != null) {\r\n                $.ajax({\r\n                    url: cf.caseUpdateAssignedToUrl + cf.caseId + '/',\r\n                    type: 'POST',\r\n                    data: {\r\n                        assignee: assignee\r\n                    },\r\n                    beforeSend: HLApp.addCSRFHeader,\r\n                    dataType: 'json'\r\n                }).done(function (data) {\r\n                    var assignee = data.assignee;\r\n\r\n                    // TODO: This will be made prettier once we Angularify the detail page(s)\r\n                    if (assignee) {\r\n                        $('.summary-data.assigned-to').html(data.assignee.name);\r\n                        $('.assign-me-btn').html('Unassign');\r\n                        cf.currentAssignedTo = data.assignee.id;\r\n                    }\r\n                    else {\r\n                        $('.summary-data.assigned-to').html('Unassigned');\r\n                        $('.assign-me-btn').html('Assign to me');\r\n                        cf.currentAssignedTo = null;\r\n                    }\r\n                }).always(function () {\r\n                    // loads notifications if any\r\n                    load_notifications();\r\n                });\r\n            }\r\n        },\r\n\r\n        addAssignToMeButton: function() {\r\n            var self = this;\r\n            var assignToMeButton = $('<button class=\"btn btn-link assign-me-btn\">Assign to me</button>');\r\n\r\n            $(self.config.assignedToField).after(assignToMeButton);\r\n\r\n            assignToMeButton.click(function (event) {\r\n                event.preventDefault();\r\n                $(self.config.assignedToField).val(currentUser.id).change();\r\n            });\r\n        }\r\n    }\r\n})(jQuery, window, document);\r\n","(function ($, window, document, undefined) {\n    window.HLEmailTemplates = {\n        config: {\n            insertButton: '#id_insert_button',\n            variablesField: '#id_variables',\n            fileUploadField: '#body_file_upload',\n            valuesField: '#id_values',\n            bodyFileField: '#id_body_file',\n            templateVariableField: '#id_text_value',\n            attachmentDeleteButton: '.email-template-attachments [data-formset-delete-button]',\n            attachmentUndoDeleteButton: '.email-template-attachments [data-formset-undo-delete]',\n            templateAttachmentName: '.template-attachment-name',\n            wysiHtmlToolbar: '#wysihtml5-toolbar',\n            submitButton: 'button[type=\"submit\"]'\n        },\n\n        init: function (config) {\n            var self = this;\n\n            // Setup config\n            if (typeof (config === 'object')) {\n                $.extend(this.config, config);\n            }\n\n            self.initListeners();\n            self.updateVariableOptions();\n        },\n\n        initListeners: function() {\n            var self = this,\n                cf = self.config;\n\n            $('body')\n                .on('click', cf.insertButton, function (event) {\n                    var templateVariable = $(cf.templateVariableField).html();\n                    HLInbox.getEditor().focus();\n                    HLInbox.getEditor().composer.commands.exec('insertHTML', templateVariable);\n\n                    event.preventDefault();\n                })\n                .on('change', cf.variablesField, function () {\n                    self.updateVariableOptions();\n                })\n                .on('click', cf.fileUploadField, function (event) {\n                    $(cf.bodyFileField).click();\n                    event.preventDefault();\n                })\n                .on('change', cf.valuesField, function () {\n                    self.handleValueChange.call(self, this);\n                })\n                .on('change', cf.bodyFileField, function () {\n                    self.handleBodyFileChange.call(self, this);\n                })\n                .on('click', cf.attachmentDeleteButton, function() {\n                    var attachmentRow = $(this).closest('.form-group');\n                    self.toggleMarkDeleted(attachmentRow);\n                })\n                .on('click', cf.attachmentUndoDeleteButton , function() {\n                    var attachmentRow = $(this).closest('.form-group');\n                    self.toggleMarkDeleted(attachmentRow);\n                })\n                .on('click', cf.submitButton, function (event) {\n                    self.handleFormSubmit(this, event);\n                });\n\n            // Set heading properly after change\n            var toolbar = $(cf.wysiHtmlToolbar);\n            $(toolbar).find('a[data-wysihtml5-command=\"formatBlock\"]').click(function(e) {\n                var target = e.target || e.srcElement;\n                var el = $(target);\n                $(toolbar).find('.current-font').text(el.html());\n            });\n        },\n\n        updateVariableOptions: function () {\n            var valueSelect = $(this.config.valuesField);\n            var category = $(this.config.variablesField).val();\n\n            valueSelect.find('option').not('option[value=\"\"]').remove();\n            valueSelect.change();\n\n            // TODO: LILY-953: Change this to API endpoint\n            var parameterChoices = {\n                \"Contact\": {\n                    \"contact.full_name\": \"Full name\",\n                    \"contact.work_phone\": \"Work phone\",\n                    \"contact.last_name\": \"Last name\",\n                    \"contact.twitter\": \"Twitter\",\n                    \"contact.mobile_phone\": \"Mobile phone\",\n                    \"contact.first_name\": \"First name\",\n                    \"contact.linkedin\": \"Linkedin\",\n                    \"contact.preposition\": \"Preposition\",\n                    \"contact.primary_email\": \"Primary email\",\n                    \"contact.account_city\": \"Account city\"\n                },\n                \"User\": {\n                    \"user.full_name\": \"Full name\",\n                    \"user.first_name\": \"First name\",\n                    \"user.phone_number\": \"Phone number\",\n                    \"user.preposition\": \"Preposition\",\n                    \"user.linkedin\": \"Linkedin\",\n                    \"user.twitter\": \"Twitter\",\n                    \"user.current_email_address\": \"Current email address\",\n                    \"user.last_name\": \"Last name\",\n                    \"user.user_group\": \"User group\"\n                },\n                \"Account\": {\n                    \"account.work_phone\": \"Work phone\",\n                    \"account.name\": \"Name\",\n                    \"account.any_email_address\": \"Any email address\"\n                }\n            };\n\n            if (category !== '') {\n                $.each(parameterChoices[category], function(parameter, label) {\n                    valueSelect.append($(\"<option>\", {\n                        value: parameter,\n                        text: label\n                    }));\n                });\n            }\n        },\n\n        handleValueChange: function (valuesField) {\n            var templateVariableField = $(this.config.templateVariableField);\n            var templateVariable = $(valuesField).val();\n\n            if (templateVariable !== ''){\n                templateVariableField.html(this.config.openVariable + ' ' + templateVariable + ' ' + this.config.closeVariable)\n            } else {\n                templateVariableField.html('');\n            }\n        },\n\n        handleBodyFileChange: function (bodyFileField) {\n            var form = $(bodyFileField).closest('form');\n            var uploadedTemplate = form.find(bodyFileField).val();\n\n            if (uploadedTemplate) {\n                $(form).ajaxStart(function() {\n                    Metronic.blockUI($(form).nextAll('form').eq(0), false, '');\n                }).ajaxStop(function() {\n                    Metronic.unblockUI($(form).nextAll('form').eq(0));\n                }).ajaxSubmit({\n                    type: 'post',\n                    dataType: 'json',\n                    url: this.config.parseEmailTemplateUrl,\n                    success: function(response) {\n                        if(!response.error && response.form) {\n                            var fields = ['name', 'subject'];\n                            $.each(fields, function(index, field) {\n                                if(response.form.hasOwnProperty(field)) {\n                                    $('#id_' + field).val(response.form[field]);\n                                }\n                            });\n\n                            // Set the html\n                            HLInbox.getEditor().setValue(response.form.body_html);\n                            HLInbox.getEditor().focus();\n                            HLInbox.getEditor().composer.element.blur();\n                        }\n\n                        // Loads notifications if any\n                        load_notifications();\n                    },\n                    error: function() {\n                        // Loads notifications if any\n                        load_notifications();\n                    }\n                });\n            }\n        },\n\n        toggleMarkDeleted: function (attachmentRow) {\n            var rowAttachmentName = attachmentRow.find(this.config.templateAttachmentName);\n\n            if (rowAttachmentName.hasClass('mark-deleted')) {\n                rowAttachmentName.removeClass('mark-deleted');\n            }\n            else {\n                rowAttachmentName.addClass('mark-deleted');\n            }\n        },\n\n        handleFormSubmit: function (submitButton, event) {\n            event.preventDefault();\n\n            var $containerDiv = $('<div>');\n            $containerDiv[0].innerHTML = HLInbox.getEditor().getValue();\n            // Remove resize div\n            $containerDiv.find('#resize-div').remove();\n\n            /**\n             * You'd expect HLInbox.getEditor().setValue or $('#id_body_html').html\n             * would work to set the value of the textarea.\n             * Sadly they don't, which is why .val is used\n             */\n            $('#id_body_html').val($containerDiv[0].innerHTML);\n\n            var $form = $($(submitButton).closest('form'));\n\n            Metronic.blockUI($('.inbox-content'), false, '');\n\n            $form.submit();\n        }\n    }\n})(jQuery, window, document);\n\n","(function ($, window, document, undefined) {\r\n    var editor;\r\n\r\n    window.HLInbox = {\r\n        config: {\r\n            accountDeactivatedMessage: 'Your account doesn\\'t seem to be active. Please activate your account to view your email.',\r\n            inboxCcInput: '.inbox-compose .mail-to .inbox-cc',\r\n            inboxBccInput: '.inbox-compose .mail-to .inbox-bcc',\r\n            singleMessageSelector: '.inbox-content .view-message',\r\n            templateField: '#id_template',\r\n            inboxComposeSubmit: '.inbox-compose [type=\"submit\"]',\r\n            wysiHtmlToolbar: '#wysihtml5-toolbar',\r\n            replyButton: '.reply-btn',\r\n            tagsAjaxSelector: '.tags-ajax',\r\n            emailAccountInput: '#id_send_from',\r\n            sendToNormalField: '#id_send_to_normal',\r\n            overwriteTemplateConfirm: 'Selecting a different template will overwrite the text you\\'ve typed. Do you want to load the template anyway?',\r\n            emptyTemplateAttachmentRow: '#empty-template-attachment-row',\r\n            templateAttachmentDeleteButton: '#template-attachments [data-formset-delete-button]',\r\n            templateAttachmentUndoDeleteButton: '#template-attachments [data-formset-undo-delete]',\r\n            templateAttachmentsDiv: '#template-attachments',\r\n            templateAttachmentName: '.template-attachment-name',\r\n            templateAttachmentIds: '#template-attachment-ids',\r\n            templateAttachmentId: '.template-attachment-id',\r\n            templateAttachmentRow: '.template-attachment-row',\r\n            currentTemplate: null,\r\n            previousSendToNormalLength: 0\r\n        },\r\n\r\n        init: function (config) {\r\n            var self = this;\r\n\r\n            // Setup config\r\n            if (typeof (config === 'object')) {\r\n                $.extend(this.config, config);\r\n            }\r\n\r\n            self.initListeners();\r\n            Metronic.initUniform();\r\n        },\r\n\r\n        initListeners: function() {\r\n            var self = this,\r\n                cf = self.config;\r\n\r\n            $('body')\r\n                .on('click', cf.inboxCcInput, function() {\r\n                    // Handle compose/reply cc input toggle\r\n                    self.handleAdditionalRecipientsInput('cc');\r\n                })\r\n                .on('click', cf.inboxBccInput, function() {\r\n                    // Handle compose/reply bcc input toggle\r\n                    self.handleAdditionalRecipientsInput('bcc');\r\n                })\r\n                .on('change', cf.emailAccountInput, function () {\r\n                    self.changeTemplateField.call(self, cf.templateField, false);\r\n                })\r\n                .on('change', cf.templateField, function () {\r\n                    self.changeTemplateField.call(self, this, true);\r\n                })\r\n                .on('change', cf.sendToNormalField, function () {\r\n                    var previousSendToNormalLength = self.config.previousSendToNormalLength;\r\n\r\n                    var inputLength = $(this).select2('data').length;\r\n                    self.config.previousSendToNormalLength = inputLength;\r\n\r\n                    // Don't do anything if it's just an extra recipient being added/removed\r\n                    // or the last recipient is removed\r\n                    if (inputLength > 1 || inputLength < previousSendToNormalLength) {\r\n                        return false;\r\n                    }\r\n\r\n                    self.changeTemplateField.call(self, cf.templateField, false);\r\n                })\r\n                .on('click', cf.replyButton, function () {\r\n                    // Open links when clicking the reply button\r\n                    $('.inbox-view').hide();\r\n                    $('.inbox-loading').show();\r\n                })\r\n                .on('click', cf.inboxComposeSubmit, function (event) {\r\n                    self.handleInboxComposeSubmit(this, event);\r\n                })\r\n                .on('change', cf.tags, function () {\r\n                    self.handleTagsAjaxChange(this);\r\n                })\r\n                .on('click', cf.templateAttachmentDeleteButton, function () {\r\n                    var attachmentRow = $(this).closest('.form-group');\r\n                    self.handleTemplateAttachmentsChange(attachmentRow);\r\n                })\r\n                .on('click', cf.templateAttachmentUndoDeleteButton, function () {\r\n                    var attachmentRow = $(this).closest('.form-group');\r\n                    self.handleTemplateAttachmentsChange(attachmentRow);\r\n                });\r\n\r\n                $('.inbox-compose input').on('keydown keyup keypress', function(event) {\r\n                    // Make sure pressing enter doesn't do anything (except selecting something in a dropdown)\r\n                    if (event.which == 13) {\r\n                        event.preventDefault();\r\n                    }\r\n                });\r\n        },\r\n\r\n        customParser: function () {\r\n            function parse(elementOrHtml, rules, context, cleanUp) {\r\n                return elementOrHtml;\r\n            }\r\n\r\n            return parse;\r\n        },\r\n\r\n        initEmailCompose: function (emailComposeConfig) {\r\n            var self = this;\r\n\r\n            if (typeof (emailComposeConfig === 'object')) {\r\n                $.extend(self.config, emailComposeConfig);\r\n            }\r\n\r\n            self.initWysihtml5();\r\n\r\n            // If loadDefaultTemplate isn't set there was an error, so don't do any template loading\r\n            if (self.config.loadDefaultTemplate !== null) {\r\n                if (self.config.loadDefaultTemplate) {\r\n                    // If no template was given in the url, load the default template\r\n                    self.loadDefaultEmailTemplate();\r\n                }\r\n                else {\r\n                    // Otherwise trigger change event so the given template gets loaded\r\n                    $(self.config.templateField).val(self.config.template).change();\r\n                }\r\n            }\r\n\r\n            if (self.config.recipient) {\r\n                $(self.config.sendToNormalField).select2('data', self.config.recipient);\r\n            }\r\n\r\n            // Decode special chars\r\n            var decodedEditorValue = self.decodeEntities(editor.getValue());\r\n            var $composeEmailTemplate = $(decodedEditorValue).closest('#compose-email-template');\r\n\r\n            // If there's a template, we're dealing with a draft, so set currentTemplate\r\n            if ($composeEmailTemplate.length) {\r\n                self.config.currentTemplate = $composeEmailTemplate[0].innerHTML;\r\n            }\r\n        },\r\n\r\n        // Courtesy of Robert K/Ian Clark @ http://stackoverflow.com/questions/5796718/html-entity-decode/9609450#9609450\r\n        decodeEntities: function (str) {\r\n            // This prevents any overhead from creating the object each time\r\n            var element = document.createElement('div');\r\n\r\n            if (str && typeof str === 'string') {\r\n                // Strip script/html tags\r\n                str = str.replace(/<script[^>]*>([\\S\\s]*?)<\\/script>/gmi, '');\r\n                str = str.replace(/<\\/?\\w(?:[^\"'>]|\"[^\"]*\"|'[^']*')*>/gmi, '');\r\n                element.innerHTML = str;\r\n                str = element.textContent;\r\n                element.textContent = '';\r\n            }\r\n\r\n            return str;\r\n        },\r\n\r\n        initWysihtml5: function () {\r\n            var self = this;\r\n\r\n            editor = new wysihtml5.Editor('id_body_html', {\r\n                toolbar: 'wysihtml5-toolbar',\r\n                parser: self.customParser(),\r\n                handleTables: false\r\n            });\r\n\r\n            editor.observe('load', function () {\r\n                // Initial value is most likely reply/forward text, so store it for later usage\r\n                self.config.initialEditorValue = editor.getValue();\r\n                // Extra div is needed so the editor auto resizes\r\n                editor.setValue(self.config.initialEditorValue + '<div id=\"resize-div\"></div>');\r\n\r\n                $(this.composer.element).on('keydown paste change focus blur', function () {\r\n                    self.resizeEditor();\r\n                });\r\n\r\n                // Make the editor the correct height on load\r\n                self.resizeEditor();\r\n            });\r\n\r\n            // Set heading properly after change\r\n            var toolbar = $(self.config.wysiHtmlToolbar);\r\n            $(toolbar).find('a[data-wysihtml5-command=\"formatBlock\"]').click(function(e) {\r\n                var target = e.target || e.srcElement;\r\n                var el = $(target);\r\n                $(toolbar).find('.current-font').text(el.html());\r\n            });\r\n\r\n            // Not putting this in the initListeners since it's only used in the email compose\r\n            $(window).on('resize', function() {\r\n                self.resizeEditor();\r\n            });\r\n        },\r\n\r\n        resizeEditor: function () {\r\n            $('.wysihtml5-sandbox')[0].style.height = editor.composer.element.scrollHeight + 'px';\r\n        },\r\n\r\n        handleAdditionalRecipientsInput: function (inputType) {\r\n            var $ccLink = $('.inbox-compose .mail-to .inbox-' + inputType);\r\n            var $inputField = $('.inbox-compose .input-' + inputType);\r\n            $ccLink.hide();\r\n            $inputField.show();\r\n            $('.close', $inputField).click(function () {\r\n                $inputField.hide();\r\n                $ccLink.show();\r\n                $inputField.find('.tags').select2('val', '');\r\n            });\r\n        },\r\n\r\n        changeTemplateField: function (templateField, templateChanged) {\r\n            var self = this;\r\n            if (self.config.templateList) {\r\n                var selectedTemplate = parseInt($(templateField).val());\r\n                var recipientId = null;\r\n                var emailAccountId = $(self.config.emailAccountInput).val();\r\n\r\n                if (emailAccountId) {\r\n                    if (selectedTemplate) {\r\n                        var recipient = $('#id_send_to_normal').select2('data')[0];\r\n\r\n                        if (typeof recipient !== 'undefined' && typeof recipient.object_id !== 'undefined') {\r\n                            // Check if a contact has been entered\r\n                            recipientId = recipient.object_id;\r\n                        }\r\n                        else if (self.config.sender !== '' && self.config.sender != null) {\r\n                            // If it's a reply there might be contact set\r\n                            recipientId = self.config.sender;\r\n                            self.config.sender = null;\r\n                        }\r\n\r\n                        // Always get a template\r\n                        var url = self.config.getTemplateUrl + selectedTemplate + '/';\r\n\r\n                        if (recipientId != null) {\r\n                            // If a recipient has been set we can set extra url parameters\r\n                            url += '?contact_id=' + recipientId + '&emailaccount_id=' + emailAccountId;\r\n                        }\r\n                        else {\r\n                            url += '?emailaccount_id=' + emailAccountId;\r\n                        }\r\n\r\n                        $.getJSON(url, function (data) {\r\n                            self.setNewEditorValue(data, templateChanged);\r\n                        });\r\n                    }\r\n                }\r\n                else {\r\n                    toastr.error('I couldn\\'t load the template because your email account doesn\\'t seem to be set. Please check your email account and try again');\r\n                }\r\n            }\r\n        },\r\n\r\n        handleInboxComposeSubmit: function (inboxCompose, event) {\r\n            event.preventDefault();\r\n\r\n            var buttonName = $(inboxCompose).attr('name'),\r\n                $form = $($(inboxCompose).closest('form'));\r\n\r\n            if (buttonName == 'submit-discard') {\r\n                // Discarding email, remove all attachments to prevent unneeded uploading.\r\n                //$('[id|=id_attachments]:file').remove();\r\n                // Prevent discard from submitting form. This will probably be made nicer later (LILY-787)\r\n                window.location = '/#/email/all/INBOX';\r\n                return;\r\n            } else if (buttonName == 'submit-send') {\r\n                // Validation of fields.\r\n                if (!$('#id_send_to_normal').val() && !$('#id_send_to_cc').val() && !$('#id_send_to_bcc').val()) {\r\n                    $('#modal_no_email_address').modal();\r\n                    event.preventDefault();\r\n                    return;\r\n                }\r\n            } else if (buttonName == 'submit-save') {\r\n                var draftPk = $('#id_draft_pk').val();\r\n                // If we are saving a (existing) draft, change url\r\n                if(draftPk) {\r\n                    $form.attr('action', '/messaging/email/draft/' + draftPk + '/');\r\n                } else {\r\n                    $form.attr('action', '/messaging/email/draft/');\r\n                }\r\n            }\r\n            else if (buttonName == 'submit-send-archive') {\r\n                // Send and archive was pressed, so set an extra field\r\n                $('<input />').attr('type', 'hidden')\r\n                    .attr('name', 'archive')\r\n                    .attr('value', true)\r\n                    .appendTo($form);\r\n            }\r\n            else {\r\n                // No valid button, so do nothing;\r\n                return;\r\n            }\r\n\r\n            // Remove unnecessary html\r\n            var $containerDiv = $('<div id=\"email-container-div\">');\r\n            $containerDiv[0].innerHTML = HLInbox.getEditor().getValue();\r\n\r\n            var templateContent = '';\r\n            // Get template content if we're not dealing with the creation of a draft and there is a template set\r\n            if (buttonName != 'submit-save' && $containerDiv.find('#compose-email-template').length) {\r\n                templateContent = $containerDiv.find('#compose-email-template')[0].innerHTML;\r\n\r\n                // Remove email template div and resize div and only keep user typed text\r\n                $containerDiv.find('#compose-email-template').remove();\r\n            }\r\n\r\n            $containerDiv.find('#resize-div').remove();\r\n\r\n            /**\r\n             * You'd expect HLInbox.getEditor().setValue or $('#id_body_html').html\r\n             * would work to set the value of the textarea.\r\n             * Sadly they don't, which is why .val is used\r\n             */\r\n            $('#id_body_html').val(templateContent + '<br>' + $containerDiv[0].innerHTML);\r\n\r\n            // Make sure both buttons of the same name are set to the loading state\r\n            $('button[name=\"' + buttonName + '\"]').button('loading');\r\n\r\n            // No validation needed, remove attachments to prevent unneeded uploading.\r\n            $('[id|=id_attachments]:file').filter(function () {\r\n                return $(inboxCompose).data('formset-disabled') == true;\r\n            }).remove();\r\n\r\n            Metronic.blockUI($('.inbox-content'), false, '');\r\n\r\n            $form.submit();\r\n        },\r\n\r\n        handleTagsAjaxChange: function (tagsAjax) {\r\n            // Select2 doesn't remove certain values (values with quotes), so make sure that the value of the field is correct\r\n            var values = [];\r\n            var data = $(tagsAjax).select2('data');\r\n\r\n            for(var i=0; i < data.length; i++) {\r\n                var recipient_data = data[i];\r\n                values.push(recipient_data.id);\r\n            }\r\n\r\n            $(tagsAjax).val(values.join());\r\n        },\r\n\r\n        getEditor: function() {\r\n            return editor;\r\n        },\r\n\r\n        loadDefaultEmailTemplate: function() {\r\n            var self = this;\r\n            var emailAccountId = $(self.config.emailAccountInput).val();\r\n\r\n            if (emailAccountId) {\r\n                var url = self.config.defaultEmailTemplateUrl + emailAccountId + '/';\r\n\r\n                $.getJSON(url, function(data) {\r\n                    $(self.config.templateField).select2('val', data['template_id']).change();\r\n                });\r\n            }\r\n            else {\r\n                toastr.error('Sorry, I couldn\\'t load your default email template. You could try reloading the page');\r\n            }\r\n        },\r\n\r\n        setNewEditorValue: function (data, templateChanged) {\r\n            var self = this;\r\n            var htmlPart = data['template'];\r\n            // getValue returns a string, so convert to elements\r\n            var editorValue = $(editor.getValue());\r\n            var currentTemplate = editorValue.closest('#compose-email-template');\r\n            var newEditorValue = '';\r\n\r\n            // Check if an email template has already been loaded\r\n            if (currentTemplate.length) {\r\n                if (currentTemplate.html().length) {\r\n                    var changeTemplate = false;\r\n\r\n                    if (templateChanged) {\r\n                        // If a different template was selected we want to warn the user\r\n                        changeTemplate = confirm(self.config.overwriteTemplateConfirm);\r\n                    }\r\n                    else {\r\n                        // Template wasn't changed, so a new recipient was entered\r\n                        changeTemplate = true;\r\n                    }\r\n\r\n                    if (changeTemplate) {\r\n                        var addedTemplateText = '';\r\n\r\n                        if (self.config.currentTemplate) {\r\n                            var diff = {};\r\n\r\n                            // First time changing a draft needs a different operation\r\n                            // We want to check if the draft template differs from the default\r\n                            if (self.config.messageType == 'draft' && htmlPart == self.config.currentTemplate) {\r\n                                diff = JsDiff.diffChars(currentTemplate.html(), htmlPart);\r\n                            }\r\n                            else {\r\n                                // Otherwise compare the current editor value with the current template\r\n                                diff = JsDiff.diffChars(currentTemplate.html(), self.config.currentTemplate);\r\n                            }\r\n\r\n                            diff.forEach(function (part) {\r\n                                // Get all text that was changed/added\r\n                                if (part.added || part.removed) {\r\n                                    addedTemplateText += part.value;\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        self.config.currentTemplate = htmlPart;\r\n\r\n                        // Change the html of the existing email template and add text that was added to the template\r\n                        currentTemplate.html(htmlPart + addedTemplateText);\r\n                        // Since editorValue is actually an array of elements we can't easily convert it back to text\r\n                        var container = $('<div>');\r\n                        // Add the (edited) html to the newly created container\r\n                        container.append(editorValue);\r\n                        // Get the text version of the new html\r\n                        newEditorValue = container[0].innerHTML;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // No email template loaded so create our email template container\r\n                var emailTemplate = '<div id=\"compose-email-template\">' + htmlPart + '</div>';\r\n                // Append the existing text\r\n                newEditorValue = emailTemplate + '<br>' + editor.getValue();\r\n\r\n                self.config.currentTemplate = htmlPart;\r\n            }\r\n\r\n            // Only overwrite the subject if a new email is being created\r\n            if (this.config.messageType === 'new' && data['template_subject'] != '') {\r\n                $('#id_subject').val(data['template_subject']);\r\n            }\r\n\r\n            if (newEditorValue.length) {\r\n                editor.setValue(newEditorValue);\r\n                self.resizeEditor();\r\n                self.processAttachments(data['attachments']);\r\n            }\r\n        },\r\n\r\n        processAttachments: function (attachments) {\r\n            var cf = this.config;\r\n            // Clear any existing template attachments\r\n            $(cf.templateAttachmentsDiv).empty();\r\n\r\n            var attachmentIds = [];\r\n\r\n            for (var i = 0; i < attachments.length; i++) {\r\n                var attachment = attachments[i];\r\n\r\n                attachmentIds.push(attachment.id);\r\n\r\n                var attachmentRow = $(cf.emptyTemplateAttachmentRow).clone();\r\n                attachmentRow.find(cf.templateAttachmentName).html(attachment.name);\r\n                attachmentRow.find(cf.templateAttachmentId).val(attachment.id);\r\n                attachmentRow.removeAttr('id');\r\n                attachmentRow.removeClass('hidden');\r\n\r\n                $(cf.templateAttachmentsDiv).append(attachmentRow);\r\n            }\r\n\r\n            $(cf.templateAttachmentIds).val(attachmentIds);\r\n        },\r\n\r\n        handleTemplateAttachmentsChange: function (attachmentRow) {\r\n            var self = this,\r\n                cf = self.config;\r\n\r\n            var rowAttachmentName = attachmentRow.find(cf.templateAttachmentName);\r\n\r\n            if (rowAttachmentName.hasClass('mark-deleted')) {\r\n                rowAttachmentName.removeClass('mark-deleted');\r\n            }\r\n            else {\r\n                rowAttachmentName.addClass('mark-deleted');\r\n            }\r\n\r\n            attachmentRow.find('[data-formset-delete-button]').toggleClass('hidden');\r\n            attachmentRow.find('[data-formset-undo-delete]').toggleClass('hidden');\r\n\r\n            var newAttachmentIds = [];\r\n\r\n            var attachments = $(cf.templateAttachmentRow);\r\n            attachments.each(function () {\r\n                if (!$(this).find(cf.templateAttachmentName).hasClass('mark-deleted')) {\r\n                    var attachmentId = $(this).find(cf.templateAttachmentId).val();\r\n                    if (attachmentId !== \"\") {\r\n                        // Make sure the value of the empty attachment row doesn't get added\r\n                        newAttachmentIds.push(attachmentId);\r\n                    }\r\n                }\r\n            });\r\n\r\n            $(cf.templateAttachmentIds).val(newAttachmentIds);\r\n        },\r\n\r\n        setSuccesURL: function(previousState){\r\n            if(previousState != null){\r\n                $(\"input[name='success_url']\").val(previousState);\r\n            }\r\n        }\r\n    }\r\n})(jQuery, window, document);\r\n","(function($, window, document, undefined){\n    window.HLFormsets = {\n        config: {\n            formsetClass: '.formset'\n        },\n        init: function (config) {\n            var self = this;\n            // Setup configuration\n            if ($.isPlainObject(config)) {\n                $.extend(self.config, config);\n            }\n\n            $(self.config.formsetClass).formset();\n            self.initListeners();\n        },\n\n        initListeners: function() {\n            var self = this;\n            var body = $('body');\n\n            body.on('formAdded', '[data-formset-form]', function() {\n                var formset_element = $(this).parents('.formset');\n                var add_element = $(formset_element).find('.add-link');\n\n                var indent = ($(formset_element).attr('data-formset-indent') || 'true') == 'true';\n                if(indent) {\n                    $(add_element).find('.form-control-static').addClass('col-md-offset-2').removeClass('form-control-static');\n                }\n                $(add_element).find('label').addClass('hide');\n\n                if ($(formset_element).find('[data-formset-form]').length === 1) {\n                    $(this).find('label.hide').removeClass('hide');\n\n                    if(indent) {\n                        $(this).find('.field_wrapper').removeClass('col-md-offset-2');\n                    }\n                }\n                HLSelect2.init();\n            });\n\n            body.on('formDeleted', '[data-formset-form]', function() {\n                $(this).stop().slideDown();\n                $(this).find(':input:enabled:visible').attr('data-formset-disabled', true).attr('readonly', 'readonly');\n                $(this).find('[data-formset-delete-button]').toggleClass('hidden');\n                $(this).find('[data-formset-undo-delete]').toggleClass('hidden');\n            });\n\n            body.on('click', '[data-formset-form] [data-formset-undo-delete]', function() {\n                var formset = $(this).closest('[data-formset-form]');\n\n                formset.find('[data-formset-disabled=true]').removeAttr('data-formset-disabled').removeAttr('readonly');\n                formset.find('input[name$=\"DELETE\"]').attr('checked', false).change();\n                formset.find('[data-formset-delete-button]').toggleClass('hidden');\n                $(this).toggleClass('hidden');\n            });\n\n        }\n    }\n})(jQuery, window, document);\n","(function($, window, document, undefined){\n    window.HLSelect2 = {\n        config: {\n            tagInputs: 'input.tags',\n            ajaxInputs: 'input.select2ajax',\n            tagsAjaxClass: 'tags-ajax',\n            ajaxPageLimit: 30,\n            clearText: '-- Clear --'\n        },\n\n        init: function( config ) {\n            var self = this;\n            // Setup configuration\n            if ($.isPlainObject(config)) {\n                $.extend(self.config, config);\n            }\n            // On initialize, setup select2\n            self.setupSelect2();\n            self.initListeners();\n        },\n\n        initListeners: function() {\n            var self = this;\n            // When modal is shown, lets instantiate the select2 in the modals\n            $(document).on('shown.bs.modal', '.modal', function() {\n                self.setupSelect2();\n            });\n        },\n\n        setupSelect2: function() {\n            // Setup select2 for non-ajaxified selects, ajaxified selects\n            // are using hidden inputs.\n            $('select').select2({\n                // at least this many results are needed to enable the search field\n                // (9 is the amount at which the user must scroll to see all items)\n                minimumResultsForSearch: 9\n            });\n            this.createTagInputs();\n            this.createAjaxInputs();\n        },\n\n        createTagInputs: function() {\n            // Setup tag inputs\n            $(this.config.tagInputs).each(function() {\n                if (!$(this).data().hasOwnProperty('select2')) {\n                    var tags = [];\n                    var $this = $(this);\n                    if ($this.data('choices')) {\n                        tags = $this.data('choices').split(',');\n                    }\n                    $this.select2({\n                        tags: tags,\n                        tokenSeparators: [',', ' '],\n                        width: '100%'\n                    });\n                }\n            });\n        },\n\n        createAjaxInputs: function() {\n            // Setup inputs that needs remote link\n            var self = this;\n            var cf = self.config;\n\n            $(cf.ajaxInputs).each(function() {\n                var $this = $(this);\n                var _data = $this.data();\n                // _data.tags is a marker for AjaxSelect2Widget which indicates\n                // that it expects multiple values as input.\n\n                // Prevent Select2 from being initialized on elements that already have Select2\n                if (!_data.hasOwnProperty('select2')) {\n                    var options = {\n                        ajax: {\n                            cache: true,\n                            data: function (term, page) {\n                                // page is the one-based page number tracked by Select2\n                                var data = null;\n\n                                if ($this.hasClass(cf.tagsAjaxClass) && !_data.tags) {\n                                    if (term === '') {\n                                        // elasticsearch breaks when the term is empty, so just look for non-empty results\n                                        term = '*';\n                                    }\n                                    // search for contacts and accounts containing the search term, but only those with an email address\n                                    var filterQuery = '((_type:contacts_contact AND (name:' + term + ' OR email_addresses.email_address:' + term + ')) ' +\n                                        'OR (_type:accounts_account AND (name:' + term + ' OR email_addresses.email_address:' + term + '))) ' +\n                                        'AND email_addresses.email_address:*';\n\n                                    data = {\n                                        filterquery: filterQuery,\n                                        size: cf.ajaxPageLimit, // page size\n                                        page: (page - 1), // page number, zero-based\n                                        sort: '-modified' //sort modified descending\n                                    };\n                                }\n                                else {\n                                    var term_stripped = term.trim();\n                                    data = {\n                                        filterquery: term_stripped ? 'name:('+term_stripped+')' : '', //search term\n                                        size: cf.ajaxPageLimit, // page size\n                                        page: (page - 1), // page number, zero-based\n                                        sort: '-modified' //sort modified descending\n                                    };\n                                }\n\n                                var filters = $this.data('filter-on');\n                                if (typeof filters !== 'undefined' && filters !== '') {\n                                    filters.split(',').forEach(function (filter) {\n                                        if (filter.indexOf('id_') === 0) {\n                                            var filter_val = $('#' + filter).val();\n                                            var filter_name = filter.substring(3);\n                                            if (filter_name.indexOf('case_quickbutton_') === 0) {\n                                                filter_name = filter.substring(20);\n                                            } else if (filter_name == 'account') {\n                                                // This is a special case at the moment, in the future we might have\n                                                // more cases like this.\n                                                // But for now, just do this check\n                                                filter_name = 'accounts.id';\n                                            }\n                                            if (filter_val && filter_val > 0) {\n                                                data.filterquery += ' ' + filter_name + ':' + filter_val;\n                                            }\n                                        } else {\n                                            data.type = filter;\n                                        }\n                                    });\n                                }\n\n                                return data;\n                            },\n\n                            results: function (data, page) {\n                                var more = (page * cf.ajaxPageLimit) < data.total; // whether or not there are more results available\n\n                                if ($this.hasClass(cf.tagsAjaxClass) && !_data.tags) {\n                                    var parsed_data = [];\n\n                                    data.hits.forEach(function (hit) {\n                                        // Only display contacts with an e-mail address\n                                        for (var i = 0; i < hit.email_addresses.length; i++) {\n                                            // The text which is actually used in the application\n                                            var used_text = '\"' + hit.name + '\" <' + hit.email_addresses[i].email_address + '>';\n                                            // The displayed text\n                                            var displayed_text = hit.name + ' <' + hit.email_addresses[i].email_address + '>';\n                                            // Select2 sends 'id' as the value, but we want to use the email\n                                            // So store the actual id (hit.id) under a different name\n                                            parsed_data.push({id: used_text, text: displayed_text, object_id: hit.id});\n                                        }\n                                    });\n\n                                    // Array elements with empty text can't be added to select2, so manually fill a new array\n                                    data.hits = parsed_data;\n                                }\n                                else {\n                                    data.hits.forEach(function (hit) {\n                                        hit.text = hit.name;\n                                    });\n                                }\n\n                                // Add clear option, but not for multiple select2.\n                                if ((page == 1 && !$this.hasClass(cf.tagsAjaxClass)) && !_data.tags) {\n                                    data.hits.unshift({id: -1, text:cf.clearText});\n                                }\n                                return {\n                                    results: data.hits,\n                                    more: more\n                                };\n                            }\n                        },\n\n                        initSelection: function (item, callback) {\n                            var id = item.val();\n                            var text = item.data('selected-text');\n                            var data = { id: id, text: text };\n                            callback(data);\n                        }\n                    };\n\n                    if ($this.hasClass(cf.tagsAjaxClass)) {\n                        options.tags = true;\n                        options.tokenSeparators = [',', ' '];\n                        // Create a new tag if there were no results\n                        options.createSearchChoice = function (term, data) {\n                            if ($(data).filter(function () {\n                                    return this.text.localeCompare(term) === 0;\n                                }).length === 0) {\n                                return {\n                                    id: term,\n                                    text: term\n                                };\n                            }\n                        };\n                        // Prevent select2 dropdown from opening when pressing enter\n                        options.openOnEnter = false;\n                    }\n\n                    // Set select2 to multiple.\n                    if(_data.tags) {\n                        options.tags = true;\n                        options.multiple = true;\n                    }\n\n\n                    $this.select2(options);\n                    // Set the initial form value from a JSON encoded data attribute called data-initial\n                    if(_data.tags) {\n                        $this.select2('data', _data.initial);\n                    }\n                }\n            });\n        }\n    };\n\n})(jQuery, window, document);\n","(function($, window, document, undefined){\n    window.HLShowAndHide = {\n        config: {\n            selector: '.show-and-hide-input'\n        },\n\n        init: function( config ) {\n            var self = this;\n            // Setup configuration\n            if ($.isPlainObject(config)) {\n                $.extend(self.config, config);\n            }\n            // On initialize, setup show and hide\n            self.initListeners();\n        },\n\n        initListeners: function() {\n            var self = this;\n\n            // When modal is shown, lets instantiate the select2 in the modals\n            $('body').on('click', '.form .toggle-original-form-input', function() {\n                var field = $(this).closest('.show-and-hide-input');\n\n                /* hide clicked link */\n                $(this).parent().addClass('hide');\n\n                /* toggle form input */\n                if($(this).data('action') == 'show') {\n                    /* show the other link */\n                    $(field).find('[data-action=\"hide\"]').parent().removeClass('hide');\n\n                    /* show the form input */\n                    $(field).find('.original-form-widget').removeClass('hide');\n\n                    /* (re)enable fields */\n                    $(field).find(':input').removeAttr('disabled');\n\n                    var input = $(field).find(':input:visible:not([type=\"file\"]):first');\n                    if(input) {\n                        /* adding to the end of the execution queue reliably sets the focus */\n                        /*  e.g. without, this only works once for select2 inputs */\n                        setTimeout(function() {\n                            // setCaretAtEnd(input);\n                        }, 0);\n                    }\n                } else if($(this).data('action') == 'hide') {\n                    /* show the other link */\n                    $(field).find('[data-action=\"show\"]').parent().removeClass('hide');\n\n                    /* hide the form input */\n                    $(field).find('.original-form-widget').addClass('hide');\n\n                    /* disabled fields will not be posted */\n                    $(field).find(':input').attr('disabled', 'disabled');\n                }\n            });\n        }\n    };\n\n})(jQuery, window, document);\n","(function($, window, document, undefined) {\n    window.HLDataProvider = {\n        config: {\n            buttonDataProvider: ':button.dataprovider',\n            loadingText: 'Beaming up the information now, almost within range!',\n            loadingHeader: 'I\\'m on my way!',\n            provideUrl: '/provide/account/',\n            dataProviderClass: '.dataprovider',\n            errorHeader: 'Oops!',\n            errorText: 'There was an error trying to fetch your data, please don\\'t be mad.',\n            successHeader: 'Yeah!',\n            successText: 'We did it! Your new data should be right there waiting for you.',\n            hiddenSuccessHeader: 'Psst!',\n            hiddenSuccessText: 'Did you know I did more work in the background? ;)',\n            overwriteConfirmHeader: 'Do you wish to overwrite the following fields?\\n',\n            fields: [\n                'name',\n                'description',\n                'legalentity',\n                'taxnumber',\n                'bankaccountnumber',\n                'cocnumber',\n                'iban',\n                'bic',\n            ],\n            formsets: [\n                'email_addresses',\n                'phone_numbers',\n                'addresses'\n            ]\n        },\n\n        init: function(config) {\n            // Setup config\n            var self = this;\n            if ($.isPlainObject(config)) {\n                $.extend(self.config, config);\n            }\n\n            self.initListeners();\n        },\n\n        initListeners: function() {\n            var self = this,\n                cf = self.config;\n\n            $('body').on('click', cf.buttonDataProvider, function(event) {\n                // On button press\n                self.findDataProviderInfo.call(self, this, event);\n            }).on('keydown', 'div' + cf.dataProviderClass + ' > input', function(event) {\n                // Catch ENTER on Dataprovider input\n                if (event.which === 13) {\n                    self.findDataProviderInfo.call(self, cf.buttonDataProvider, event);\n                    // Prevent form submission\n                    event.preventDefault();\n                }\n            });\n        },\n\n        findDataProviderInfo: function(button, event) {\n            var self = this,\n                cf = self.config,\n                $button = $(button),\n                $form = $button.closest('form'),\n                $input = $('div' + cf.dataProviderClass +' > input'),\n                domain = self.sanitizeDomain($input.val());\n\n            // Show busy gui to user\n            $button.button('loading');\n            toastr.info(cf.loadingText, cf.loadingHeader);\n\n            var url = cf.provideUrl + domain;\n            $.getJSON(url)\n                .done(function(data) {\n                    if (data.error) {\n                        toastr.error(data.error.message, cf.errorHeader);\n                    } else {\n                        self.fillForm($form, data, cf.fields, cf.formsets);\n                        toastr.success(cf.successText, cf.successHeader);\n                    }\n                })\n                .fail(function() {\n                    toastr.error(cf.errorText, cf.errorHeader);\n                })\n                .always(function() {\n                    $button.button('reset');\n                });\n\n            event.preventDefault();\n        },\n\n        sanitizeDomain: function(url) {\n            var domain = $.trim(url.replace('http://', ''));\n            domain = $.trim(domain.replace('https://', ''));\n            // Always add last '/'\n            if (domain.slice(-1) !== '/') {\n                domain += '/';\n            }\n            return domain;\n        },\n\n        fillForm: function($form, data, fields, formsets) {\n            var self = this,\n                cf = self.config;\n\n            var checkOverwrite = self.loopTroughFields(fields, $form, data),\n                checkOverwriteFields = checkOverwrite[0],\n                checkOverwriteLabels = checkOverwrite[1];\n\n            // Check if there are fields for which we need to do an overwrite check\n            if (checkOverwriteFields.length) {\n                // Ask the user whether to overwrite or not\n                if (confirm(cf.overwriteConfirmHeader + checkOverwriteLabels.join('\\n'))) {\n                    // Loop through fields that need to be overwritten\n                    checkOverwriteFields.forEach(function(field) {\n                        var $input = $form.find('[name=\"' + field + '\"]');\n                        self.fillField($input, data[field]);\n                    });\n                }\n            }\n\n            // Loop through formsets\n            self.loopTroughFormSets(formsets, $form, data);\n\n        },\n\n        loopTroughFields: function(fields, $form, data) {\n            var self = this,\n                cf = self.config,\n                checkOverwriteFields = [],\n                checkOverwriteLabels = [],\n                filledHiddenField = false;\n\n            // Loop through all fields\n            fields.forEach(function(field) {\n                // Input is the field in the current form\n                var $input = $form.find('[name=\"' + field + '\"]');\n                // Always clear the field if it's hidden\n                if ($input.attr('type') == 'hidden' || $input.parent().hasClass('hide')) {\n                    $input.val('');\n                    if (data[field]) {\n                        filledHiddenField = true;\n                    }\n                }\n                // Check if there is data for the field, else do nothing\n                if (data[field]) {\n                    // Check if the field does not exist in the current form\n                    if ($input.val() !== undefined) {\n                        // Check if the field has a value and that value is not the field placeholder\n                        if ($input.val().length && $input.val() !== $input.attr('placeholder')) {\n                            // Display label of field instead of field name\n                            var label = $input.parents('.form-group').find('label').text();\n                            // Field is not empty, check before overwrite\n                            checkOverwriteFields.push(field);\n                            checkOverwriteLabels.push('- ' + label);\n                        } else {\n                            // Field is empty, fill it with new data\n                            self.fillField($input, data[field]);\n                        }\n                    }\n                }\n            });\n\n            if (filledHiddenField) {\n                toastr.success(cf.hiddenSuccessText, cf.hiddenSuccessHeader);\n            }\n\n            return [checkOverwriteFields, checkOverwriteLabels];\n        },\n\n        loopTroughFormSets: function(formsets, $form, data){\n            for (var i=0; i < formsets.length; i++) {\n                var formset = formsets[i];\n                // Check if there is data for the formset\n                if (data[formset] && data[formset].length) {\n                    var $formsetDiv = $form.find('#' + formset),\n                        $formsetAddLink = $formsetDiv.find('[data-formset-add]'),\n                        newFormsets = data[formset],\n                        $foundInput;\n\n                    for (var j = 0; j < newFormsets.length; j++) {\n                        var newFormset = newFormsets[j],\n                            insertNewFormset = false,\n                            $newElement;\n\n                        if (typeof newFormset === 'object') {\n                            var key,\n                                hasFoundInput = false;\n                            for (key in newFormset) {\n                                $foundInput = $formsetDiv.find(':input[name$=\"' + key +'\"]');\n                                if ($foundInput.length){\n                                    hasFoundInput = true;\n                                    $foundInput = $foundInput.filter(function () {\n                                        var val = $(this).val(),\n                                            newVal = newFormset[key];\n\n                                        return ((val === '' && newVal === null) || val == newVal);\n                                    });\n                                    if (!$foundInput.length) {\n                                        // One of the values is different so we need to add a new formset\n                                        insertNewFormset = true;\n                                    }\n                                }\n                            }\n                            if (insertNewFormset || !hasFoundInput) {\n                                $formsetAddLink.click();\n                                $newElement =  $formsetDiv.find('[data-formset-body] [data-formset-form]:last');\n                                for (key in newFormset) {\n                                    $newElement.find(':input[name$=\"' + key +'\"]').val(newFormset[key]);\n                                }\n                            }\n                        } else if (typeof newFormset === 'string') {\n                            $foundInput = $formsetDiv.find(':input').filter(function () {\n                                return $(this).val() == newFormset;\n                            });\n                            if (!$foundInput.length) {\n                                $formsetAddLink.click();\n                                $newElement =  $formsetDiv.find('[data-formset-body] [data-formset-form]:last');\n                                $newElement.find(':input:first').val(newFormset);\n                            }\n                        }\n                    }\n                }\n            }\n        },\n\n        fillField: function($input, value) {\n            if (typeof value === 'string') {\n                // String\n                $input.val(value);\n            } else if (typeof value[0] === 'string') {\n                // List of strings\n                var uniqueValues = value.concat($input.val().split(',')).filter(function(val, index, self) {\n                    return (self.indexOf(val) === index) && (val !== '');\n                });\n                $input.val(uniqueValues.join());\n            } else {\n                // JSON object\n                $input.val(JSON.stringify(value));\n            }\n            $input.change();\n            if ($input.parent().hasClass('original-form-widget') && $input.parent().hasClass('hide')) {\n                // show the input, by reusing the click handler as defined in the utils.\n                $input.parents(\".show-and-hide-input\").find('a[data-action=\"show\"]').trigger('click');\n            }\n        }\n    }\n})(jQuery, window, document);\n","$(function() {\n\n    $('body').on('blur', 'input[name^=\"phone\"]', function() {\n        // Format telephone number\n        var $phoneNumberInput = $(this);\n        var phone = $phoneNumberInput.val();\n        if (phone.match(/[a-z]|[A-Z]/)) {\n            // if letters are found, skip formatting: it may not be a phone field after all\n            return false;\n        }\n\n        // Match on mobile phone nrs e.g. +316 or 06, so we can automatically set the type to mobile.\n        if (phone.match(/^\\+316|^06/)) {\n            var typeId = $phoneNumberInput.attr('id').replace('raw_input', 'type');\n            $('#' + typeId).select2('val', 'mobile');\n        }\n\n        phone = phone\n            .replace(\"(0)\",\"\")\n            .replace(/\\s|\\(|\\-|\\)|\\.|x|:|\\*/g, \"\")\n            .replace(/^00/,\"+\");\n\n        if (phone.length == 0) {\n            return false;\n        }\n\n        if (!phone.startsWith('+')) {\n            if (phone.startsWith('0')) {\n                phone = phone.substring(1);\n            }\n            phone = '+31' + phone;\n        }\n\n        if (phone.startsWith('+310')) {\n            phone = '+31' + phone.substring(4);\n        }\n        $phoneNumberInput.val(phone);\n    });\n\n    $('body').on('change', 'select[id*=\"is_primary\"]', function(e) {\n        if($(e.currentTarget).val() == 'True'){\n            $('select[id*=\"is_primary\"]').each(function(i){\n                if($(this).is('select') && $(this).val() == 'True'){\n                    $(this).val('False');\n                }\n            });\n            $(e.currentTarget).val('True');\n            HLSelect2.init();\n        }\n    });\n});\n\nfunction addBusinessDays(date, businessDays) {\n    var weeks = Math.floor(businessDays/5);\n    var days = businessDays % 5;\n    var day = date.getDay();\n    if (day === 6 && days > -1) {\n       if (days === 0) {days-=2; day+=2;}\n       days++; dy -= 6;}\n    if (day === 0 && days < 1) {\n       if (days === 0) {days+=2; day-=2;}\n       days--; day += 6;}\n    if (day + days > 5) days += 2;\n    if (day + days < 1) days -= 2;\n    date.setDate(date.getDate() + weeks * 7 + days);\n    return date;\n}\n","/**\n * Router definition.\n */\nangular.module('app.accounts').config(accountConfig);\n\naccountConfig.$inject = ['$stateProvider'];\nfunction accountConfig ($stateProvider) {\n\n    $stateProvider.state('base.accounts.detail.delete', {\n        url: '/delete',\n        views: {\n            '@': {\n                controller: 'AccountDeleteController'\n            }\n        }\n    });\n}\n\n/**\n * Controller to delete a account\n */\nangular.module('app.accounts').controller('AccountDeleteController', AccountDeleteController);\n\nAccountDeleteController.$inject = ['$state', '$stateParams', 'Account'];\nfunction AccountDeleteController ($state, $stateParams, Account) {\n    var id = $stateParams.id;\n\n    Account.delete({\n        id:id\n    }, function() {  // On success\n        $state.go('base.accounts');\n    }, function(error) {  // On error\n        // Error notification needed\n        $state.go('base.accounts');\n    });\n}\n","/**\n * Router definition.\n */\nangular.module('app.accounts').config(accountConfig);\n\naccountConfig.$inject = ['$stateProvider'];\nfunction accountConfig ($stateProvider) {\n    $stateProvider.state('base.accounts.detail', {\n        url: '/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: 'accounts/controllers/detail.html',\n                controller: AccountDetailController\n            }\n        },\n        ncyBreadcrumb: {\n            label: '{{ account.name }}'\n        },\n        resolve: {\n            account: ['AccountDetail', '$stateParams', function(AccountDetail, $stateParams) {\n                var accountId = $stateParams.id;\n                return AccountDetail.get({id: accountId}).$promise\n            }]\n        }\n    })\n}\n\nangular.module('app.accounts').controller('AccountDetailController', AccountDetailController);\n\nAccountDetailController.$inject = ['$scope', '$stateParams', 'CaseDetail', 'ContactDetail', 'DealDetail', 'account'];\nfunction AccountDetailController($scope, $stateParams, CaseDetail, ContactDetail, DealDetail, account) {\n    /**\n     * Details page with historylist and more detailed account information.\n     */\n    var id = $stateParams.id;\n\n    $scope.account = account;\n    $scope.conf.pageTitleBig = account.name;\n    $scope.conf.pageTitleSmall = 'change is natural';\n\n    $scope.caseList = CaseDetail.query({filterquery: 'account:' + id});\n    $scope.caseList.$promise.then(function(caseList) {\n        $scope.caseList = caseList;\n    });\n\n    $scope.dealList = DealDetail.query({filterquery: 'account:' + id});\n    $scope.dealList.$promise.then(function(dealList) {\n        $scope.dealList = dealList;\n    });\n\n    $scope.contactList = ContactDetail.query({filterquery: 'accounts.id:' + id});\n    $scope.contactList.$promise.then(function(contactList) {\n        $scope.contactList = contactList;\n    });\n}\n","/**\n * Router definition.\n */\nangular.module('app.accounts').config(accountConfig);\n\naccountConfig.$inject = ['$stateProvider'];\nfunction accountConfig ($stateProvider) {\n    $stateProvider.state('base.accounts', {\n        url: '/accounts',\n        views: {\n            '@': {\n                templateUrl: 'accounts/controllers/list.html',\n                controller: AccountList,\n                controllerAs: 'vm'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Accounts'\n        }\n    });\n}\n\n/**\n * AccountList is a controller to show list of contacts\n *\n */\nangular.module('app.accounts').controller('AccountList', AccountList);\n\nAccountList.$inject = ['$scope', '$window', 'Account', 'Cookie'];\nfunction AccountList ($scope, $window, Account, Cookie) {\n    var vm = this;\n    var cookie = Cookie('accountList');\n    /**\n     * table object: stores all the information to correctly display the table\n     */\n    vm.table = {\n        page: 1,  // current page of pagination: 1-index\n        pageSize: 20,  // number of items per page\n        totalItems: 0, // total number of items\n        filter: cookie.get('filter', ''),  // search filter\n        order:  cookie.get('order', {\n            ascending: true,\n            column:  'modified'  // string: current sorted column\n        }),\n        visibility: cookie.get('visibility', {\n            name: true,\n            contactInformation: true,\n            assignedTo: true,\n            created: true,\n            modified: true,\n            tags: true,\n            customerId: true\n        })\n    };\n    vm.deleteAccount = deleteAccount;\n    vm.setFilter = setFilter;\n    vm.exportToCsv = exportToCsv;\n\n    activate();\n\n    /////////////\n\n    function activate() {\n        _setupWatches();\n    }\n\n    $scope.conf.pageTitleBig = 'Accounts';\n    $scope.conf.pageTitleSmall = 'An overview of accounts';\n\n\n    function deleteAccount (account) {\n        if (confirm('Are you sure?')) {\n            Account.delete({\n                id:account.id\n            }, function() {  // On success\n                var index = vm.table.items.indexOf(account);\n                vm.table.items.splice(index, 1);\n            }, function(error) {  // On error\n                alert('something went wrong.')\n            })\n        }\n    }\n\n    /**\n     * _updateTableSettings() sets scope variables to the cookie\n     */\n    function _updateTableSettings() {\n        cookie.put('filter', vm.table.filter);\n        cookie.put('order', vm.table.order);\n        cookie.put('visibility', vm.table.visibility);\n    }\n\n    /**\n     * _updateAccounts() reloads the accounts through a service\n     *\n     * Updates table.items and table.totalItems\n     */\n    function _updateAccounts() {\n        Account.getAccounts(\n            vm.table.filter,\n            vm.table.page,\n            vm.table.pageSize,\n            vm.table.order.column,\n            vm.table.order.ascending\n        ).then(function(data) {\n                vm.table.items = data.accounts;\n                vm.table.totalItems = data.total;\n            }\n        );\n    }\n\n    function _setupWatches() {\n        /**\n         * Watches the model info from the table that, when changed,\n         * needs a new set of accounts\n         */\n        $scope.$watchGroup(['vm.table.page', 'vm.table.order.column', 'vm.table.order.ascending', 'vm.table.filter'], function() {\n            _updateTableSettings();\n            _updateAccounts();\n        });\n\n        /**\n         * Watches the model info from the table that, when changed,\n         * needs to store the info to the cache\n         */\n        $scope.$watchCollection('vm.table.visibility', function() {\n            _updateTableSettings();\n        });\n    }\n\n\n    /**\n     * setFilter() sets the filter of the table\n     *\n     * @param queryString string: string that will be set as the new filter on the table\n     */\n    function setFilter (queryString) {\n        vm.table.filter = queryString;\n    }\n\n    /**\n     * exportToCsv() creates an export link and opens it\n     */\n    function exportToCsv () {\n        var getParams = '';\n        // If there is a filter, add it\n        if (vm.table.filter) {\n            getParams += '&export_filter=' + vm.table.filter;\n        }\n\n        // Add all visible columns\n        angular.forEach(vm.table.visibility, function(value, key) {\n            if (value) {\n                getParams += '&export_columns='+ key;\n            }\n        });\n\n        // Setup url\n        var url = '/accounts/export/';\n        if (getParams) {\n            url += '?' + getParams.substr(1);\n        }\n\n        $window.open(url);\n    }\n}\n","/**\n * Router definition.\n */\nangular.module('app.accounts').config(accountConfig);\n\naccountConfig.$inject = ['$stateProvider'];\nfunction accountConfig ($stateProvider) {\n    $stateProvider.state('base.accounts.create', {\n        url: '/create',\n        views: {\n            '@': {\n                templateUrl: '/accounts/create/',\n                controller: 'AccountUpsertController'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Create'\n        }\n    });\n\n    $stateProvider.state('base.accounts.detail.edit', {\n        url: '/edit',\n        views: {\n            '@': {\n                templateUrl: function(elem) {\n                    return '/accounts/' + elem.id + '/edit/';\n                },\n                controller: 'AccountUpsertController'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Edit'\n        }\n    });\n}\n\n/**\n * Controller for update and new Account actions.\n */\nangular.module('app.accounts').controller('AccountUpsertController', AccountUpsertController);\n\nAccountUpsertController.$inject = ['$scope', '$stateParams', 'AccountDetail'];\nfunction AccountUpsertController ($scope, $stateParams, AccountDetail) {\n    var id = $stateParams.id;\n    // New Account; set title.\n    if(!id) {\n        $scope.conf.pageTitleBig = 'New Account';\n        $scope.conf.pageTitleSmall = 'change is natural';\n    } else {\n        // Existing Account; Get details from ES and set title.\n        var accountPromise = AccountDetail.get({id: id}).$promise;\n        accountPromise.then(function(account) {\n            $scope.account = account;\n            $scope.conf.pageTitleBig = account.name;\n            $scope.conf.pageTitleSmall = 'change is natural';\n            HLSelect2.init();\n        });\n    }\n    HLDataProvider.init();\n    HLFormsets.init();\n}\n","/**\n * Account detail widget\n */\nangular.module('app.accounts.directives').directive('accountDetailWidget', AccountDetailWidget);\n\nfunction AccountDetailWidget() {\n    return {\n        restrict: 'E',\n        replace: true,\n        scope: {\n            account: '=',\n            height: '='\n        },\n        templateUrl: 'accounts/directives/detail_widget.html'\n    }\n}\n","angular.module('app.accounts.services').factory('Account', Account);\n\nAccount.$inject = ['$filter', '$http', '$resource'];\nfunction Account ($filter, $http, $resource) {\n    var Account = $resource(\n        '/api/accounts/account/:id',\n        null,\n        {\n            update: {\n                method: 'PUT',\n                params: {\n                    id: '@id'\n                }\n            },\n            delete:  {\n                method: 'DELETE'\n            }\n        });\n\n    Account.getAccounts = getAccounts;\n    Account.prototype.getEmailAddress = getEmailAddress;\n\n    //////\n\n    /**\n     * getAccounts() gets the accounts from the search backend through a promise\n     *\n     * @param queryString string: current filter on the accountlist\n     * @param page int: current page of pagination\n     * @param pageSize int: current page size of pagination\n     * @param orderColumn string: current sorting of accounts\n     * @param orderedAsc {boolean}: current ordering\n     *\n     * @returns Promise object: when promise is completed:\n     *      {\n     *          accounts list: paginated account objects\n     *          total int: total number of account objects\n     *      }\n     */\n    function getAccounts (queryString, page, pageSize, orderColumn, orderedAsc) {\n\n        var sort = '';\n        if (orderedAsc) sort += '-';\n        sort += orderColumn;\n\n        return $http({\n            url: '/search/search/',\n            method: 'GET',\n            params: {\n                type: 'accounts_account',\n                q: queryString,\n                page: page - 1,\n                size: pageSize,\n                sort: sort\n            }\n        })\n            .then(function(response) {\n                return {\n                    accounts: response.data.hits,\n                    total: response.data.total\n                };\n            });\n    }\n\n    function getEmailAddress() {\n        var account = this;\n\n        var primaryEmails = $filter('filter')(account.email_addresses, {status: 2});\n\n        if (primaryEmails.length) {\n            return primaryEmails[0];\n        } else if (account.email_addresses.length) {\n            return account.email_addresses[0];\n        }\n    }\n    return Account;\n}\n","angular.module('app.accounts.services').factory('AccountDetail', AccountDetail);\n\nAccountDetail.$inject = ['$resource'];\nfunction AccountDetail ($resource) {\n    function getPhone(account) {\n        if (account.phone_mobile) return account.phone_mobile[0];\n        if (account.phone_work) return account.phone_work[0];\n        if (account.phone_other) return account.phone_other[0];\n        return '';\n    }\n    function getPhones(account) {\n        var phones = [];\n        if (account.phone_mobile) phones = phones.concat(account.phone_mobile);\n        if (account.phone_work) phones = phones.concat(account.phone_work);\n        if (account.phone_other) phones = phones.concat(account.phone_other);\n        return phones;\n    }\n    return $resource(\n        '/search/search/?type=accounts_account&filterquery=id\\::id',\n        {},\n        {\n            get: {\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    if (data && data.hits && data.hits.length > 0) {\n                        var account = data.hits[0];\n                        account.phone = getPhone(account);\n                        account.phones = getPhones(account);\n                        return account;\n                    }\n                    return null;\n                }\n            }\n        }\n    );\n}\n","angular.module('app.base').config(appConfig);\n\nappConfig.$inject = ['$stateProvider'];\nfunction appConfig ($stateProvider) {\n    $stateProvider.state('base', {\n        abstract: true,\n        controller: BaseController,\n        ncyBreadcrumb: {\n            label: 'Lily'\n        }\n    });\n}\n\nangular.module('app.base').controller('BaseController', BaseController);\n\nBaseController.$inject = ['$scope', '$state', 'Notifications'];\nfunction BaseController ($scope, $state, Notifications) {\n    $scope.conf = {\n        headTitle: 'Welcome!',\n        pageTitleBig: 'HelloLily',\n        pageTitleSmall: 'welcome to my humble abode!'\n    };\n\n    $scope.loadNotifications = loadNotifications;\n\n    activate();\n\n    //////////\n\n    function activate(){\n        $scope.$on('$stateChangeSuccess', _setPreviousState);\n        $scope.$on('$viewContentLoaded', _contentLoadedActions);\n    }\n\n    function loadNotifications() {\n        Notifications.query(function(notifications) {  // On success\n            angular.forEach(notifications, function(message) {\n                toastr[message.level](message.message);\n            });\n        }, function(error) {  // On error\n            console.log('error!');\n            console.log(error);\n        })\n    }\n\n    function _contentLoadedActions() {\n        Metronic.initComponents(); // init core components\n        HLSelect2.init();\n        HLFormsets.init();\n        HLShowAndHide.init();\n        autosize($('textarea'));\n\n        $scope.loadNotifications();\n    }\n\n    function _setPreviousState(event, toState, toParams, fromState, fromParams){\n        $scope.previousState = $state.href(fromState, fromParams);\n    }\n}\n","angular.module('app.base').controller('headerController', headerController);\n\nheaderController.$inject = ['$scope'];\nfunction headerController ($scope) {\n    $scope.$on('$includeContentLoaded', function() {\n        Layout.initHeader(); // init header\n    });\n}\n","angular.module('app.base').controller('sidebarController', sidebarController);\n\nsidebarController.$inject = ['$scope'];\nfunction sidebarController ($scope) {\n    $scope.$on('$includeContentLoaded', function() {\n        Layout.initSidebar(); // init sidebar\n    });\n}\n","/**\n * checkbox Directive makes a nice uniform checkbox and binds to a model\n *\n * @param model object: model to bind checkbox with\n *\n * Example:\n * <checkbox model=\"table.visibility.name\">Name</checkbox>\n */\nangular.module('app.directives').directive('checkbox', checkbox);\n\nfunction checkbox () {\n    return {\n        restrict: 'E',\n        replace: true,\n        transclude: true,\n        scope: {\n            model: '='\n        },\n        templateUrl: 'base/directives/checkbox.html'\n    }\n}\n","/**\n * Directive give a nice formatting on input elements.\n *\n * It makes sure that the value of the ngModel on the scope has a nice\n * formatting for the user\n */\nangular.module('app.directives').directive('dateFormatter', dateFormatter);\n\ndateFormatter.$inject = ['dateFilter'];\nfunction dateFormatter(dateFilter) {\n    return {\n        restrict: 'A',\n        require: 'ngModel',\n        link: function(scope, element, attrs, ngModel) {\n            ngModel.$formatters.push(function(value) {\n                if (value) {\n                    return dateFilter(value, attrs.dateFormatter);\n                }\n            })\n        }\n    }\n}\n","/**\n * Directive for a confirmation box before the delete in the detail\n * view happens\n */\nangular.module('app.directives').directive('detailDelete', detailDelete);\n\ndetailDelete.$inject = ['$state'];\nfunction detailDelete ($state) {\n    return {\n        restrict: 'A',\n        link: function (scope, elem, attrs) {\n\n            $(elem).click(function () {\n                if (confirm('You are deleting! Are you sure ?')) {\n                    $state.go('.delete');\n                }\n            });\n        }\n    }\n}\n","angular.module('app.directives').directive('resizeIframe', resizeIframe);\n\nfunction resizeIframe () {\n    return {\n        restrict: 'A',\n        link: function ($scope, element, attrs) {\n            var maxHeight = $('body').outerHeight();\n            element.on('load', function() {\n                element.removeClass('hidden');\n\n                // do this after .inbox-view is visible\n                var ifDoc, ifRef = this;\n\n                // set ifDoc to 'document' from frame\n                try {\n                    ifDoc = ifRef.contentWindow.document.documentElement;\n                } catch (e1) {\n                    try {\n                        ifDoc = ifRef.contentDocument.documentElement;\n                    } catch (e2) {\n                    }\n                }\n\n                // calculate and set max height for frame\n                if (ifDoc) {\n                    var subtractHeights = [\n                        element.offset().top,\n                        $('.footer').outerHeight(),\n                        $('.inbox-attached').outerHeight()\n                    ];\n                    for (var height in subtractHeights) {\n                        maxHeight = maxHeight - height;\n                    }\n\n                    if (ifDoc.scrollHeight > maxHeight) {\n                        ifRef.height = maxHeight;\n                    } else {\n                        ifRef.height = ifDoc.scrollHeight;\n                    }\n                }\n            });\n        }\n    }\n}\n","/**\n * sortColumn Directive adds sorting classes to an DOM element based on `table` object\n *\n * It makes the element clickable and sets the table sorting based on that element\n *\n * @param sortColumn string: name of the column to sort on when clicked\n * @param table object: The object to bind sort column and ordering\n *\n * Example:\n *\n * <th sort-column=\"last_name\" table=\"table\">Name</th>\n *\n * Possible classes:\n * - sorting: Unsorted\n * - sorting_asc: Sorted ascending\n * - sorting_desc: Sorted descending\n */\nangular.module('app.directives').directive('sortColumn', sortColumn);\n\nfunction sortColumn () {\n    /**\n     * _setSortableIcon() removes current sorting classes and adds new based on current\n     * sorting column and direction\n     *\n     * @param $scope object: current scope\n     * @param element object: current DOM element\n     * @param sortColumn string: column from current DOM element\n     */\n    var _setSortableIcon = function($scope, element, sortColumn) {\n        // Add classes based on current sorted column\n        if($scope.table.order.column === sortColumn) {\n            if ($scope.table.order.ascending) {\n                $scope.sorted = 1;\n            } else {\n                $scope.sorted = -1;\n            }\n        } else {\n            $scope.sorted = 0;\n        }\n    };\n\n    return {\n        restrict: 'A',\n        scope: {\n            table: '='\n        },\n        transclude: true,\n        templateUrl: 'base/directives/sort_column.html',\n        link: function ($scope, element, attrs) {\n            // Watch the table ordering & sorting\n            $scope.$watchCollection('table.order', function() {\n                _setSortableIcon($scope, element, attrs.sortColumn);\n            });\n\n            // When element is clicked, set the table ordering & sorting based on this DOM element\n            element.on('click', function() {\n                if($scope.table.order.column === attrs.sortColumn) {\n                    $scope.table.order.ascending = !$scope.table.order.ascending;\n                    $scope.$apply();\n                } else {\n                    $scope.table.order.column = attrs.sortColumn;\n                    $scope.$apply();\n                }\n            });\n        }\n    }\n}\n","angular.module('app.directives').directive('ngSpinnerBar', ngSpinnerBar);\n\nngSpinnerBar.$inject = ['$rootScope'];\nfunction ngSpinnerBar ($rootScope) {\n    return {\n        link: function(scope, element, attrs) {\n            // by defult hide the spinner bar\n            element.addClass('hide'); // hide spinner bar by default\n\n            // display the spinner bar whenever the route changes(the content part started loading)\n            $rootScope.$on('$stateChangeStart', function() {\n                element.removeClass('hide'); // show spinner bar\n            });\n\n            // hide the spinner bar on rounte change success(after the content loaded)\n            $rootScope.$on('$stateChangeSuccess', function() {\n                element.addClass('hide'); // hide spinner bar\n                $('body').removeClass('page-on-load'); // remove page loading indicator\n\n                // auto scroll to page top\n                setTimeout(function () {\n                    Metronic.scrollTop(); // scroll to the top on content load\n                }, $rootScope.settings.layout.pageAutoScrollOnLoad);\n            });\n\n            // handle errors\n            $rootScope.$on('$stateNotFound', function() {\n                element.addClass('hide'); // hide spinner bar\n            });\n\n            // handle errors\n            $rootScope.$on('$stateChangeError', function() {\n                element.addClass('hide'); // hide spinner bar\n            });\n        }\n    };\n}\n","angular.module('app.filters').filter('minValue', minValue);\nfunction minValue () {\n    return function(values) {\n        values.sort(function(a, b){return a-b});\n        return values[0];\n    }\n}\n","angular.module('app.filters').filter('nl2br', nl2br);\n\nnl2br.$inject = ['$sce'];\nfunction nl2br ($sce) {\n    return function(msg,is_xhtml) {\n        var is_xhtml = is_xhtml || true;\n        var breakTag = (is_xhtml) ? '<br />' : '<br>';\n        var msg = (msg + '').replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1'+ breakTag +'$2');\n        return $sce.trustAsHtml(msg);\n    }\n}\n","/**\n * relativeDate filter is a filter that represents the date in a nice format\n *\n * relativeDate will return a relative date string given the date. If the\n * date is to far in the past, it will fallback to angulars $filter\n *\n * @param: date {date|string} : date object or date string to transform\n * @param: fallbackDateFormat string (optional): fallback $filter argument\n * @param: compareWithMidnight boolean (optional): should the date comparison be with midnight or not\n *\n * @returns: string : a relative date string\n *\n * usage:\n *\n * {{ '2014-11-19T12:44:15.795312+00:00' | relativeDate }}\n */\nangular.module('app.filters').filter('relativeDate', relativeDate);\n\nrelativeDate.$inject = ['$filter'];\nfunction relativeDate ($filter) {\n    return function (date, fallbackDateFormat, compareWithMidnight) {\n        // Get current date\n        var now = new Date(),\n            calculateDelta, day, delta, hour, minute, week, month, year;\n\n        // If date is a string, format to date object\n        if (!(date instanceof Date)) {\n            date = new Date(date);\n            if (compareWithMidnight) {\n                // In certain cases we want to compare with midnight\n                date.setHours(23);\n                date.setMinutes(59);\n                date.setSeconds(59);\n            }\n        }\n\n        delta = null;\n        minute = 60;\n        hour = minute * 60;\n        day = hour * 24;\n        week = day * 7;\n        month = day * 30;\n        year = day * 365;\n\n        // Calculate delta in seconds\n        calculateDelta = function () {\n            return delta = Math.round((date - now) / 1000);\n        };\n\n        calculateDelta();\n\n        if (delta > day && delta < week) {\n            date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n            if (compareWithMidnight) {\n                // In certain cases we want to compare with midnight\n                date.setHours(23);\n                date.setMinutes(59);\n                date.setSeconds(59);\n            }\n            calculateDelta();\n        }\n\n        if (!fallbackDateFormat) {\n            if (window.innerWidth < 992) {\n                // Display as a short version if it's a small screen (tablet, smartphone, etc.)\n                fallbackDateFormat = 'dd MMM. yyyy'; // Renders as 29 Jan. 2015\n            }\n            else {\n                fallbackDateFormat = 'dd MMMM yyyy'; // Renders as 29 January 2015\n            }\n        }\n\n        // Check delta and return result\n        if (delta < 0) {\n            switch (false) {\n                case !(-delta > week):\n                    return $filter('date')(date, fallbackDateFormat);\n                case !(-delta > day * 2):\n                    return '' + -(Math.ceil(delta / day)) + ' days ago';\n                case !(-delta > day):\n                    return 'yesterday';\n                case !(-delta > hour):\n                    return '' + -(Math.ceil(delta / hour)) + ' hours ago';\n                case !(-delta > minute * 2):\n                    return '' + -(Math.ceil(delta / minute)) + ' minutes ago';\n                case !(-delta > minute):\n                    return 'a minutes ago';\n                case !(-delta > 30):\n                    return '' + -delta + ' seconds ago';\n                default:\n                    return 'just now';\n            }\n        } else {\n            switch (false) {\n                case !(delta < 30):\n                    return 'just now';\n                case !(delta < minute):\n                    return '' + delta + ' seconds';\n                case !(delta < 2 * minute):\n                    return 'a minute';\n                case !(delta < hour):\n                    return '' + (Math.floor(delta / minute)) + ' minutes';\n                case Math.floor(delta / hour) !== 1:\n                    return 'an hour';\n                case !(delta < day):\n                    return '' + (Math.floor(delta / hour)) + ' hours';\n                case !(delta < day * 2):\n                    return 'tomorrow';\n                case !(delta < week):\n                    return '' + (Math.floor(delta / day)) + ' days';\n                case Math.floor(delta / week) !== 1:\n                    return 'a week';\n                default:\n                    // Use angular $filter\n                    return $filter('date')(date, fallbackDateFormat);\n            }\n        }\n    }\n}\n","angular.module('app.filters').filter('trustAsResourceUrl', trustAsResourceUrl);\n\ntrustAsResourceUrl.$inject = ['$sce'];\nfunction trustAsResourceUrl ($sce) {\n    return function(val) {\n        return $sce.trustAsResourceUrl(val);\n    };\n}\n","/**\n * Cookie Service provides a simple interface to get and store cookie values\n *\n * Set `prefix` to give cookie keys a prefix\n */\nangular.module('app.services').service('Cookie', Cookie);\n\nCookie.$inject = ['$cookieStore'];\nfunction Cookie ($cookieStore) {\n    function CookieFactory (prefix) {\n        return new Cookie(prefix);\n    }\n\n    function Cookie(prefix) {\n        this.prefix = prefix;\n    }\n\n    /**\n     * getCookieValue() tries to retrieve a value from the cookie, or returns default value\n     *\n     * @param field string: key to retrieve info from\n     * @param defaultValue {*}: default value when nothing set on cache\n     * @returns {*}: retrieved or default value\n     */\n    Cookie.prototype.get = function (field, defaultValue) {\n        try {\n            var value = $cookieStore.get(this.prefix + field);\n            return (value !== undefined) ? value : defaultValue;\n        } catch (error) {\n            $cookieStore.remove(this.prefix + field);\n            return defaultValue;\n        }\n    };\n\n    /**\n     * setCookieValue() sets value on the cookie\n     *\n     * It prefixes the field to make field unique for this controller\n     *\n     * @param field string: the key on which to store the value\n     * @param value {*}: JSON serializable object to store\n     */\n    Cookie.prototype.put = function (field, value) {\n        $cookieStore.put(this.prefix + field, value);\n    };\n\n    return CookieFactory;\n}\n","angular.module('app.services').service('HLDate', HLDate);\n\nfunction HLDate () {\n    /**\n     * getSubtractedDate() subtracts x amount of days from the current date\n     *\n     * @param days (int): amount of days to subtract from the current date\n     *\n     * @returns (string): returns the subtracted date in a yyyy-mm-dd format\n     */\n    this.getSubtractedDate = function (days) {\n        var date = new Date();\n        date.setDate(date.getDate() - days);\n\n        return date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();\n    };\n}\n","angular.module('app.services').service('HLFilters', HLFilters);\n\nfunction HLFilters () {\n    this.updateFilterQuery = function ($scope) {\n        $scope.table.filterQuery = '';\n        $scope.displayFilterClear = false;\n        var filterStrings = [];\n\n        for (var i = 0; i < $scope.filterList.length; i++) {\n            var filter = $scope.filterList[i];\n            if (filter.id && filter.id == 'archived') {\n                if (!filter.selected) {\n                    filterStrings.push('archived:false');\n                }\n                else {\n                    $scope.displayFilterClear = true;\n                }\n            }\n            else {\n                if (filter.selected) {\n                    filterStrings.push(filter.value);\n                    $scope.displayFilterClear = true;\n                }\n            }\n        }\n\n        $scope.table.filterQuery = filterStrings.join(' AND ');\n    };\n\n    this.clearFilters = function ($scope) {\n        for (var i = 0; i < $scope.filterList.length; i++) {\n            $scope.filterList[i].selected = false;\n        }\n\n        $scope.updateFilterQuery();\n    };\n}\n","angular.module('app.services').service('HLText', HLText);\nfunction HLText () {\n    /**\n     * hlCapitalize() lowercases the whole string and makes the first character uppercase\n     * This means 'STRING' becomes 'String'\n     *\n     * @returns (string): returns a string with only the first character uppercased\n     */\n    String.prototype.hlCapitalize = function () {\n        var newString = this.toLowerCase();\n        return newString.charAt(0).toUpperCase() + newString.substring(1);\n    }\n}\n","angular.module('app.services').factory('Notifications', Notifications);\n\nNotifications.$inject = ['$resource'];\n\nfunction Notifications ($resource) {\n    return $resource('/api/utils/notifications/');\n}\n","angular.module('app.cases').controller('CaseAssignModal', CaseAssignModal);\n\nCaseAssignModal.$inject = ['$modalInstance', 'myCase', 'Case', 'User'];\nfunction CaseAssignModal ($modalInstance, myCase, Case, User) {\n    var vm = this;\n    vm.myCase = myCase;\n    vm.currentAssigneeId = myCase.assigned_to_id;\n    vm.users = [];\n\n    vm.ok = ok;\n    vm.cancel = cancel;\n\n    activate();\n\n    ////\n\n    function activate() {\n        _getUsers();\n    }\n\n    function _getUsers() {\n        User.query({}, function(data) {\n            vm.users = data;\n        });\n    }\n\n    function ok () {\n        // Update the assigned_to of the case and close the modal\n        Case.update({id: vm.myCase.id, assigned_to: vm.currentAssigneeId}).$promise.then(function () {\n            $modalInstance.close();\n        });\n    }\n\n    function cancel () {\n        $modalInstance.dismiss('cancel');\n    }\n}\n","angular.module('app.cases').config(caseConfig);\n\ncaseConfig.$inject = ['$stateProvider'];\nfunction caseConfig ($stateProvider) {\n    $stateProvider.state('base.cases.create', {\n        url: '/create',\n        views: {\n            '@': {\n                templateUrl: '/cases/create',\n                controller: CaseCreateController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Create'\n        }\n    });\n    $stateProvider.state('base.cases.create.fromContact', {\n        url: '/contact/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: function(elem, attr) {\n                    return '/cases/create/from_contact/' + elem.id +'/';\n                },\n                controller: CaseCreateController\n            }\n        },\n        ncyBreadcrumb: {\n            skip: true\n        }\n    });\n    $stateProvider.state('base.cases.create.fromAccount', {\n        url: '/account/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: function(elem, attr) {\n                    return '/cases/create/from_account/' + elem.id +'/';\n                },\n                controller: CaseCreateController\n            }\n        },\n        ncyBreadcrumb: {\n            skip: true\n        }\n    });\n}\n\nangular.module('app.cases').controller('CaseCreateController', CaseCreateController);\n\nCaseCreateController.$inject = ['$scope'];\nfunction CaseCreateController ($scope) {\n    $scope.conf.pageTitleBig = 'New case';\n    $scope.conf.pageTitleSmall = 'making cases';\n    HLCases.addAssignToMeButton();\n    HLSelect2.init();\n}\n","angular.module('app.cases').config(caseConfig);\n\ncaseConfig.$inject = ['$stateProvider'];\nfunction caseConfig ($stateProvider) {\n    $stateProvider.state('base.cases.detail.delete', {\n        url: '/delete',\n        views: {\n            '@': {\n                controller: CaseDeleteController\n            }\n        }\n    });\n\n}\n\nangular.module('app.cases').controller('CaseDeleteController', CaseDeleteController);\n\nCaseDeleteController.$inject = ['$http', '$state', '$stateParams'];\nfunction CaseDeleteController ($http, $state, $stateParams) {\n    var id = $stateParams.id;\n\n    var req = {\n        method: 'POST',\n        url: '/cases/delete/' + id + '/',\n        headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n    };\n\n    $http(req).\n        success(function(data, status, headers, config) {\n            $state.go('base.cases');\n        }).\n        error(function(data, status, headers, config) {\n            $state.go('base.cases');\n        });\n}\n","angular.module('app.cases').config(caseConfig);\n\ncaseConfig.$inject = ['$stateProvider'];\nfunction caseConfig ($stateProvider) {\n    $stateProvider.state('base.cases.detail', {\n        url: '/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: 'cases/controllers/detail.html',\n                controller: CaseDetailController,\n                controllerAs: 'vm'\n            }\n        },\n        ncyBreadcrumb: {\n            label: '{{ case.subject }}'\n        }\n    });\n}\n\nangular.module('app.cases').controller('CaseDetailController', CaseDetailController);\n\nCaseDetailController.$inject = ['$http', '$modal', '$scope', '$state', '$stateParams', 'CaseDetail', 'CaseStatuses'];\nfunction CaseDetailController ($http, $modal, $scope, $state, $stateParams, CaseDetail, CaseStatuses) {\n    var vm = this;\n    $scope.conf.pageTitleBig = 'Case';\n    $scope.conf.pageTitleSmall = 'the devil is in the details';\n    var id = $stateParams.id;\n    vm.case = CaseDetail.get({id: id});\n    vm.caseStatuses = CaseStatuses.query();\n\n    vm.getPriorityDisplay = getPriorityDisplay;\n    vm.changeCaseStatus = changeCaseStatus;\n    vm.assignCase = assignCase;\n    vm.archive = archive;\n    vm.unarchive = unarchive;\n    vm.openPostponeWidget = openPostponeWidget;\n\n\n    //////\n\n    /**\n     *\n     * @returns {string}: A string which states what label should be displayed\n     */\n    function getPriorityDisplay () {\n        if (vm.case.is_archived) {\n            return 'label-default';\n        } else {\n            switch (vm.case.priority) {\n                case 0:\n                    return 'label-success';\n                case 1:\n                    return 'label-info';\n                case 2:\n                    return 'label-warning';\n                case 3:\n                    return 'label-danger';\n                default :\n                    return 'label-info';\n            }\n        }\n    }\n\n    function changeCaseStatus (status) {\n        // TODO: LILY-XXX: Temporary call to change status of a case, will be replaced with an new API call later\n        var req = {\n            method: 'POST',\n            url: '/cases/update/status/' + vm.case.id + '/',\n            data: 'status=' + status,\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        $http(req).\n            success(function(data, status, headers, config) {\n                vm.case.status = data.status;\n            }).\n            error(function(data, status, headers, config) {\n                // Request failed proper error?\n            });\n    }\n\n    function assignCase () {\n        var assignee = '';\n\n        if (vm.case.assigned_to_id != currentUser.id) {\n            assignee = currentUser.id;\n        }\n\n        var req = {\n            method: 'POST',\n            url: '/cases/update/assigned_to/' + vm.case.id + '/',\n            data: 'assignee=' + assignee,\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        $http(req).\n            success(function(data, status, headers, config) {\n                if (data.assignee) {\n                    vm.case.assigned_to_id = data.assignee.id;\n                    vm.case.assigned_to_name = data.assignee.name;\n                }\n                else {\n                    vm.case.assigned_to_id = null;\n                    vm.case.assigned_to_name = null;\n                }\n            }).\n            error(function(data, status, headers, config) {\n                // Request failed propper error?\n            });\n    }\n\n    /**\n     * Archive a deal.\n     * TODO: LILY-XXX: Change to API based archiving\n     */\n    function archive (id) {\n        var req = {\n            method: 'POST',\n            url: '/cases/archive/',\n            data: 'id=' + id,\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        $http(req).\n            success(function(data, status, headers, config) {\n                vm.case.archived = true;\n            }).\n            error(function(data, status, headers, config) {\n                // Request failed propper error?\n            });\n    }\n\n    /**\n     * Unarchive a deal.\n     * TODO: LILY-XXX: Change to API based unarchiving\n     */\n    function unarchive (id) {\n        var req = {\n            method: 'POST',\n            url: '/cases/unarchive/',\n            data: 'id=' + id,\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        $http(req).\n            success(function(data, status, headers, config) {\n                vm.case.archived = false;\n            }).\n            error(function(data, status, headers, config) {\n                // Request failed propper error?\n            });\n    }\n\n    function openPostponeWidget (myCase) {\n        var modalInstance = $modal.open({\n            templateUrl: 'cases/controllers/postpone.html',\n            controller: 'CasePostponeModal',\n            controllerAs: 'vm',\n            size: 'sm',\n            resolve: {\n                myCase: function() {\n                    return myCase\n                }\n            }\n        });\n\n        modalInstance.result.then(function() {\n            $state.go($state.current, {}, {reload: true});\n        });\n    }\n}\n","angular.module('app.cases').config(caseConfig);\n\ncaseConfig.$inject = ['$stateProvider'];\nfunction caseConfig ($stateProvider) {\n    $stateProvider.state('base.cases.detail.edit', {\n        url: '/edit',\n        views: {\n            '@': {\n                templateUrl: function (elem, attr) {\n                    return '/cases/update/' + elem.id + '/';\n                },\n                controller: CaseEditController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Edit'\n        }\n    });\n}\n\nangular.module('app.cases').controller('CaseEditController', CaseEditController);\n\nCaseEditController.$inject = ['$scope', '$stateParams', 'CaseDetail'];\nfunction CaseEditController ($scope, $stateParams, CaseDetail) {\n    var id = $stateParams.id;\n    var casePromise = CaseDetail.get({id: id}).$promise;\n\n    casePromise.then(function(caseObject) {\n        $scope.case = caseObject;\n        $scope.conf.pageTitleBig = caseObject.subject;\n        $scope.conf.pageTitleSmall = 'change is natural';\n        HLSelect2.init();\n    });\n}\n","angular.module('app.cases').config(caseConfig);\n\ncaseConfig.$inject = ['$stateProvider'];\nfunction caseConfig ($stateProvider) {\n    $stateProvider.state('base.cases', {\n        url: '/cases',\n        views: {\n            '@': {\n                templateUrl: 'cases/controllers/list.html',\n                controller: CaseListController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Cases'\n        }\n    });\n}\n\nangular.module('app.cases').controller('CaseListController', CaseListController);\n\nCaseListController.$inject = ['$http', '$location', '$modal', '$scope', '$state', 'Case', 'Cookie', 'HLDate', 'HLFilters'];\nfunction CaseListController ($http, $location, $modal, $scope, $state, Case, Cookie, HLDate, HLFilters) {\n    var cookie = Cookie('caseList');\n\n    $scope.conf.pageTitleBig = 'Cases';\n    $scope.conf.pageTitleSmall = 'do all your lookin\\' here';\n\n    // Setup search query\n    var searchQuery = '';\n\n    // Check if filter is set as query parameter\n    var search = $location.search().search;\n    if (search != undefined) {\n        searchQuery = search;\n    } else {\n        // Get searchQuery from cookie\n        searchQuery = cookie.get('searchQuery', '');\n    }\n\n    /**\n     * table object: stores all the information to correctly display the table\n     */\n    $scope.table = {\n        page: 1,  // current page of pagination: 1-index\n        pageSize: 60,  // number of items per page\n        totalItems: 0, // total number of items\n        searchQuery: searchQuery,  // search query\n        archived: cookie.get('archived', false),\n        order: cookie.get('order', {\n            ascending: true,\n            column: 'expires'  // string: current sorted column\n        }),\n        visibility: cookie.get('visibility', {\n            caseId: true,\n            client: true,\n            subject: true,\n            priority: true,\n            type: true,\n            status: true,\n            expires: true,\n            assignedTo: true,\n            createdBy: true,\n            tags: true\n        })\n    };\n\n    $scope.displayFilterClear = false;\n\n    getFilterList();\n\n    /**\n     * Gets the filter list. Is either the value in the cookie or a new list\n     *\n     * @returns filterList (object): object containing the filter list\n     */\n    function getFilterList() {\n        var filterListCookie = cookie.get('filterList', null);\n\n        if (!filterListCookie) {\n            var filterList = [\n                {\n                    name: 'Assigned to me',\n                    value: 'assigned_to_id:' + $scope.currentUser.id,\n                    selected: false\n                },\n                {\n                    name: 'Assigned to nobody',\n                    value: 'NOT(assigned_to_id:*)',\n                    selected: false\n                },\n                {\n                    name: 'Expired 7 days or more ago',\n                    value: 'expires:[* TO ' + HLDate.getSubtractedDate(7) + ']',\n                    selected: false\n                },\n                {\n                    name: 'Expired 30 days or more ago',\n                    value: 'expires:[* TO ' + HLDate.getSubtractedDate(30) + ']',\n                    selected: false\n                },\n                {\n                    name: 'Archived',\n                    value: '',\n                    selected: false,\n                    id: 'archived'\n                }\n            ];\n\n            // Update filterList for now\n            $scope.filterList = filterList;\n\n            Case.getCaseTypes().then(function (cases) {\n                for (var key in cases) {\n                    if (cases.hasOwnProperty(key)) {\n                        filterList.push({\n                            name: 'Case type ' + cases[key],\n                            value: 'casetype_id:' + key,\n                            selected: false\n                        });\n                    }\n                }\n\n                // Update filterList once AJAX call is done\n                $scope.filterList = filterList;\n                // Watch doesn't get triggered here, so manually call updateTableSettings\n                updateTableSettings();\n            });\n        } else {\n            // Cookie is set, so use it as the filterList\n            $scope.filterList = filterListCookie;\n        }\n    }\n\n    /**\n     * updateTableSettings() sets scope variables to the cookie\n     */\n    function updateTableSettings() {\n        cookie.put('searchQuery', $scope.table.searchQuery);\n        cookie.put('archived', $scope.table.archived);\n        cookie.put('order', $scope.table.order);\n        cookie.put('visibility', $scope.table.visibility);\n        cookie.put('filterList', $scope.filterList);\n    }\n\n    /**\n     * updateCases() reloads the cases through a service\n     *\n     * Updates table.items and table.totalItems\n     */\n    function updateCases() {\n        Case.getCases(\n            $scope.table.searchQuery,\n            $scope.table.page,\n            $scope.table.pageSize,\n            $scope.table.order.column,\n            $scope.table.order.ascending,\n            $scope.table.archived,\n            $scope.table.filterQuery\n        ).then(function (data) {\n                $scope.table.items = data.cases;\n                $scope.table.totalItems = data.total;\n            }\n        );\n    }\n\n    /**\n     * Watches the model info from the table that, when changed,\n     * needs a new set of cases\n     */\n    $scope.$watchGroup([\n        'table.page',\n        'table.order.column',\n        'table.order.ascending',\n        'table.searchQuery',\n        'table.archived',\n        'table.filterQuery'\n    ], function () {\n        updateTableSettings();\n        updateCases();\n    });\n\n    /**\n     * Watches the model info from the table that, when changed,\n     * needs to store the info to the cache\n     */\n    $scope.$watchCollection('table.visibility', function () {\n        updateTableSettings();\n    });\n\n    /**\n     * Watches the filters so when the cookie is loaded,\n     * the filterQuery changes and a new set of deals is fetched\n     */\n    $scope.$watchCollection('filterList', function () {\n        $scope.updateFilterQuery();\n    });\n\n    /**\n     * setSearchQuery() sets the search query of the table\n     *\n     * @param queryString string: string that will be set as the new search query on the table\n     */\n    $scope.setSearchQuery = function (queryString) {\n        $scope.table.searchQuery = queryString;\n    };\n\n    $scope.toggleArchived = function () {\n        $scope.table.archived = !$scope.table.archived;\n    };\n\n    $scope.updateFilterQuery = function () {\n        HLFilters.updateFilterQuery($scope);\n    };\n\n    $scope.clearFilters = function () {\n        HLFilters.clearFilters($scope);\n    };\n\n    /**\n     * Deletes the case in django and updates the angular view\n     */\n    $scope.delete = function(id, subject, cases) {\n        var req = {\n            method: 'POST',\n            url: '/cases/delete/' + id + '/',\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        if(confirm('Are you sure you want to delete case ' + subject + '?')){\n            $http(req).\n                success(function(data, status, headers, config) {\n                    var index = $scope.table.items.indexOf(cases);\n                    $scope.table.items.splice(index, 1);\n                }).\n                error(function(data, status, headers, config) {\n                    // Request failed proper error?\n                });\n        }\n    };\n\n    $scope.assignTo = function(myCase) {\n        var modalInstance = $modal.open({\n            templateUrl: 'cases/controllers/assignto.html',\n            controller: 'CaseAssignModal',\n            controllerAs: 'vm',\n            size: 'sm',\n            resolve: {\n                myCase: function() {\n                    return myCase;\n                }\n            }\n        });\n\n        modalInstance.result.then(function() {\n            $state.go($state.current, {}, {reload: true});\n        });\n    };\n}\n","angular.module('app.cases').controller('CasePostponeModal', CasePostponeModal);\n\nCasePostponeModal.$inject = ['$filter', '$modalInstance', '$scope', 'Case', 'myCase'];\nfunction CasePostponeModal ($filter, $modalInstance, $scope, Case, myCase) {\n    var vm = this;\n    vm.myCase = myCase;\n    vm.pickerIsOpen = false;\n    vm.expireDate = new Date(myCase.expires);\n    vm.dateFormat = 'dd MMMM yyyy';\n    vm.datepickerOptions = {\n        startingDay: 1\n    };\n\n    vm.disabledDates = disabledDates;\n    vm.openDatePicker = openDatePicker;\n    vm.postponeWithDays = postponeWithDays;\n    vm.getFutureDate = getFutureDate;\n\n    activate();\n\n    ////\n\n    function activate() {\n        _watchCloseDatePicker();\n    }\n\n    /**\n     * When the datepicker popup is closed, update model and close modal\n     *\n     * @private\n     */\n    function _watchCloseDatePicker () {\n        $scope.$watch('vm.pickerIsOpen', function(newValue, oldValue) {\n            if (!newValue && oldValue) {\n                _updateDayAndCloseModal();\n            }\n        });\n    }\n\n    function _updateDayAndCloseModal() {\n        if (vm.expireDate != new Date(myCase.expires)) {\n            // Update the expire date for this case\n            var newDate = $filter('date')(vm.expireDate, 'yyyy-MM-dd');\n            Case.update({id: myCase.id}, {expires: newDate}, function() {\n                $modalInstance.close();\n            })\n        } else {\n            $modalInstance.close();\n        }\n    }\n    function disabledDates (date, mode) {\n        return ( mode === 'day' && ( date.getDay() === 0 || date.getDay() === 6 ) );\n    }\n\n    function openDatePicker ($event) {\n        $event.preventDefault();\n        $event.stopPropagation();\n        vm.pickerIsOpen = true;\n    }\n\n    function postponeWithDays (days) {\n        vm.expireDate.setDate(vm.expireDate.getDate() + days);\n        _updateDayAndCloseModal();\n    }\n\n    function getFutureDate(days) {\n        var futureDate = new Date(vm.expireDate);\n        return futureDate.setDate(futureDate.getDate() + days);\n    }\n}\n","angular.module('app.cases.directives').directive('caseListWidget', CaseListWidget);\nfunction CaseListWidget(){\n    return {\n        restrict: 'E',\n        replace: true,\n        scope: {\n            title: '@',\n            list: '=',\n            height: '=',\n            addLink: '@'\n        },\n        templateUrl: 'cases/directives/list_widget.html'\n    }\n}\n","angular.module('app.cases.directives').directive('updateCaseExpireDate', updateCaseExpireDate);\n\nfunction updateCaseExpireDate () {\n    return {\n        restrict: \"A\",\n        link: function(scope, element, attrs) {\n\n            var select = $('#id_priority');\n            var daysToAdd = [5, 3, 1, 0];\n\n            select.on('change', function(event) {\n                var priority = parseInt(select.val());\n                if(isNaN(select.val())){\n                    priority = 3;\n                }\n                var due = addBusinessDays(new Date(), daysToAdd[priority]);\n                var month = due.getMonth() + 1;\n                if(month < 10){\n                    month = '0' + month;\n                }\n                var expires = due.getDate() + '/' + month + '/' + due.getFullYear();\n                $('#id_expires').val(expires);\n                $('#id_expires_picker').datepicker('update', expires);\n            });\n        }\n    }\n}\n","angular.module('app.cases.services').factory('Case', Case);\n\nCase.$inject = ['$http', '$resource', '$q', 'AccountDetail', 'ContactDetail'];\nfunction Case ($http, $resource, $q, AccountDetail, ContactDetail) {\n\n    var Case = $resource(\n        '/api/cases/case/:id',\n        {},\n        {\n            query: {\n                url: '/search/search/?type=cases_case&filterquery=:filterquery',\n                isArray: true,\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    var objects = [];\n                    if (data && data.hits && data.hits.length > 0) {\n                        data.hits.forEach(function(obj) {\n                            objects.push(obj);\n                        });\n                    }\n                    return objects;\n                }\n            },\n            update: {\n                method: 'PATCH',\n                params: {\n                    id: '@id'\n                }\n            }\n        }\n    );\n\n    Case.getCases = getCases;\n    Case.getCaseTypes = getCaseTypes;\n    Case.getMyCasesWidget = getMyCasesWidget;\n    Case.getCallbackRequests = getCallbackRequests;\n    Case.getUnassignedCasesForTeam = getUnassignedCasesForTeam;\n\n    return Case;\n\n    /////////\n\n    /**\n     * getCases() gets the cases from the search backend through a promise\n     *\n     * @param queryString string: current filter on the caselist\n     * @param page int: current page of pagination\n     * @param pageSize int: current page size of pagination\n     * @param orderColumn string: current sorting of cases\n     * @param orderedAsc {boolean}: current ordering\n     * @param archived {boolean}: when true, only archived are fetched, if false, only active\n     * @param filterQuery {string}: contains the filters which are used in ElasticSearch\n     *\n     * @returns Promise object: when promise is completed:\n     *      {\n     *          cases list: paginated cases objects\n     *          total int: total number of case objects\n     *      }\n     */\n    function getCases (queryString, page, pageSize, orderColumn, orderedAsc, archived, filterQuery) {\n\n        return $http({\n            url: '/search/search/',\n            method: 'GET',\n            params: {\n                type: 'cases_case',\n                q: queryString,\n                page: page - 1,\n                size: pageSize,\n                sort: _getSorting(orderColumn, orderedAsc),\n                filterquery: filterQuery\n            }\n        }).then(function(response) {\n            return {\n                cases: response.data.hits,\n                total: response.data.total\n            };\n        });\n    }\n\n    function getCaseTypes () {\n        return $http({\n            url: '/cases/casetypes/',\n            method: 'GET'\n        }).then(function (response) {\n            return response.data.casetypes;\n        });\n    }\n\n    function _getSorting (field, sorting) {\n        var sort = '';\n        sort += sorting ? '-': '';\n        sort += field;\n        return sort;\n    }\n\n    /**\n     * Service to return a resource for my cases widget\n     */\n    function getMyCasesWidget (field, sorting) {\n        var deferred = $q.defer();\n        var filterQuery = 'archived:false AND NOT casetype_name:Callback';\n        filterQuery += ' AND assigned_to_id:' + currentUser.id;\n        Case.query({\n            filterquery: filterQuery,\n            sort: _getSorting(field, sorting)\n        }, function (cases) {\n            deferred.resolve(cases);\n        });\n\n        return deferred.promise;\n    }\n\n    /**\n     * Gets all cases with the 'callback' case type\n     *\n     * @returns cases with the callback case type\n     */\n    function getCallbackRequests (field, sorting) {\n        var filterQuery = 'archived:false AND casetype_name:Callback';\n        filterQuery += ' AND assigned_to_id:' + currentUser.id;\n\n        var deferred = $q.defer();\n        Case.query({\n            filterquery: filterQuery,\n            sort: _getSorting(field, sorting)\n        }, function (cases) {\n            angular.forEach(cases, function(callbackCase) {\n                if (callbackCase.account) {\n                    AccountDetail.get({id: callbackCase.account}, function(account) {\n                        callbackCase.accountPhone = account.phone;\n                    });\n                }\n                if (callbackCase.contact) {\n                    ContactDetail.get({id: callbackCase.contact}, function(contact) {\n                        callbackCase.contactPhone = contact.phone;\n                    });\n                }\n            });\n            deferred.resolve(cases);\n        });\n        return deferred.promise;\n    }\n\n    function getUnassignedCasesForTeam (teamId, field, sorting) {\n        var filterQuery = 'archived:false AND _missing_:assigned_to_id';\n        filterQuery += ' AND assigned_to_groups:' + teamId;\n\n        return Case.query({\n            filterquery: filterQuery,\n            sort: _getSorting(field, sorting)\n        }).$promise;\n    }\n}\n","/**\n * $resource for Case model, now only used for detail page.\n */\nangular.module('app.cases.services').factory('CaseDetail', CaseDetail);\n\nCaseDetail.$inject = ['$resource'];\nfunction CaseDetail ($resource) {\n    return $resource(\n        '/search/search/?type=cases_case&filterquery=id\\::id',\n        {},\n        {\n            get: {\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    if (data && data.hits && data.hits.length > 0) {\n                        var obj = data.hits[0];\n                        return obj;\n                    }\n                    return null;\n                }\n            },\n            query: {\n                url: '/search/search/?type=cases_case&filterquery=:filterquery',\n                isArray: true,\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    var objects = [];\n                    if (data && data.hits && data.hits.length > 0) {\n                        data.hits.forEach(function(obj) {\n                            obj = $.extend(obj, {historyType: 'case', color: 'grey', date: obj.expires});\n                            objects.push(obj);\n                        });\n                    }\n                    return objects;\n                }\n            },\n            totalize: {\n                url: '/search/search/?type=cases_case&size=0&filterquery=:filterquery',\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    if (data && data.total) {\n                        return {total: data.total};\n                    }\n                    return {total: 0};\n                }\n            }\n        }\n    );\n}\n","angular.module('app.cases.services').factory('CaseStatuses', CaseStatuses);\n\nCaseStatuses.$inject = ['$resource'];\nfunction CaseStatuses ($resource) {\n    return $resource('/api/cases/statuses');\n}\n","angular.module('app.cases.services').factory('UnassignedTeamCases', UnassignedTeamCases);\n\nUnassignedTeamCases.$inject = ['$resource'];\nfunction UnassignedTeamCases ($resource) {\n    return $resource('/api/cases/teams/:teamId/?is_assigned=False&is_archived=false&is_deleted=False')\n}\n","angular.module('app.contacts').config(contactsConfig);\n\ncontactsConfig.$inject = ['$stateProvider'];\nfunction contactsConfig ($stateProvider) {\n    $stateProvider.state('base.contacts.create', {\n        url: '/create',\n        views: {\n            '@': {\n                templateUrl: 'contacts/create/',\n                controller: ContactCreateController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Create'\n        }\n    });\n    $stateProvider.state('base.contacts.create.fromAccount', {\n        url: '/account/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: function(elem, attr){\n                    return '/contacts/add/from_account/' + elem.id + '/';\n                },\n                controller: ContactCreateController\n            }\n        },\n        ncyBreadcrumb:{\n            skip: true\n        }\n    });\n}\n\nangular.module('app.contacts').controller('ContactCreateController', ContactCreateController);\n\nContactCreateController.$inject = ['$scope'];\nfunction ContactCreateController ($scope) {\n    $scope.conf.pageTitleBig = 'New contact';\n    $scope.conf.pageTitleSmall = 'who did you talk to?';\n}\n","angular.module('app.contacts').config(contactsConfig);\n\ncontactsConfig.$inject = ['$stateProvider'];\nfunction contactsConfig ($stateProvider) {\n    $stateProvider.state('base.contacts.detail.delete', {\n        url: '/delete',\n        views: {\n            '@': {\n                controller: ContactDeleteController\n            }\n        }\n    });\n}\n\nangular.module('app.contacts').controller('ContactDeleteController', ContactDeleteController);\n\nContactDeleteController.$inject = ['$state', '$stateParams', 'ContactTest'];\nfunction ContactDeleteController($state, $stateParams, ContactTest) {\n    var id = $stateParams.id;\n\n    ContactTest.delete({\n        id:id\n    }, function() {  // On success\n        $state.go('base.contacts');\n    }, function(error) {  // On error\n        // Error notification needed\n        $state.go('base.contacts');\n    });\n}\n","angular.module('app.contacts').config(contactsConfig);\n\ncontactsConfig.$inject = ['$stateProvider'];\nfunction contactsConfig ($stateProvider) {\n    $stateProvider.state('base.contacts.detail', {\n        url: '/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: 'contacts/controllers/detail.html',\n                controller: 'ContactDetailController'\n            }\n        },\n        ncyBreadcrumb: {\n            label: '{{ contact.name }}'\n        },\n        resolve: {\n            contact: ['ContactDetail', '$stateParams', function (ContactDetail, $stateParams) {\n                var contactId = $stateParams.id;\n                return ContactDetail.get({id: contactId}).$promise\n            }]\n        }\n    });\n}\n\nangular.module('app.contacts').controller('ContactDetailController', ContactDetail);\n\nContactDetail.$inject = ['$scope', '$stateParams', 'ContactDetail', 'CaseDetail', 'contact'];\nfunction ContactDetail($scope, $stateParams, ContactDetail, CaseDetail, contact) {\n    var id = $stateParams.id;\n\n    $scope.contact = contact;\n\n    if ($scope.contact.accounts) {\n        $scope.contact.accounts.forEach(function(account) {\n            var colleagueList = ContactDetail.query({filterquery: 'NOT(id:' + id + ') AND accounts.id:' + account.id});\n            colleagueList.$promise.then(function(colleagues) {\n                account.colleagueList = colleagues;\n            })\n        });\n    }\n\n    $scope.conf.pageTitleBig = 'Contact detail';\n    $scope.conf.pageTitleSmall = 'the devil is in the details';\n\n    $scope.caseList = CaseDetail.query({filterquery: 'contact:' + id});\n    $scope.caseList.$promise.then(function(caseList) {\n        $scope.caseList = caseList;\n    });\n}\n","angular.module('app.contacts').config(contactsConfig);\n\ncontactsConfig.$inject = ['$stateProvider'];\nfunction contactsConfig ($stateProvider) {\n    $stateProvider.state('base.contacts.detail.edit', {\n        url: '/edit',\n        views: {\n            '@': {\n                templateUrl: function(elem, attr) {\n                    return '/contacts/edit/' + elem.id +'/';\n                },\n                controller: ContactEditController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Edit'\n        }\n    });\n}\n\nangular.module('app.contacts').controller('ContactEditController', ContactEditController);\n\nContactEditController.$inject = ['$scope', '$stateParams', 'ContactDetail'];\nfunction ContactEditController ($scope, $stateParams, ContactDetail) {\n    var id = $stateParams.id;\n    var contactPromise = ContactDetail.get({id: id}).$promise;\n\n    contactPromise.then(function(contact) {\n        $scope.contact = contact;\n        $scope.conf.pageTitleBig = contact.name;\n        $scope.conf.pageTitleSmall = 'change is natural';\n        HLSelect2.init();\n    });\n}\n","angular.module('app.contacts').config(contactsConfig);\n\ncontactsConfig.$inject = ['$stateProvider'];\nfunction contactsConfig ($stateProvider) {\n    $stateProvider.state('base.contacts', {\n        url: '/contacts',\n        views: {\n            '@': {\n                templateUrl: 'contacts/controllers/list.html',\n                controller: ContactListController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Contacts'\n        }\n    });\n}\n\nangular.module('app.contacts').controller('ContactListController', ContactListController);\n\nContactListController.$inject = ['$scope', '$window', 'Contact', 'Cookie', 'ContactTest'];\nfunction ContactListController($scope, $window, Contact, Cookie, ContactTest) {\n    var cookie = Cookie('contactList');\n\n    $scope.conf.pageTitleBig = 'Contacts';\n    $scope.conf.pageTitleSmall = 'do all your lookin\\' here';\n\n    /**\n     * table object: stores all the information to correctly display the table\n     */\n    $scope.table = {\n        page: 1,  // current page of pagination: 1-index\n        pageSize: 20,  // number of items per page\n        totalItems: 0, // total number of items\n        filter: cookie.get('filter', ''),  // search filter\n        order:  cookie.get('order', {\n            ascending: true,\n            column:  'modified'  // string: current sorted column\n        }),\n        visibility: cookie.get('visibility', {\n            name: true,\n            contactInformation: true,\n            worksAt: true,\n            created: true,\n            modified: true,\n            tags: true\n        })};\n\n    $scope.deleteContact = function(contact) {\n        if (confirm('Are you sure?')) {\n            ContactTest.delete({\n                id:contact.id\n            }, function() {  // On success\n                var index = $scope.table.items.indexOf(contact);\n                $scope.table.items.splice(index, 1);\n            }, function(error) {  // On error\n                alert('something went wrong.')\n            })\n        }\n    };\n\n    /**\n     * updateTableSettings() sets scope variables to the cookie\n     */\n    function updateTableSettings() {\n        cookie.put('filter', $scope.table.filter);\n        cookie.put('order', $scope.table.order);\n        cookie.put('visibility', $scope.table.visibility);\n    }\n\n    /**\n     * updateContacts() reloads the contacts through a service\n     *\n     * Updates table.items and table.totalItems\n     */\n    function updateContacts() {\n        Contact.query(\n            $scope.table\n        ).then(function(data) {\n                $scope.table.items = data.contacts;\n                $scope.table.totalItems = data.total;\n            }\n        );\n    }\n\n    /**\n     * Watches the model info from the table that, when changed,\n     * needs a new set of contacts\n     */\n    $scope.$watchGroup([\n        'table.page',\n        'table.order.column',\n        'table.order.ascending',\n        'table.filter'\n    ], function() {\n        updateTableSettings();\n        updateContacts();\n    });\n\n    /**\n     * Watches the model info from the table that, when changed,\n     * needs to store the info to the cache\n     */\n    $scope.$watchCollection('table.visibility', function() {\n        updateTableSettings();\n    });\n\n    /**\n     * setFilter() sets the filter of the table\n     *\n     * @param queryString string: string that will be set as the new filter on the table\n     */\n    $scope.setFilter = function(queryString) {\n        $scope.table.filter = queryString;\n    };\n\n    /**\n     * exportToCsv() creates an export link and opens it\n     */\n    $scope.exportToCsv = function() {\n        var getParams = '';\n\n        // If there is a filter, add it\n        if ($scope.table.filter) {\n            getParams += '&export_filter=' + $scope.table.filter;\n        }\n\n        // Add all visible columns\n        angular.forEach($scope.table.visibility, function(value, key) {\n            if (value) {\n                getParams += '&export_columns='+ key;\n            }\n        });\n\n        // Setup url\n        var url = '/contacts/export/';\n        if (getParams) {\n            url += '?' + getParams.substr(1);\n        }\n\n        // Open url\n        $window.open(url);\n    }\n}\n","angular.module('app.contacts.directives').directive('contactDetailWidget', ContactDetailWidget);\n\nfunction ContactDetailWidget() {\n    return {\n        restrict: 'E',\n        replace: true,\n        scope: {\n            contact: '=',\n            height: '='\n        },\n        templateUrl: 'contacts/directives/detail_widget.html'\n    }\n}\n","angular.module('app.contacts.directives').directive('contactListWidget', ContactListWidget);\n\nfunction ContactListWidget() {\n    return {\n        restrict: 'E',\n        replace: true,\n        scope: {\n            title: '@',\n            list: '=',\n            height: '=',\n            accountId: '@',\n            addLink: '@'\n        },\n        templateUrl: 'contacts/directives/list_widget.html'\n    }\n}\n","angular.module('app.contacts.services').factory('ContactDetail', ContactDetail);\n\nContactDetail.$inject = ['$resource'];\nfunction ContactDetail ($resource) {\n    function getPhone(contact) {\n        if (contact.phone_mobile) return contact.phone_mobile[0];\n        if (contact.phone_work) return contact.phone_work[0];\n        if (contact.phone_other) return contact.phone_other[0];\n        return '';\n    }\n\n    function getPhones(contact) {\n        var phones = [];\n        if (contact.phone_mobile) phones = phones.concat(contact.phone_mobile);\n        if (contact.phone_work) phones = phones.concat(contact.phone_work);\n        if (contact.phone_other) phones = phones.concat(contact.phone_other);\n        return phones;\n    }\n\n    return $resource(\n        '/search/search/?type=contacts_contact&filterquery=id\\::id',\n        {},\n        {\n            get: {\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    if (data && data.hits && data.hits.length > 0) {\n                        var contact = data.hits[0];\n                        contact.phones = getPhones(contact);\n                        contact.phone = getPhone(contact);\n                        return contact;\n                    }\n                    return null;\n                }\n            },\n            query: {\n                url: '/search/search/?type=contacts_contact&size=1000&filterquery=:filterquery',\n                isArray: true,\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    var contacts = [];\n                    if (data && data.hits && data.hits.length > 0) {\n                        data.hits.forEach(function (contact) {\n                            contact.phones = getPhones(contact);\n                            contact.phone = getPhone(contact);\n                            contacts.push(contact);\n                        });\n                    }\n                    return contacts;\n                }\n            }\n        }\n    )\n}\n","angular.module('app.contacts.services').factory('Contact', Contact);\n\nContact.$inject = ['$http'];\nfunction Contact ($http) {\n    var Contact = {};\n\n    /**\n     * getContacts() get the contacts from the search backend through a promise\n     *\n     * @param queryString string: current filter on the contactlist\n     * @param page int: current page of pagination\n     * @param pageSize int: current page size of pagination\n     * @param orderColumn string: current sorting of contacts\n     * @param orderedAsc {boolean}: current ordering\n     *\n     * @returns Promise object: when promise is completed:\n     *      {\n     *          contacts list: paginated contact objects\n     *          total int: total number of contact objects\n     *      }\n     */\n    var getContacts = function(queryString, page, pageSize, orderColumn, orderedAsc) {\n\n        var sort = '';\n        if (orderedAsc) sort += '-';\n        sort += orderColumn;\n\n        return $http({\n            url: '/search/search/',\n            method: 'GET',\n            params: {\n                type: 'contacts_contact',\n                q: queryString,\n                page: page - 1,\n                size: pageSize,\n                sort: sort\n            }\n        })\n            .then(function(response) {\n                return {\n                    contacts: response.data.hits,\n                    total: response.data.total\n                };\n            });\n    };\n\n    /**\n     * query() makes it possible to query on contacts on backend search\n     *\n     * @param table object: holds all the info needed to get contacts from backend\n     *\n     * @returns Promise object: when promise is completed:\n     *      {\n     *          contacts list: paginated contact objects\n     *          total int: total number of contact objects\n     *      }\n     */\n    Contact.query = function(table) {\n        return getContacts(table.filter, table.page, table.pageSize, table.order.column, table.order.ascending);\n    };\n\n    return Contact;\n}\n\n","angular.module('app.contacts.services').factory('ContactTest', ContactTest);\n\nContactTest.$inject = ['$resource'];\nfunction ContactTest ($resource) {\n    return $resource('/api/contacts/contact/:id/');\n}\n","angular.module('app.dashboard').config(dashboardConfig);\n\ndashboardConfig.$inject = ['$stateProvider'];\nfunction dashboardConfig ($stateProvider) {\n    $stateProvider.state('base.dashboard', {\n        url: '/',\n        views: {\n            '@': {\n                templateUrl: 'dashboard/controllers/base.html',\n                controller: DashboardController,\n                controllerAs: 'vm'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Dashboard'\n        }\n    });\n}\n\nangular.module('app.dashboard').controller('DashboardController', DashboardController);\n\nDashboardController.$inject = ['$scope'];\nfunction DashboardController ($scope) {\n    $scope.conf.pageTitleBig = 'Dashboard';\n    $scope.conf.pageTitleSmall = 'statistics and usage';\n}\n","angular.module('app.dashboard.directives').directive('callbackRequests', CallbackRequestsDirective);\n\nfunction CallbackRequestsDirective () {\n    return {\n        scope: {},\n        templateUrl: 'dashboard/directives/callback.html',\n        controller: CallbackRequestsController,\n        controllerAs: 'vm'\n    }\n}\n\nCallbackRequestsController.$inject = ['$scope', 'Case', 'Cookie'];\nfunction CallbackRequestsController ($scope, Case, Cookie) {\n    var vm = this;\n    var cookie = Cookie('callbackWidget');\n\n    vm.table = {\n        order: cookie.get('order', {\n            ascending: true,\n            column: 'created'  // string: current sorted column\n        }),\n        items: []\n    };\n\n    activate();\n\n    ///////////\n\n    function activate () {\n        _watchTable();\n    }\n\n    function _getCallbackRequests () {\n        Case.getCallbackRequests(\n            vm.table.order.column,\n            vm.table.order.ascending\n        ).then(function (callbackRequests) {\n            vm.table.items = callbackRequests;\n        });\n    }\n\n    function _watchTable() {\n        $scope.$watchGroup(['vm.table.order.ascending', 'vm.table.order.column'], function() {\n            _getCallbackRequests();\n            cookie.put('order', vm.table.order);\n        })\n    }\n}\n","\nangular.module('app.dashboard.directives').directive('dealsToCheck', dealsToCheckDirective);\n\nfunction dealsToCheckDirective () {\n    return {\n        scope: {},\n        templateUrl: 'dashboard/directives/dealstocheck.html',\n        controller: DealsToCheckController,\n        controllerAs: 'vm'\n    }\n}\n\nDealsToCheckController.$inject = ['$scope', 'Cookie', 'Deal', 'UserTeams'];\nfunction DealsToCheckController ($scope, Cookie, Deal, UserTeams) {\n    var cookie = Cookie('dealsToCheckkWidget');\n    var vm = this;\n    vm.users = [];\n    vm.table = {\n        order: cookie.get('order', {\n            ascending: true,\n            column: 'closing_date'  // string: current sorted column\n        }),\n        items: [],\n        selectedUserId: cookie.get('selectedUserId')\n    };\n    vm.markDealAsChecked = markDealAsChecked;\n    activate();\n\n    ///////////\n\n    function activate () {\n        _watchTable();\n        _getUsers();\n    }\n\n    function _getDealsToCheck () {\n        if (vm.table.selectedUserId) {\n            Deal.getDealsToCheck(\n                vm.table.order.column,\n                vm.table.order.ascending,\n                vm.table.selectedUserId\n            ).then(function (deals) {\n                vm.table.items = deals;\n            });\n        }\n    }\n\n    function _getUsers() {\n        UserTeams.mine(function (teams) {\n            angular.forEach(teams, function (team) {\n                vm.users = vm.users.concat(team.user_set);\n            });\n        });\n    }\n\n    function _watchTable() {\n        $scope.$watchGroup(['vm.table.order.ascending', 'vm.table.order.column', 'vm.table.selectedUserId'], function() {\n            _getDealsToCheck();\n            cookie.put('order', vm.table.order);\n            cookie.put('selectedUserId', vm.table.selectedUserId);\n        })\n    }\n\n    function markDealAsChecked (deal) {\n        deal.markDealAsChecked().then(function() {\n           vm.table.items.splice(vm.table.items.indexOf(deal), 1);\n        });\n    }\n\n}\n","\nangular.module('app.dashboard.directives').directive('feedback', feedbackDirective);\n\nfunction feedbackDirective () {\n    return {\n        scope: {},\n        templateUrl: 'dashboard/directives/feedback.html',\n        controller: FeedbackController,\n        controllerAs: 'vm'\n    }\n}\n\nFeedbackController.$inject = ['$scope', '$state', 'Account', 'Cookie', 'Deal'];\nfunction FeedbackController ($scope, $state, Account, Cookie, Deal) {\n    var cookie = Cookie('feedbackWidget');\n\n    var vm = this;\n    vm.table = {\n        order: cookie.get('order', {\n            ascending: true,\n            column: 'closing_date'  // string: current sorted column\n        }),\n        items: []\n    };\n\n    vm.feedbackFormSentForDeal = feedbackFormSentForDeal;\n    vm.openFeedbackForm = openFeedbackForm;\n\n    activate();\n\n    ///////////\n\n    function activate () {\n        _watchTable();\n    }\n\n    function _getFeedbackDeals () {\n        Deal.getFeedbackDeals(\n            vm.table.order.column,\n            vm.table.order.ascending\n        ).then(function (deals) {\n            vm.table.items = deals;\n        });\n    }\n\n    function feedbackFormSentForDeal (deal) {\n        deal.feedbackFormSent().then(function() {\n           vm.table.items.splice(vm.table.items.indexOf(deal), 1);\n        });\n    }\n\n    function openFeedbackForm (deal) {\n        Account.get({id: deal.account}, function(account) {\n            var emailAddress = account.getEmailAddress();\n            if (emailAddress) {\n                $state.go('base.email.composeEmail', {email: emailAddress.email_address});\n            } else {\n                $state.go('base.email.compose');\n            }\n        });\n    }\n\n    function _watchTable() {\n        $scope.$watchGroup(['vm.table.order.ascending', 'vm.table.order.column'], function() {\n            _getFeedbackDeals();\n            cookie.put('order', vm.table.order);\n        })\n    }\n}\n","angular.module('app.dashboard.directives').directive('followUp', followUpDirective);\n\nfunction followUpDirective (){\n    return {\n        scope: {},\n        templateUrl: 'dashboard/directives/followup.html',\n        controller: FollowUpController,\n        controllerAs: 'vm'\n    }\n}\n\nFollowUpController.$inject = ['$modal', '$scope', 'Deal', 'Cookie'];\nfunction FollowUpController ($modal, $scope, Deal, Cookie){\n\n    var cookie = Cookie('followupWidget');\n\n    var vm = this;\n    vm.table = {\n        order: cookie.get('order', {\n            ascending: true,\n            column: 'created'\n        }),\n        items: []\n    };\n\n    vm.openFollowUpWidgetModal = openFollowUpWidgetModal;\n\n    activate();\n\n    //////\n\n    function activate(){\n        _watchTable();\n    }\n\n    function _getFollowUp(){\n        Deal.getFollowUpWidgetData(\n            vm.table.order.column,\n            vm.table.order.ascending\n        ).then(function (data){\n            vm.table.items = data;\n        });\n    }\n\n    function openFollowUpWidgetModal(followUp){\n        var modalInstance = $modal.open({\n            templateUrl: 'deals/controllers/followup_widget.html',\n            controller: 'FollowUpWidgetModal',\n            controllerAs: 'vm',\n            size: 'md',\n            resolve: {\n                followUp: function(){\n                    return followUp;\n                }\n            }\n        });\n\n        modalInstance.result.then(function() {\n            _getFollowUp();\n        });\n    }\n\n    function _watchTable(){\n        $scope.$watchGroup(['vm.table.order.ascending', 'vm.table.order.column'], function() {\n            _getFollowUp();\n            cookie.put('order', vm.table.order);\n        })\n    }\n}\n","angular.module('app.dashboard.directives').directive('myCases', myCasesDirective);\n\nfunction myCasesDirective () {\n    return {\n        scope: {},\n        templateUrl: 'dashboard/directives/mycases.html',\n        controller: MyCasesController,\n        controllerAs: 'vm'\n    }\n}\n\nMyCasesController.$inject = ['$modal', '$scope', 'Case', 'Cookie'];\nfunction MyCasesController ($modal, $scope, Case, Cookie) {\n    var cookie = Cookie('myCasesWidget');\n\n    var vm = this;\n    vm.table = {\n        order: cookie.get('order', {\n            ascending: true,\n            column: 'expires'  // string: current sorted column\n        }),\n        items: []\n    };\n\n    vm.openPostponeWidget = openPostponeWidget;\n\n    activate();\n\n    /////\n\n    function activate() {\n        _watchTable();\n    }\n\n    function _getMyCases() {\n        Case.getMyCasesWidget(\n            vm.table.order.column,\n            vm.table.order.ascending\n        ).then(function (data) {\n            vm.table.items = data;\n        });\n    }\n\n    function openPostponeWidget(myCase) {\n        var modalInstance = $modal.open({\n            templateUrl: 'cases/controllers/postpone.html',\n            controller: 'CasePostponeModal',\n            controllerAs: 'vm',\n            size: 'sm',\n            resolve: {\n                myCase: function() {\n                    return myCase\n                }\n            }\n        });\n\n        modalInstance.result.then(function() {\n            _getMyCases();\n        });\n    }\n\n    function _watchTable() {\n        $scope.$watchGroup(['vm.table.order.ascending', 'vm.table.order.column'], function() {\n            _getMyCases();\n            cookie.put('order', vm.table.order);\n        })\n    }\n}\n","angular.module('app.dashboard.directives').directive('queueSize', queueSizeDirective);\n\nfunction queueSizeDirective (){\n    return {\n        scope: {},\n        templateUrl: 'dashboard/directives/queuesize.html',\n        controller: QueueSizeController\n    }\n}\n\nQueueSizeController.$inject = ['$filter', '$http', '$interval', '$scope'];\nfunction QueueSizeController ($filter, $http, $interval, $scope) {\n    $scope.show = false;\n    $scope.currentUser = currentUser;\n    if (!currentUser.isSuperUser) return;\n    $scope.labels = [];\n    $scope.series = ['Queue Size'];\n    $scope.data = [[]];\n    $scope.options = {\n        animation: false\n    };\n    $scope.queueName = 'queue1';\n\n    var getQueueInfo = function() {\n        $http.get('/api/utils/queues/' + $scope.queueName + '/').then(function(data){\n            $scope.labels.push($filter('date')(Date.now(), 'H:mm:ss'));\n            $scope.data[0].push(data.data.size);\n            if ($scope.data[0].length > 15) {\n                $scope.data[0].shift();\n                $scope.labels.shift();\n            }\n            $scope.totalSize = data.data.total_messages;\n            $scope.show = true;\n        }, function() {\n            $interval.cancel(stop);\n            $scope.show = false;\n        });\n    };\n    //Fetch again every 10 seconds\n    getQueueInfo();\n    var stop = $interval(getQueueInfo, 10000);\n\n    $scope.$on('$destroy', function() {\n        // Make sure that the interval is destroyed too\n        if (angular.isDefined(stop)) {\n            $interval.cancel(stop);\n            stop = undefined;\n        }\n    });\n}\n","angular.module('app.dashboard.directives').directive('teams', teamsDirective);\n\nfunction teamsDirective () {\n    return {\n        templateUrl: 'dashboard/directives/teams.html',\n        controller: TeamsController,\n        controllerAs: 'vm'\n    }\n}\n\nTeamsController.$inject = ['UserTeams'];\nfunction TeamsController (UserTeams) {\n    var vm = this;\n    vm.teams = [];\n\n    activate();\n\n    /////\n\n    function activate() {\n        _getTeams();\n    }\n\n    function _getTeams() {\n        UserTeams.mine(function(teams) {\n            vm.teams = teams;\n        });\n    }\n}\n","angular.module('app.dashboard.directives').directive('unassignedCases', unassignedCasesDirective);\n\nfunction unassignedCasesDirective () {\n    return {\n        templateUrl: 'dashboard/directives/unassignedcases.html',\n        controller: UnassignedCasesController,\n        controllerAs: 'vm',\n        bindToController: true,\n        scope: {\n            team: '='\n        }\n    }\n}\n\nUnassignedCasesController.$inject = ['$http', '$scope', 'Case', 'Cookie'];\nfunction UnassignedCasesController ($http, $scope, Case, Cookie) {\n    var vm = this;\n    var cookie = Cookie('unassignedCasesForTeam' + vm.team.id + 'Widget');\n\n    vm.table = {\n        order: cookie.get('order', {\n            ascending: true,\n            column: 'id'  // string: current sorted column\n        }),\n        items: []\n    };\n\n    vm.assignToMe = assignToMe;\n\n    activate();\n\n    /////\n\n    function activate() {\n        _watchTable();\n    }\n\n    function _getUnassignedCases() {\n        Case.getUnassignedCasesForTeam(\n            vm.team.id,\n            vm.table.order.column,\n            vm.table.order.ascending\n        ).then(function(cases) {\n            vm.table.items = cases;\n        });\n    }\n\n    function assignToMe (caseObj){\n        if(confirm('Assign this case to yourself?')){\n            var req = {\n                method: 'POST',\n                url: '/cases/update/assigned_to/' + caseObj.id + '/',\n                data: 'assignee=' + currentUser.id,\n                headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n            };\n\n            $http(req).success(function() {\n                vm.table.items.splice(vm.table.items.indexOf(caseObj), 1);\n                $scope.loadNotifications();\n            });\n        }\n    }\n\n    function _watchTable() {\n        $scope.$watchGroup(['vm.table.order.ascending', 'vm.table.order.column'], function() {\n             _getUnassignedCases();\n            cookie.put('order', vm.table.order);\n        })\n    }\n}\n","angular.module('app.dashboard.directives').directive('unreadEmail', unreadEmailDirective);\n\nfunction unreadEmailDirective () {\n    return {\n        scope: {},\n        templateUrl: 'dashboard/directives/unreademail.html',\n        controller: UnreadEmailController,\n        controllerAs: 'vm'\n    }\n}\n\nUnreadEmailController.$inject = ['$scope', 'EmailMessage', 'Cookie'];\nfunction UnreadEmailController ($scope, EmailMessage, Cookie) {\n    var cookie = Cookie('unreadEmailWidget');\n\n    var vm = this;\n    vm.table = {\n        order: cookie.get('order', {\n            ascending: true,\n            column: 'sent_date'  // string: current sorted column\n        }),\n        items: []\n    };\n    activate();\n\n    //////\n\n    function activate() {\n        _watchTable();\n    }\n\n    function _getMessages () {\n        EmailMessage.getDashboardMessages(\n            vm.table.order.column,\n            vm.table.order.ascending\n        ).then(function (messages) {\n            vm.table.items = messages;\n        });\n    }\n\n    function _watchTable() {\n        $scope.$watchGroup(['vm.table.order.ascending', 'vm.table.order.column'], function() {\n            _getMessages();\n            cookie.put('order', vm.table.order);\n        })\n    }\n}\n","angular.module('app.deals').config(dealsConfig);\n\ndealsConfig.$inject = ['$stateProvider'];\nfunction dealsConfig ($stateProvider) {\n    $stateProvider.state('base.deals.create', {\n        url: '/create',\n        views: {\n            '@': {\n                templateUrl: '/deals/create',\n                controller: DealCreateController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'New'\n        }\n    });\n    $stateProvider.state('base.deals.create.fromAccount', {\n        url: '/account/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: function(elem, attr) {\n                    return '/deals/create/from_account/' + elem.id +'/';\n                },\n                controller: DealCreateController\n            }\n        },\n        ncyBreadcrumb: {\n            skip: true\n        }\n    });\n}\n\nangular.module('app.deals').controller('DealCreateController', DealCreateController);\n\nDealCreateController.$inject = ['$scope'];\nfunction DealCreateController ($scope) {\n    $scope.conf.pageTitleBig = 'New deal';\n    $scope.conf.pageTitleSmall = 'making deals';\n}\n","angular.module('app.deals').config(dealsConfig);\n\ndealsConfig.$inject = ['$stateProvider'];\nfunction dealsConfig ($stateProvider) {\n    $stateProvider.state('base.deals.detail.delete', {\n        url: '/delete',\n        views: {\n            '@': {\n                controller: DealDeleteController\n            }\n        }\n    });\n}\n\nangular.module('app.deals').controller('DealDeleteController', DealDeleteController);\n\nDealDeleteController.$inject = ['$http', '$state', '$stateParams'];\nfunction DealDeleteController ($http, $state, $stateParams) {\n    var id = $stateParams.id;\n    var req = {\n        method: 'POST',\n        url: '/deals/delete/' + id + '/',\n        headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n    };\n\n    $http(req).\n        success(function(data, status, headers, config) {\n            $state.go('base.deals');\n        }).\n        error(function(data, status, headers, config) {\n            $state.go('base.deals');\n        });\n}\n","angular.module('app.deals').config(dealsConfig);\n\ndealsConfig.$inject = ['$stateProvider'];\nfunction dealsConfig ($stateProvider) {\n    $stateProvider.state('base.deals.detail', {\n        url: '/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: 'deals/controllers/detail.html',\n                controller: DealDetailController\n            }\n        },\n        ncyBreadcrumb: {\n            label: '{{ deal.name }}'\n        }\n    });\n}\n\nangular.module('app.deals').controller('DealDetailController', DealDetailController);\n\nDealDetailController.$inject = ['$http', '$scope', '$stateParams', 'DealDetail', 'DealStages'];\nfunction DealDetailController ($http, $scope, $stateParams, DealDetail, DealStages) {\n    $scope.conf.pageTitleBig = 'Deal detail';\n    $scope.conf.pageTitleSmall = 'the devil is in the details';\n\n    var id = $stateParams.id;\n\n    $scope.deal = DealDetail.get({id: id});\n    $scope.dealStages = DealStages.query();\n\n    /**\n     * Change the state of a deal\n     */\n    $scope.changeState = function(stage) {\n        var newStage = stage;\n\n        var req = {\n            method: 'POST',\n            url: '/deals/update/stage/' + $scope.deal.id + '/',\n            data: 'stage=' + stage,\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        $http(req).\n            success(function(data, status, headers, config) {\n                $scope.deal.stage = newStage;\n                $scope.deal.stage_name = data.stage;\n                if(data.closed_date !== undefined){\n                    $scope.deal.closing_date = data.closed_date;\n                }\n                $scope.loadNotifications();\n            }).\n            error(function(data, status, headers, config) {\n                // Request failed propper error?\n            });\n    };\n\n    /**\n     * Archive a deal\n     */\n    $scope.archive = function(id) {\n        var req = {\n            method: 'POST',\n            url: '/deals/archive/',\n            data: 'id=' + id,\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        $http(req).\n            success(function(data, status, headers, config) {\n                $scope.deal.archived = true;\n            }).\n            error(function(data, status, headers, config) {\n                // Request failed propper error?\n            });\n    };\n\n    /**\n     * Unarchive a deal\n     */\n    $scope.unarchive = function(id) {\n        var req = {\n            method: 'POST',\n            url: '/deals/unarchive/',\n            data: 'id=' + id,\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        $http(req).\n            success(function(data, status, headers, config) {\n                $scope.deal.archived = false;\n            }).\n            error(function(data, status, headers, config) {\n                // Request failed propper error?\n            });\n    };\n}\n","angular.module('app.deals').config(dealsConfig);\n\ndealsConfig.$inject = ['$stateProvider'];\nfunction dealsConfig ($stateProvider) {\n    $stateProvider.state('base.deals.detail.edit', {\n        url: '/edit',\n        views: {\n            '@': {\n                templateUrl: function (elem, attr) {\n                    return '/deals/update/' + elem.id + '/';\n                },\n                controller: DealEditController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Edit'\n        }\n    });\n}\n\nangular.module('app.deals').controller('DealEditController', DealEditController);\n\nDealEditController.$inject = ['$scope', '$stateParams', 'DealDetail'];\nfunction DealEditController ($scope, $stateParams, DealDetail) {\n    var id = $stateParams.id;\n    var dealPromise = DealDetail.get({id: id}).$promise;\n\n    dealPromise.then(function(deal) {\n        $scope.deal = deal;\n        $scope.conf.pageTitleBig = 'Edit ' + deal.name;\n        $scope.conf.pageTitleSmall = 'change is natural';\n    })\n}\n","angular.module('app.deals').controller('FollowUpWidgetModal', FollowUpWidgetModalController);\n\nFollowUpWidgetModalController.$inject = ['$filter', '$modalInstance', 'Deal', 'DealStages', 'followUp'];\nfunction FollowUpWidgetModalController ($filter, $modalInstance, Deal, DealStages, followUp) {\n    var vm = this;\n    vm.dealStages = [];\n    vm.selectedStage = { id: followUp.stage, name: followUp.stage_name };\n    vm.followUp = followUp;\n    vm.pickerIsOpen = false;\n    vm.closingDate = new Date(followUp.closing_date);\n    vm.dateFormat = 'dd MMMM yyyy';\n    vm.datepickerOptions = {\n        startingDay: 1\n    };\n\n    vm.openDatePicker = openDatePicker;\n    vm.saveModal = saveModal;\n    vm.closeModal = closeModal;\n\n    activate();\n\n    function activate(){\n        _getDealStages();\n    }\n\n    function _getDealStages(){\n        DealStages.query({}, function(data){\n            vm.dealStages = [];\n            for(var i = 0; i < data.length; i++){\n                vm.dealStages.push({ id: data[i][0], name: data[i][1]});\n            }\n        });\n    }\n\n    function saveModal(){\n        var newDate = $filter('date')(vm.closingDate, 'yyyy-MM-dd');\n        var newStage = vm.selectedStage.id;\n        Deal.update({id: followUp.id}, {stage: newStage, expected_closing_date: newDate}, function() {\n            $modalInstance.close();\n        });\n    }\n\n    function openDatePicker($event){\n        $event.preventDefault();\n        $event.stopPropagation();\n        vm.pickerIsOpen = true;\n    }\n\n    function closeModal(){\n        $modalInstance.close();\n    }\n}\n","angular.module('app.deals').config(dealsConfig);\n\ndealsConfig.$inject = ['$stateProvider'];\nfunction dealsConfig ($stateProvider) {\n    $stateProvider.state('base.deals', {\n        url: '/deals',\n        views: {\n            '@': {\n                templateUrl: 'deals/controllers/list.html',\n                controller: DealListController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Deals'\n        }\n    });\n}\n\nangular.module('app.deals').controller('DealListController', DealListController);\n\nDealListController.$inject = ['$http', '$location', '$scope', 'Cookie', 'Deal', 'HLDate', 'HLFilters'];\nfunction DealListController($http, $location, $scope, Cookie, Deal, HLDate, HLFilters) {\n    var cookie = Cookie('dealList');\n\n    $scope.conf.pageTitleBig = 'Deals';\n    $scope.conf.pageTitleSmall = 'do all your lookin\\' here';\n\n    // Setup search query\n    var searchQuery = '';\n\n    // Check if searchQuery is set as query parameter\n    var search = $location.search().search;\n    if (search != undefined) {\n        searchQuery = search;\n    } else {\n        // Get searchQuery from cookie\n        searchQuery = cookie.get('searchQuery', '');\n    }\n\n    /**\n     * table object: stores all the information to correctly display the table\n     */\n    $scope.table = {\n        page: 1,  // current page of pagination: 1-index\n        pageSize: 20,  // number of items per page\n        totalItems: 0, // total number of items\n        searchQuery: searchQuery,  // search query\n        filterQuery: '',\n        archived: cookie.get('archived', false),\n        order:  cookie.get('order', {\n            ascending: true,\n            column:  'closing_date'  // string: current sorted column\n        }),\n        visibility: cookie.get('visibility', {\n            deal: true,\n            stage: true,\n            created: true,\n            name: true,\n            amountOnce: true,\n            amountRecurring: true,\n            assignedTo: true,\n            closingDate: true,\n            feedbackFormSent: true,\n            newBusiness: true,\n            tags: true\n        })};\n\n    /**\n     * stores the selected filters\n     */\n    $scope.filterList = cookie.get('filterList', [\n        {\n            name: 'Assigned to me',\n            value: 'assigned_to_id:' + currentUser.id,\n            selected: false\n        },\n        {\n            name: 'New business',\n            value: 'new_business:true',\n            selected: false\n        },\n        {\n            name: 'Proposal stage',\n            value: 'stage:1',\n            selected: false\n        },\n        {\n            name: 'Won stage',\n            value: 'stage:2',\n            selected: false\n        },\n        {\n            name: 'Called',\n            value: 'stage:4',\n            selected: false\n        },\n        {\n            name: 'Emailed',\n            value: 'stage:5',\n            selected: false\n        },\n        {\n            name: 'Feedback form not sent',\n            value: 'feedback_form_sent:false',\n            selected: false\n        },\n        {\n            name: 'Age between 7 and 30 days',\n            value: 'created:[' + HLDate.getSubtractedDate(30) + ' TO ' + HLDate.getSubtractedDate(7) + ']',\n            selected: false\n        },\n        {\n            name: 'Age between 30 and 120 days',\n            value: 'created:[' + HLDate.getSubtractedDate(120) + ' TO ' + HLDate.getSubtractedDate(30) + ']',\n            selected: false\n        },\n        {\n            name: 'Archived',\n            value: '',\n            selected: false,\n            id: 'archived'\n        }\n    ]);\n\n    /**\n     * updateTableSettings() sets scope variables to the cookie\n     */\n    function updateTableSettings() {\n        cookie.put('searchQuery', $scope.table.searchQuery);\n        cookie.put('archived', $scope.table.archived);\n        cookie.put('order', $scope.table.order);\n        cookie.put('visibility', $scope.table.visibility);\n        cookie.put('filterList', $scope.filterList);\n    }\n\n    /**\n     * updateDeals() reloads the deals through a service\n     *\n     * Updates table.items and table.totalItems\n     */\n    function updateDeals() {\n        Deal.getDeals(\n            $scope.table.searchQuery,\n            $scope.table.page,\n            $scope.table.pageSize,\n            $scope.table.order.column,\n            $scope.table.order.ascending,\n            $scope.table.filterQuery\n        ).then(function(deals) {\n            $scope.table.items = deals;\n            $scope.table.totalItems = deals.length ? deals[0].total_size: 0;\n        });\n    }\n\n    /**\n     * Watches the model info from the table that, when changed,\n     * needs a new set of deals\n     */\n    $scope.$watchGroup([\n        'table.page',\n        'table.order.column',\n        'table.order.ascending',\n        'table.searchQuery',\n        'table.archived',\n        'table.filterQuery'\n    ], function() {\n        updateTableSettings();\n        updateDeals();\n    });\n\n    /**\n     * Watches the model info from the table that, when changed,\n     * needs to store the info to the cache\n     */\n    $scope.$watchCollection('table.visibility', function() {\n        updateTableSettings();\n    });\n\n    /**\n     * Watches the filters so when the cookie is loaded,\n     * the filterQuery changes and a new set of deals is fetched\n     */\n    $scope.$watchCollection('filterList', function() {\n        $scope.updateFilterQuery();\n    });\n\n    /**\n     * setSearchQuery() sets the search query of the table\n     *\n     * @param queryString string: string that will be set as the new search query on the table\n     */\n    $scope.setSearchQuery = function(queryString) {\n        $scope.table.searchQuery = queryString;\n    };\n\n    $scope.toggleArchived = function() {\n        $scope.table.archived = !$scope.table.archived;\n    };\n\n    $scope.updateFilterQuery = function() {\n        HLFilters.updateFilterQuery($scope);\n    };\n\n    $scope.clearFilters = function() {\n        HLFilters.clearFilters($scope);\n    };\n\n    /**\n     * Deletes the deal in django and updates the angular view\n     */\n    $scope.delete = function(id, name, deal) {\n        var req = {\n            method: 'POST',\n            url: '/deals/delete/' + id + '/',\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        if(confirm(\"Are you sure you want to delete deal \" + name + \"?\")){\n            $http(req).\n                success(function(data, status, headers, config) {\n                    var index = $scope.table.items.indexOf(deal);\n                    $scope.table.items.splice(index, 1);\n                }).\n                error(function(data, status, headers, config) {\n                    // Request failed propper error?\n                });\n        }\n    };\n}\n","angular.module('app.deals.directives').directive('dealListWidget', DealListWidgetDirective);\n\nfunction DealListWidgetDirective () {\n    return {\n        restrict: 'E',\n        replace: true,\n        scope: {\n            title: '@',\n            list: '=',\n            height: '=',\n            addLink: '@'\n        },\n        templateUrl: 'deals/directives/list_widget.html'\n    }\n}\n","angular.module('app.deals.services').factory('Deal', Deal);\n\nDeal.$inject = ['$resource'];\nfunction Deal ($resource) {\n    var Deal = $resource(\n        '/api/deals/deal/:id',\n        null,\n        {\n            update: {\n                method: 'PUT',\n                params: {\n                    id: '@id'\n                }\n            },\n            query: {\n                url: '/search/search/',\n                method: 'GET',\n                params:\n                {\n                    type: 'deals_deal'\n                },\n                isArray: true,\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    var objects = [];\n                    if (data && data.hits && data.hits.length > 0) {\n                        data.hits.forEach(function(obj) {\n                            obj = $.extend(obj, {\n                                historyType: 'deal',\n                                color: 'blue',\n                                date: obj.modified,\n                                total_size: data.total\n                            });\n                            objects.push(obj)\n                        });\n                    }\n                    return objects;\n                }\n            }\n        }\n    );\n\n    Deal.getDeals = getDeals;\n    Deal.getDealsToCheck = getDealsToCheck;\n    Deal.getFeedbackDeals = getFeedbackDeals;\n    Deal.getFollowUpWidgetData = getFollowUpWidgetData;\n    Deal.prototype.markDealAsChecked = markDealAsChecked;\n    Deal.prototype.feedbackFormSent = feedbackFormSent;\n\n    /////\n\n    /**\n     * getDeals() gets the deals from the search backend through a promise\n     *\n     * @param queryString string: current search query on the deallist\n     * @param page int: current page of pagination\n     * @param pageSize int: current page size of pagination\n     * @param orderColumn string: current sorting of deals\n     * @param orderedAsc {boolean}: current ordering\n     * @param filterQuery {string}: contains the filters which are used in ElasticSearch\n     *\n     * @returns Promise object: when promise is completed:\n     *      {\n     *          deals list: paginated deals objects\n     *          total int: total number of deal objects\n     *      }\n     */\n    function getDeals (queryString, page, pageSize, orderColumn, orderedAsc, filterQuery) {\n        var sort = '';\n        if (orderedAsc) sort += '-';\n        sort += orderColumn;\n\n        return Deal.query({\n            q: queryString,\n            page: page - 1,\n            size: pageSize,\n            sort: sort,\n            filterquery: filterQuery\n        }, function (deals) {\n            if (deals.length) {\n                return {\n                    deals: deals,\n                    total: deals[0].total_size\n                };\n            }\n        }).$promise;\n    }\n\n    function getDealsToCheck (column, ordering, userId) {\n\n        var filterQuery = 'stage:2 AND is_checked:false';\n        if (userId) {\n            filterQuery += ' AND assigned_to_id:' + userId;\n        }\n        return getDeals('', 1, 20, column, ordering, filterQuery);\n    }\n\n    function getFeedbackDeals (column, ordering) {\n        var filterQuery = 'stage:2 AND feedback_form_sent:false AND assigned_to_id:' + currentUser.id;\n        return getDeals('', 1, 20, column, ordering, filterQuery);\n    }\n\n    function getFollowUpWidgetData (column, ordering){\n        var filterQuery = '(stage: 0 OR stage: 1 OR stage: 4 OR stage: 5) AND assigned_to_id: ' + currentUser.id;\n        return getDeals('', 1, 20, column, ordering, filterQuery);\n    }\n\n    function feedbackFormSent () {\n        var deal = this;\n        deal.feedback_form_sent = true;\n        return deal.$update();\n    }\n\n    function markDealAsChecked () {\n        var deal = this;\n        deal.is_checked = true;\n        return deal.$update();\n    }\n\n    return Deal;\n}\n","angular.module('app.deals.services').factory('DealDetail', DealDetail);\n\nDealDetail.$inject = ['$resource'];\nfunction DealDetail ($resource) {\n    return $resource(\n        '/search/search/?type=deals_deal&filterquery=id\\::id',\n        {},\n        {\n            get: {\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    if (data && data.hits && data.hits.length > 0) {\n                        var obj = data.hits[0];\n                        return obj;\n                    }\n                    return null;\n                }\n            },\n            query: {\n                url: '/search/search/?type=deals_deal&filterquery=:filterquery',\n                isArray: true,\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    var objects = [];\n                    if (data && data.hits && data.hits.length > 0) {\n                        data.hits.forEach(function(obj) {\n                            obj = $.extend(obj, {historyType: 'deal', color: 'blue', date: obj.modified});\n                            objects.push(obj)\n                        });\n                    }\n                    return objects;\n                }\n            },\n            totalize: {\n                url: '/search/search/?type=deals_deal&size=0&filterquery=:filterquery',\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    if (data && data.total) {\n                        return {total: data.total};\n                    }\n                    return {total: 0};\n                }\n            }\n        }\n    );\n}\n","angular.module('app.deals.services').factory('DealStages', DealStages);\n\nDealStages.$inject = ['$resource'];\n\nfunction DealStages ($resource) {\n    return $resource('/api/deals/stages');\n}\n","angular.module('app.email').config(emailConfig);\nemailConfig.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction emailConfig($stateProvider, $urlRouterProvider) {\n    $urlRouterProvider.when('/email', '/email/all/INBOX');\n    $stateProvider.state('base.email', {\n        url: '/email',\n        views: {\n            '@': {\n                templateUrl: 'email/controllers/base.html',\n                controller: EmailBaseController,\n                controllerAs: 'vm'\n            },\n            'labelList@base.email': {\n                templateUrl: 'email/controllers/label_list.html',\n                controller: 'LabelListController',\n                controllerAs: 'vm'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Email'\n        },\n        resolve: {\n            primaryEmailAccountId: ['$q', 'User', function($q, User) {\n                var deferred = $q.defer();\n                User.me(null, function(data) {\n                    deferred.resolve(data.primary_email_account);\n                });\n                return deferred.promise;\n            }]\n        }\n    });\n}\n\nangular.module('app.email').controller('EmailBaseController', EmailBaseController);\n\nEmailBaseController.$inject = ['$scope'];\nfunction EmailBaseController ($scope) {\n    $scope.conf.pageTitleBig = 'Email';\n    $scope.conf.pageTitleSmall = 'sending love through the world!';\n}\n","angular.module('app.email').config(emailConfig);\nemailConfig.$inject = ['$stateProvider'];\nfunction emailConfig ($stateProvider) {\n    // TODO: LILY-XXX: Clean up compose states and make email/template optional params\n    $stateProvider.state('base.email.compose', {\n        url: '/compose',\n        views: {\n            '@base.email': {\n                templateUrl: '/messaging/email/compose/',\n                controller: EmailComposeController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n    $stateProvider.state('base.email.composeEmail', {\n        url: '/compose/{email}',\n        views: {\n            '@base.email': {\n                templateUrl: '/messaging/email/compose/',\n                controller: EmailComposeController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n    $stateProvider.state('base.email.composeEmailTemplate', {\n        url: '/compose/{email}/{template}',\n        views: {\n            '@base.email': {\n                templateUrl: '/messaging/email/compose/',\n                controller: EmailComposeController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n    $stateProvider.state('base.email.draft', {\n        url: '/draft/{id:[0-9]{1,}}',\n        params: {\n            messageType: 'draft'\n        },\n        views: {\n            '@base.email': {\n                templateUrl: function(elem, attr) {\n                    return '/messaging/email/draft/' + elem.id + '/';\n                },\n                controller: EmailComposeController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n    $stateProvider.state('base.email.reply', {\n        url: '/reply/{id:[0-9]{1,}}',\n        params: {\n            messageType: 'reply'\n        },\n        views: {\n            '@base.email': {\n                templateUrl: function(elem, attr) {\n                    return '/messaging/email/reply/' + elem.id + '/';\n                },\n                controller: EmailComposeController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n    $stateProvider.state('base.email.replyAll', {\n        // TODO: This should probably be redone so the url is nicer.\n        // Maybe we can save the action in the scope?\n        url: '/replyall/{id:[0-9]{1,}}',\n        params: {\n            messageType: 'reply-all'\n        },\n        views: {\n            '@base.email': {\n                templateUrl: function(elem, attr) {\n                    return '/messaging/email/replyall/' + elem.id + '/';\n                },\n                controller: EmailComposeController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n    $stateProvider.state('base.email.forward', {\n        url: '/forward/{id:[0-9]{1,}}',\n        params: {\n            messageType: 'forward'\n        },\n        views: {\n            '@base.email': {\n                templateUrl: function(elem, attr) {\n                    return '/messaging/email/forward/' + elem.id + '/';\n                },\n                controller: EmailComposeController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n}\n\nangular.module('app.email').controller('EmailComposeController', EmailComposeController);\n\nEmailComposeController.$inject = ['$scope', '$stateParams', '$templateCache', '$q', 'ContactDetail', 'EmailMessage', 'EmailTemplate', 'SelectedEmailAccount'];\nfunction EmailComposeController ($scope, $stateParams, $templateCache, $q, ContactDetail, EmailMessage, EmailTemplate, SelectedEmailAccount) {\n\n    $scope.conf.pageTitleBig = 'Send email';\n    $scope.conf.pageTitleSmall = 'sending love through the world!';\n\n    activate();\n\n    //////////\n\n    function activate () {\n        // Remove cache so new compose will always hit the server\n        $templateCache.remove('/messaging/email/compose/');\n\n        if ($stateParams.messageType == 'reply') {\n            // If it's a reply, load the email message first\n            EmailMessage.get({id: $stateParams.id}).$promise.then(function (emailMessage) {\n                _initEmailCompose(emailMessage);\n            });\n        }\n        else {\n            // Otherwise just initialize the email compose\n            _initEmailCompose();\n        }\n    }\n\n    function _initEmailCompose(emailMessage) {\n        var email = $stateParams.email;\n\n        var promises = [];\n\n        var recipient = null;\n        var contactPromise;\n\n        if (emailMessage) {\n            contactPromise = ContactDetail.query({filterquery: 'email_addresses.email_address:' + emailMessage.sender.email_address}).$promise;\n            promises.push(contactPromise);\n        }\n        else if (email) {\n            contactPromise = ContactDetail.query({filterquery: 'email_addresses.email_address:' + email}).$promise;\n            promises.push(contactPromise);\n        }\n\n        var emailTemplatePromise = EmailTemplate.query().$promise;\n        promises.push(emailTemplatePromise);\n\n        // TODO: LILY-XXX: Check if this can be cleaned up\n        // Once all promises are done, continue\n        $q.all(promises).then(function(results) {\n            var templates;\n            // This part should only be executed if we've loaded a contact\n            if(contactPromise) {\n                var contact = results[0][0];\n                templates = results[1];\n\n                if (emailMessage) {\n                    email = emailMessage.sender.email_address;\n                }\n\n                if (contact) {\n                    // The text which is actually used in the application/select2\n                    var used_text = '\"' + contact.name + '\" <' + email + '>';\n                    // The text shown in the recipient input\n                    var displayed_text = contact.name + ' <' + email + '>';\n\n                    recipient = {\n                        id: used_text,\n                        text: displayed_text,\n                        object_id: contact.id\n                    };\n                } else {\n                    recipient = {\n                        id: email,\n                        text: email,\n                        object_id: null\n                    };\n                }\n            } else {\n                templates = results[0];\n            }\n\n            var template = $stateParams.template;\n            // Determine whether the default template should be loaded or not\n            var loadDefaultTemplate = template == undefined;\n\n            // Set message type to given message type if available, otherwise set to message type 'new'\n            var messageType = $stateParams.messageType ? $stateParams.messageType : 'new';\n\n            HLInbox.init();\n            HLInbox.initEmailCompose({\n                templateList: templates,\n                defaultEmailTemplateUrl: '/messaging/email/templates/get-default/',\n                getTemplateUrl: '/messaging/email/templates/detail/',\n                messageType: messageType,\n                loadDefaultTemplate: loadDefaultTemplate,\n                recipient: recipient,\n                template: template\n            });\n            HLInbox.setSuccesURL($scope.previousState);\n            if (SelectedEmailAccount.currentAccountId) {\n                angular.element(HLInbox.config.emailAccountInput).select2('val', SelectedEmailAccount.currentAccountId);\n            }\n        });\n    }\n}\n","angular.module('app.email').config(emailConfig);\nemailConfig.$inject = ['$stateProvider'];\nfunction emailConfig ($stateProvider){\n    $stateProvider.state('base.email.detail', {\n        url: '/detail/{id:[0-9]{1,}}',\n        views: {\n            '@base.email': {\n                templateUrl: 'email/controllers/detail.html',\n                controller: EmailDetailController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n}\n\nangular.module('app.email').controller('EmailDetail', EmailDetailController);\n\nEmailDetailController.$inject = ['$scope', '$state', '$stateParams', 'EmailMessage', 'RecipientInformation', 'SelectedEmailAccount'];\nfunction EmailDetailController ($scope, $state, $stateParams, EmailMessage, RecipientInformation, SelectedEmailAccount) {\n    var vm = this;\n    vm.displayAllRecipients = false;\n    vm.message = null;\n    vm.archiveMessage = archiveMessage;\n    vm.trashMessage = trashMessage;\n    vm.deleteMessage = deleteMessage;\n    vm.toggleOverlay = toggleOverlay;\n    vm.markAsUnread = markAsUnread;\n\n    $scope.conf.pageTitleBig = 'Email message';\n    $scope.conf.pageTitleSmall = 'sending love through the world!';\n\n    activate();\n\n    //////\n\n    function activate() {\n        _getMessage();\n    }\n\n    function _getMessage() {\n        EmailMessage.get({id: $stateParams.id}, function(result) {\n            if (result.body_html) {\n                result.bodyHTMLUrl = '/messaging/email/html/' + result.id + '/';\n            }\n            vm.message = result;\n            // It's easier to iterate through a single array, so make an array with all recipients\n            vm.message.all_recipients = result.received_by.concat(result.received_by_cc);\n            // Get contacts\n            RecipientInformation.getInformation(vm.message.all_recipients);\n\n            if (!result.read) {\n                EmailMessage.markAsRead($stateParams.id, true);\n            }\n            // Store current email account\n            SelectedEmailAccount.setCurrentAccountId(vm.message.account);\n        });\n    }\n\n    function archiveMessage() {\n        EmailMessage.archive({id: vm.message.id}).$promise.then(function () {\n            $state.go('base.email.list', { 'labelId': 'INBOX' });\n        });\n    }\n\n    function trashMessage() {\n        EmailMessage.trash({id: vm.message.id}).$promise.then(function () {\n            $state.go('base.email.list', { 'labelId': 'INBOX' });\n        });\n    }\n\n    function deleteMessage () {\n        EmailMessage.delete({id: vm.message.id}).$promise.then(function () {\n            $state.go('base.email.list', { 'labelId': 'INBOX' });\n        });\n    }\n\n    function toggleOverlay () {\n        vm.displayAllRecipients = !vm.displayAllRecipients;\n\n        var $emailRecipients = $('.email-recipients');\n\n        if (vm.displayAllRecipients) {\n            $emailRecipients.height($emailRecipients[0].scrollHeight);\n        } else {\n            $emailRecipients.height('1.30em');\n        }\n    }\n\n    function markAsUnread() {\n        EmailMessage.markAsRead(vm.message.id, false).$promise.then(function () {\n            $state.go('base.email.list', { 'labelId': 'INBOX' });\n        });\n    }\n}\n","angular.module('app.email').config(emailConfig);\nemailConfig.$inject = ['$stateProvider'];\nfunction emailConfig($stateProvider) {\n    $stateProvider.state('base.email.list', {\n        url: '/all/{labelId}',\n        views: {\n            '@base.email': {\n                templateUrl: 'email/controllers/email_list.html',\n                controller: EmailListController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n    $stateProvider.state('base.email.accountAllList', {\n        url: '/account/{accountId}/all',\n        views: {\n            '@base.email': {\n                templateUrl: 'email/controllers/email_list.html',\n                controller: EmailListController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n    $stateProvider.state('base.email.accountList', {\n        url: '/account/{accountId}/{labelId}',\n        views: {\n            '@base.email': {\n                templateUrl: 'email/controllers/email_list.html',\n                controller: EmailListController,\n                controllerAs: 'vm'\n            }\n        }\n    });\n}\n\nangular.module('app.email').controller('EmailListController', EmailListController);\n\nEmailListController.$inject = ['$location', '$scope', '$state', '$stateParams', 'EmailMessage', 'EmailLabel', 'EmailAccount', 'HLText', 'SelectedEmailAccount'];\nfunction EmailListController ($location, $scope, $state, $stateParams, EmailMessage, EmailLabel, EmailAccount, HLText, SelectedEmailAccount) {\n    var vm = this;\n    vm.emailMessages = [];\n    // Check if filter is set as query parameter\n    vm.table = {\n        page: 0,  // current page of pagination: 1-index\n        pageSize: 20,  // number of items per page\n        totalItems: 0, // total number of items\n        filter: ''  // search filter\n    };\n    vm.opts = {\n        checkboxesAll: false\n    };\n    vm.primaryEmailAccount = null;\n    vm.setPage = setPage;\n    vm.toggleCheckboxes = toggleCheckboxes;\n    vm.showReplyOrForwardButtons = showReplyOrForwardButtons;\n    vm.replyOnMessage = replyOnMessage;\n    vm.replyAllOnMessage = replyAllOnMessage;\n    vm.forwardOnMessage = forwardOnMessage;\n    vm.markAsRead = markAsRead;\n    vm.markAsUnread = markAsUnread;\n    vm.archiveMessages = archiveMessages;\n    vm.trashMessages = trashMessages;\n    vm.deleteMessages = deleteMessages;\n    vm.moveMessages = moveMessages;\n    vm.reloadMessages = reloadMessages;\n    vm.goToDraft = goToDraft;\n\n    $scope.conf.pageTitleBig = 'Email';\n    $scope.conf.pageTitleSmall = 'sending love through the world!';\n\n    activate();\n\n    ///////\n\n    function activate() {\n        vm.table.filter = $location.search().search || '';\n        watchTable();\n        // Store current email account\n        SelectedEmailAccount.setCurrentAccountId($stateParams.accountId);\n    }\n\n    function watchTable() {\n        // Check for search input and pagination\n        $scope.$watchGroup([\n            'vm.table.filter',\n            'vm.table.page'\n        ], function (newValues, oldValues) {\n            // Reset page if we start searching\n            if (oldValues[0] == \"\" && newValues[0] != \"\") {\n                vm.setPage(0);\n            }\n            _reloadMessages();\n        });\n    }\n\n    function setPage(pageNumber) {\n        if (pageNumber >= 0 && pageNumber * vm.table.pageSize < vm.table.totalItems) {\n            vm.table.page = pageNumber;\n        }\n    }\n\n\n    function toggleCheckboxes () {\n        for (var i in vm.emailMessages) {\n            vm.emailMessages[i].checked = vm.opts.checkboxesAll;\n        }\n    }\n\n    function _toggleReadMessages(read) {\n        for (var i in vm.emailMessages) {\n            if (vm.emailMessages[i].checked) {\n                EmailMessage.markAsRead(vm.emailMessages[i].id, read);\n                vm.emailMessages[i].read = read;\n            }\n        }\n    }\n\n    /**\n     * Only show the reply and forward buttons if there is one message checked.\n     */\n    function showReplyOrForwardButtons () {\n        var number = 0;\n        for (var i in vm.emailMessages) {\n            if (vm.emailMessages[i].checked) {\n                number++;\n                if (number > 1) {\n                    return false;\n                }\n            }\n        }\n        return number == 1;\n    }\n\n    /**\n     * Get the currently selected EmailMessage instance.\n     *\n     * @returns EmailMessage instance\n     */\n    function _selectedMessage() {\n        for (var i in vm.emailMessages) {\n            if (vm.emailMessages[i].checked) {\n                return vm.emailMessages[i];\n            }\n        }\n    }\n\n    /**\n     * Reply on selected message.\n     */\n    function replyOnMessage() {\n        var message = _selectedMessage();\n        if (message) {\n            $state.go('base.email.reply', {id: message.id});\n        }\n    }\n\n    /**\n     * Reply-all on selected message.\n     */\n    function replyAllOnMessage () {\n        var message = _selectedMessage();\n        if (message) {\n            $state.go('base.email.replyAll', {id: message.id});\n        }\n    }\n\n    /**\n     * Forward on selected message.\n     */\n    function forwardOnMessage () {\n        var message = _selectedMessage();\n        if (message) {\n            $state.go('base.email.forward', {id: message.id});\n        }\n    }\n\n    function markAsRead () {\n        _toggleReadMessages(true);\n    }\n\n    function markAsUnread() {\n        _toggleReadMessages(false);\n    }\n\n    function _removeCheckedMessagesFromList() {\n        var i = vm.emailMessages.length;\n        while (i--) {\n            if (vm.emailMessages[i].checked) {\n                vm.emailMessages.splice(i, 1);\n            }\n        }\n    }\n\n    function archiveMessages () {\n        for (var i in vm.emailMessages) {\n            if (vm.emailMessages[i].checked) {\n                EmailMessage.archive({id: vm.emailMessages[i].id});\n            }\n        }\n        _removeCheckedMessagesFromList();\n    }\n\n    function trashMessages () {\n        for (var i in vm.emailMessages) {\n            if (vm.emailMessages[i].checked) {\n                EmailMessage.trash({id: vm.emailMessages[i].id});\n            }\n        }\n        _removeCheckedMessagesFromList();\n    }\n\n    function deleteMessages () {\n        for (var i in vm.emailMessages) {\n            if (vm.emailMessages[i].checked) {\n                EmailMessage.delete({id: vm.emailMessages[i].id});\n            }\n        }\n        _removeCheckedMessagesFromList();\n    }\n\n    function moveMessages (labelId) {\n        var removedLabels = [];\n        if (vm.label.label_id) {\n            removedLabels = [vm.label.label_id];\n        }\n        var addedLabels = [labelId];\n        // Gmail API needs to know the new labels as well as the old ones, so send them too\n        var data = {\n            remove_labels: removedLabels,\n            add_labels: addedLabels\n        };\n        for (var i in vm.emailMessages) {\n            if (vm.emailMessages[i].checked) {\n                EmailMessage.move({id: vm.emailMessages[i].id, data: data});\n            }\n        }\n        _removeCheckedMessagesFromList();\n    }\n\n    function reloadMessages () {\n        vm.emailMessages = [];\n        _reloadMessages();\n    }\n\n    function goToDraft (messageId) {\n        window.open('/messaging/email/draft/' + messageId + '/', '_self');\n    }\n\n    function _reloadMessages() {\n        var filterquery = [];\n\n        if ($stateParams.labelId) {\n            filterquery.push('label_id:' + $stateParams.labelId);\n        } else {\n            filterquery.push('NOT label_id:Sent');\n        }\n\n        if ($stateParams.accountId) {\n            filterquery.push('account:' + $stateParams.accountId);\n\n            if ($stateParams.labelId) {\n                // Get the label for the given accountId\n                EmailLabel.query({\n                    label_id: $stateParams.labelId,\n                    account__id: $stateParams.accountId\n                }, function (results) {\n                    if (results.length) {\n                        vm.label = results[0];\n                        vm.label.name = vm.label.name.hlCapitalize();\n                    } else {\n                        vm.label = {id: $stateParams.labelId, name: $stateParams.labelId.hlCapitalize()};\n                    }\n                });\n            }\n            // Get the account for the given accountId\n            vm.account = EmailAccount.get({id: $stateParams.accountId});\n        } else {\n            vm.label = {id: $stateParams.labelId, name: $stateParams.labelId.hlCapitalize()};\n        }\n\n        if ($stateParams.labelId && $stateParams.labelId != 'TRASH') {\n            filterquery.push('is_removed:false');\n        }\n\n        if (filterquery) {\n            filterquery = filterquery.join(' AND ');\n        }\n\n        EmailMessage.search({\n            filterquery: filterquery,\n            q: vm.table.filter,\n            size: vm.table.pageSize,\n            page: vm.table.page\n        }, function (data) {\n            vm.emailMessages = data.hits;\n            vm.table.totalItems = data.total;\n        });\n    }\n}\n\n","angular.module('app.email').controller('LabelListController', LabelListController);\n\nLabelListController.$inject = ['$filter', '$interval', '$scope', 'EmailAccount', 'primaryEmailAccountId'];\nfunction LabelListController ($filter, $interval, $scope, EmailAccount, primaryEmailAccountId) {\n    var vm = this;\n    vm.accountList = [];\n    vm.primaryEmailAccountId = primaryEmailAccountId;\n    vm.labelCount = 0;\n    vm.hasUnreadLabel = hasUnreadLabel;\n    vm.unreadCountForLabel = unreadCountForLabel;\n\n    activate();\n\n    //////////\n\n    function activate() {\n        _startIntervalAccountInfo();\n    }\n\n    function _startIntervalAccountInfo() {\n        _getAccountInfo();\n        var stopGetAccountInfo = $interval(_getAccountInfo, 60000);\n\n        // Stop fetching when out of scope\n        $scope.$on('$destroy', function() {\n            // Make sure that the interval is destroyed too\n            if (angular.isDefined(stopGetAccountInfo)) {\n                $interval.cancel(stopGetAccountInfo);\n                stopGetAccountInfo = undefined;\n            }\n        });\n    }\n\n    // Fetch the EmailAccounts & associated labels\n    function _getAccountInfo () {\n        EmailAccount.mine(function (results) {\n            // Sort accounts on id\n            results = $filter('orderBy')(results, 'id');\n\n            vm.accountList = [];\n            // Make sure primary account is set first\n            angular.forEach(results, function(account) {\n                if (account.id != vm.primaryEmailAccountId) {\n                    this.push(account);\n                } else {\n                    this.unshift(account);\n                }\n            }, vm.accountList);\n\n            // Check for unread email count\n            var labelCount = {};\n            for (var i in vm.accountList) {\n                for (var j in vm.accountList[i].labels) {\n                    var label = vm.accountList[i].labels[j];\n                    if (label.label_type == 0) {\n                        if (labelCount.hasOwnProperty(label.label_id)) {\n                            labelCount[label.label_id] += parseInt(label.unread);\n                        } else {\n                            labelCount[label.label_id] = parseInt(label.unread);\n                        }\n                    }\n                }\n            }\n            vm.labelCount = labelCount;\n        });\n    }\n\n    function unreadCountForLabel(account, labelId) {\n        var count = 0;\n        angular.forEach(account.labels, function(label) {\n            if (label.label_id == labelId) {\n                count = label.unread;\n                return true\n            }\n        });\n        return count;\n    }\n\n    function hasUnreadLabel (account, labelId) {\n        return unreadCountForLabel(account, labelId) > 0;\n\n    }\n}\n","/**\n * contactIcon Directive shows how the email is connected with an account or contact\n *\n * @param message object: object with message info\n *\n * Example:\n *\n * <td contact-icon message=\"message\"></td>\n *\n */\nangular.module('app.email.directives').directive('contactIcon', contactIcon);\n\ncontactIcon.$inject = ['$http'];\nfunction contactIcon ($http) {\n    return {\n        restrict: 'A',\n        scope: {\n            message: '='\n        },\n        replace: true,\n        templateUrl: 'email/directives/contact_icon.html',\n        link: function (scope, element, attrs) {\n\n            // Do we have an associated account or contact?\n            if (scope.message.sender_email) {\n                $http.get('/search/emailaddress/' + scope.message.sender_email)\n                    .success(function (data) {\n                        scope.emailAddressResults = data;\n                        if (data.type == 'contact') {\n                            // Contact and has account\n                            if (data.data.accounts) {\n                                scope.status = 'complete';\n                                // Contact without account\n                            } else {\n                                scope.status = 'needsAccount';\n                            }\n                        } else if (data.type == 'account') {\n                            // Is the emailadress from the account it self (eg. info@)\n                            if (data.complete) {\n                                scope.status = 'complete';\n                            } else {\n                                scope.status = 'needsContact';\n                            }\n                        } else {\n                            scope.status = 'needsEverything';\n                        }\n                    });\n            } else {\n                scope.status = 'complete';\n            }\n        }\n    };\n}\n","angular.module('app.email.services').factory('EmailAccount', EmailAccount);\n\nEmailAccount.$inject = ['$resource'];\nfunction EmailAccount ($resource) {\n    return $resource('/api/messaging/email/account/:id/', null,\n        {\n            'update': { method: 'PUT' },\n            'shareWith': {\n                method: 'POST',\n                url: '/api/messaging/email/account/:id/shared/'\n            },\n            'mine': {\n                method: 'GET',\n                url: '/api/messaging/email/account/mine/',\n                isArray: true\n            }\n        }\n    );\n}\n","angular.module('app.email.services').factory('EmailDetail', EmailDetail);\n\nEmailDetail.$inject = ['$resource'];\nfunction EmailDetail ($resource) {\n    return $resource(\n        '',\n        {size:100},\n        {\n            query: {\n                url: '/search/search/?type=email_emailmessage&size=:size&sort=-sent_date&filterquery=:filterquery&account_related=:account_related',\n                isArray: true,\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    var objects = [];\n                    if (data && data.hits && data.hits.length > 0) {\n                        data.hits.forEach(function(obj) {\n                            obj = $.extend(obj, {historyType: 'email', color: 'green', date: obj.sent_date, right: false});\n                            objects.push(obj)\n                        });\n                    }\n                    return objects;\n                }\n            }\n        }\n    );\n}\n","angular.module('app.email.services').factory('EmailLabel', EmailLabel);\n\nEmailLabel.$inject = ['$resource'];\nfunction EmailLabel ($resource) {\n    return $resource('/api/messaging/email/label/:id/');\n}\n","angular.module('app.email.services').factory('EmailMessage', EmailMessage);\n\nEmailMessage.$inject = ['$resource', '$q'];\nfunction EmailMessage ($resource, $q) {\n    var EmailMessage = $resource(\n        '/api/messaging/email/email/:id/:actions',\n        {},\n        {\n            'update': {\n                method: 'PUT',\n                params: {\n                    id: '@id',\n                    actions: ''\n                }\n            },\n            'delete': {\n                method: 'DELETE',\n                params: {\n                    id: '@id',\n                    actions: ''\n                }\n            },\n            'archive': {\n                method: 'PUT',\n                params: {\n                    id: '@id',\n                    actions: 'archive'\n                }\n            },\n            'trash': {\n                method: 'PUT',\n                params: {\n                    id: '@id',\n                    actions: 'trash'\n                }\n            },\n            'get': {\n                method: 'GET',\n                params: {\n                    id: '@id',\n                    actions: ''\n                }\n            },\n            'move': {\n                method: 'PUT',\n                params: {\n                    id: '@id',\n                    actions: 'move'\n                }\n            },\n            'search': {\n                method: 'GET',\n                url: '/search/search/',\n                params: {\n                    user_email_related: 1,\n                    type: 'email_emailmessage',\n                    sort: '-sent_date',\n                    size: 20\n                }\n            }\n        }\n    );\n\n    EmailMessage.markAsRead = markAsRead;\n    EmailMessage.getDashboardMessages = getDashboardMessages;\n\n    //////\n\n    function markAsRead (id, read) {\n        return this.update({id: id, read: read});\n    }\n\n    function getDashboardMessages (field, sorting) {\n        var filterQuery = ['read:false AND label_id:INBOX'];\n        var sort = '';\n        sort += sorting ? '-': '';\n        sort += field;\n\n        var deferred = $q.defer();\n        EmailMessage.search({\n            filterquery: filterQuery,\n            sort: sort\n        }, function (data) {\n            deferred.resolve(data.hits);\n        });\n        return deferred.promise;\n    }\n    return EmailMessage\n}\n","angular.module('app.email.services').factory('EmailTemplate', EmailTemplate);\n\nEmailTemplate.$inject = ['$resource'];\nfunction EmailTemplate ($resource) {\n    return $resource('/api/messaging/email/emailtemplate/:id/');\n}\n","angular.module('app.email.services').factory('RecipientInformation', RecipientInformation);\n\nRecipientInformation.$inject = ['$http'];\nfunction RecipientInformation ($http) {\n\n    var RecipientInformation = {};\n\n    RecipientInformation.getInformation = getInformation;\n\n    //////\n\n    function getInformation(recipients) {\n        recipients.forEach(function (recipient) {\n            // If there's a name set, try to get the contact id\n            // Don't set/change the name because we want to keep the original email intact\n            if (recipient.name != '') {\n                $http.get('/search/emailaddress/' + recipient.email_address)\n                    .success(function (data) {\n                        if (data.type == 'contact') {\n                            if (data.data.id) {\n                                recipient.contact_id = data.data.id;\n                            }\n                        }\n                    });\n            }\n        });\n    }\n\n    return RecipientInformation;\n}\n","angular.module('app.email.services').factory('SelectedEmailAccount', SelectedEmailAccount);\n\nfunction SelectedEmailAccount () {\n\n    var factory = {\n        currentAccountId: null,\n        setCurrentAccountId: setCurrentAccountId\n    };\n    return factory;\n\n    function setCurrentAccountId (accountId) {\n        factory.currentAccountId = accountId;\n    }\n}\n","angular.module('app.notes').factory('Note', Note);\n\nNote.$inject = ['$resource'];\nfunction Note ($resource) {\n    return $resource('/api/notes/:id/');\n}\n","angular.module('app.notes').factory('NoteDetail', NoteDetail);\n\nNoteDetail.$inject = ['$resource'];\nfunction NoteDetail ($resource) {\n    return $resource(\n        '/search/search/?type=notes_note&filterquery=id\\::id',\n        {size:100},\n        {\n            get: {\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    if (data && data.hits && data.hits.length > 0) {\n                        var obj = data.hits[0];\n                        return obj;\n                    }\n                    return null;\n                }\n            },\n            query: {\n                url: '/search/search/?type=notes_note&size=:size&sort=-date&filterquery=:filterquery',\n                isArray: true,\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    var objects = [];\n                    if (data && data.hits && data.hits.length > 0) {\n                        data.hits.forEach(function(obj) {\n                            obj = $.extend(obj, {historyType: 'note', color: 'yellow'});\n                            objects.push(obj)\n                        });\n                    }\n                    return objects;\n                }\n            },\n            totalize: {\n                url: '/search/search/?type=notes_note&size=0&filterquery=:filterquery',\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    if (data && data.total) {\n                        return {total: data.total};\n                    }\n                    return {total: 0};\n                }\n            }\n        }\n    );\n}\n","angular.module('app.preferences').config(preferencesConfig);\n\npreferencesConfig.$inject = ['$stateProvider'];\nfunction preferencesConfig ($stateProvider) {\n    $stateProvider.state('base.preferences', {\n        url: '/preferences',\n        abstract: true,\n        views: {\n            '@': {\n                templateUrl: 'preferences/controllers/base.html',\n                controller: PreferencesBase,\n                controllerAs: 'vm'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Preferences'\n        }\n    });\n}\n\nangular.module('app.preferences').controller('PreferencesBase', PreferencesBase);\n\nPreferencesBase.$inject = ['$scope'];\nfunction PreferencesBase ($scope) {\n    $scope.conf.pageTitleBig = 'Preferences';\n    $scope.conf.pageTitleSmall = 'configure your mayhem';\n}\n","angular.module('app.preferences').config(preferencesConfig);\n\npreferencesConfig.$inject = ['$stateProvider'];\nfunction preferencesConfig($stateProvider) {\n    $stateProvider.state('base.preferences.emailaccounts.edit', {\n        url: '/edit/{id:[0-9]{1,}}',\n        views: {\n            '@base.preferences': {\n                templateUrl: function (elem, attr) {\n                    return 'messaging/email/accounts/update/' + elem.id;\n                },\n                controller: 'PreferencesEmailAccountEdit'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Edit EmailAccount'\n        }\n    });\n}\n\nangular.module('app.preferences').controller('PreferencesEmailAccountEdit', PreferencesEmailAccountEdit);\n\nfunction PreferencesEmailAccountEdit () {}\n","angular.module('app.preferences').config(emailPreferencesStates);\n\nemailPreferencesStates.$inject = ['$stateProvider'];\nfunction emailPreferencesStates($stateProvider) {\n    $stateProvider.state('base.preferences.emailaccounts', {\n        url: '/emailaccounts',\n        views: {\n            '@base.preferences': {\n                templateUrl: 'preferences/controllers/emailaccount_list.html',\n                controller: PreferencesEmailAccountList,\n                controllerAs: 'vm'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Email Account'\n        },\n        resolve: {\n            ownedAccounts: ['EmailAccount', function (EmailAccount) {\n                return EmailAccount.query({owner: currentUser.id}).$promise;\n            }],\n            sharedAccounts: ['EmailAccount', function (EmailAccount) {\n                return EmailAccount.query({shared_with_users__id: currentUser.id}).$promise;\n            }],\n            publicAccounts: ['EmailAccount', function (EmailAccount) {\n                return EmailAccount.query({public: \"True\"}).$promise;\n            }],\n            user: ['User', function (User) {\n                return User.me().$promise;\n            }]\n        }\n    });\n}\n\nangular.module('app.preferences').controller('PreferencesEmailAccountList', PreferencesEmailAccountList);\n\nPreferencesEmailAccountList.$inject =['$modal', 'EmailAccount', 'User', 'ownedAccounts', 'sharedAccounts', 'publicAccounts', 'user'];\nfunction PreferencesEmailAccountList($modal, EmailAccount, User, ownedAccounts, sharedAccounts, publicAccounts, user) {\n\n    var vm = this;\n    vm.ownedAccounts = ownedAccounts;\n    vm.sharedAccounts = sharedAccounts;\n    vm.publicAccounts = publicAccounts;\n    vm.currentUser = user;\n    vm.activate = activate;\n    vm.deleteAccount = deleteAccount;\n    vm.openShareAccountModal = openShareAccountModal;\n    vm.makePrimaryAccount = makePrimaryAccount;\n\n    activate();\n\n    ////////\n\n    function activate() {}\n\n    // Get relevant accounts\n    function loadAccounts() {\n        // Accounts owned\n        EmailAccount.query({owner: vm.currentUser.id}, function(data) {\n            vm.ownedAccounts = data;\n        });\n\n        // Accounts shared with user\n        EmailAccount.query({shared_with_users__id: vm.currentUser.id}, function(data) {\n            vm.sharedAccounts = data;\n        });\n\n        // Accounts public\n        EmailAccount.query({public: \"True\"}, function(data) {\n            vm.publicAccounts = data;\n        });\n    }\n\n    function deleteAccount (accountId) {\n        if (confirm('sure to delete?')) {\n            EmailAccount.delete({id: accountId}, function() {\n                // Reload accounts\n                loadAccounts();\n            });\n        }\n    }\n\n    function openShareAccountModal (emailAccount) {\n        var modalInstance = $modal.open({\n            templateUrl: 'preferences/controllers/emailaccount_share.html',\n            controller: 'EmailAccountShareModalController',\n            size: 'lg',\n            resolve: {\n                currentAccount: function() {\n                    return emailAccount;\n                }\n            }\n        });\n\n        modalInstance.result.then(function () {\n            loadAccounts();\n        }, function() {\n            loadAccounts();\n        });\n    }\n\n    function makePrimaryAccount (emailAccount) {\n        vm.currentUser.primary_email_account = emailAccount.id;\n        User.update({id: 'me'}, vm.currentUser);\n    }\n}\n","angular.module('app.preferences').controller('EmailAccountShareModalController', EmailAccountShareModalController);\n\nEmailAccountShareModalController.$inject = ['$modalInstance', '$scope', 'EmailAccount', 'User', 'currentAccount'];\nfunction EmailAccountShareModalController ($modalInstance, $scope, EmailAccount, User, currentAccount) {\n    $scope.currentAccount = currentAccount;\n\n    // Get all users to display in a list\n    User.query({}, function(data) {\n        $scope.users = [];\n        // Check if user has the emailaccount already shared\n        angular.forEach(data, function(user) {\n            if ($scope.currentAccount.shared_with_users.indexOf(user.id) !== -1) {\n                user.sharedWith = true;\n            }\n            $scope.users.push(user);\n        });\n    });\n\n    $scope.ok = function () {\n        // Save updated account information\n        if ($scope.currentAccount.public) {\n            EmailAccount.update({id: $scope.currentAccount.id}, $scope.currentAccount, function() {\n                $modalInstance.close();\n            });\n        } else {\n            // Get ids of the users to share with\n            var shared_with_users = [];\n            angular.forEach($scope.users, function(user) {\n                if(user.sharedWith) {\n                    shared_with_users.push(user.id);\n                }\n            });\n            // Push ids to api\n            EmailAccount.shareWith({id: $scope.currentAccount.id}, {shared_with_users: shared_with_users}, function() {\n                $modalInstance.close();\n            });\n        }\n    };\n\n    // Lets not change anything\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}\n","angular.module('app.preferences').config(preferencesConfig);\n\npreferencesConfig.$inject = ['$stateProvider'];\nfunction preferencesConfig($stateProvider) {\n    $stateProvider.state('base.preferences.emailtemplates.create', {\n        url: '/create',\n        views: {\n            '@base.preferences': {\n                templateUrl: '/messaging/email/templates/create/',\n                controller: PreferencesEmailTemplatesCreate\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Email template edit'\n        }\n    });\n}\n\nangular.module('app.preferences').controller('PreferencesEmailTemplatesCreate', PreferencesEmailTemplatesCreate);\n\n// TODO: LILY-XXX: Try to change the openVariable and closeVariable to curly braces, so it's consistent with other templating engines\nfunction PreferencesEmailTemplatesCreate () {\n    HLInbox.init();\n    HLInbox.initWysihtml5();\n    HLEmailTemplates.init({\n        parseEmailTemplateUrl: '',\n        openVariable: '[[',\n        closeVariable: ']]'\n    });\n}\n","angular.module('app.preferences').controller('PreferencesSetTemplateDefaultModal', PreferencesSetTemplateDefaultModal);\n\nPreferencesSetTemplateDefaultModal.$inject = ['$http', '$modalInstance', '$scope', 'emailTemplate'];\nfunction PreferencesSetTemplateDefaultModal ($http, $modalInstance, $scope, emailTemplate) {\n    $scope.emailTemplate = emailTemplate;\n\n    $scope.ok = function () {\n        $http({\n            url: '/messaging/email/templates/set-default/' + $scope.emailTemplate.id + '/',\n            method: 'POST',\n            headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n            data: $.param({id: $scope.emailTemplate.id})\n        }).success(function() {\n            $modalInstance.close($scope.emailTemplate);\n        });\n    };\n\n    // Lets not change anything\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}\n","angular.module('app.preferences').config(preferencesConfig);\n\npreferencesConfig.$inject = ['$stateProvider'];\nfunction preferencesConfig($stateProvider) {\n    $stateProvider.state('base.preferences.emailtemplates.edit', {\n        url: '/edit/{id:[0-9]{1,}}',\n        views: {\n            '@base.preferences': {\n                templateUrl: function(elem, attr) {\n                    return '/messaging/email/templates/update/' + elem.id +'/';\n                },\n                controller: PreferencesEmailTemplatesEdit\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Email template edit'\n        }\n    });\n}\n\nangular.module('app.preferences').controller('PreferencesEmailTemplatesEdit', PreferencesEmailTemplatesEdit);\n\n// TODO: LILY-XXX: Try to change the openVariable and closeVariable to curly braces, so it's consistent with other templating engines\nfunction PreferencesEmailTemplatesEdit () {\n    HLInbox.init();\n    HLInbox.initWysihtml5();\n    HLEmailTemplates.init({\n        parseEmailTemplateUrl: '',\n        openVariable: '[[',\n        closeVariable: ']]'\n    });\n}\n\n","angular.module('app.preferences').config(preferencesConfig);\n\npreferencesConfig.$inject = ['$stateProvider'];\nfunction preferencesConfig($stateProvider) {\n    $stateProvider.state('base.preferences.emailtemplates', {\n        url: '/emailtemplates',\n        views: {\n            '@base.preferences': {\n                templateUrl: 'preferences/controllers/emailtemplate_list.html',\n                controller: PreferencesEmailTemplatesList\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Email templates'\n        }\n    });\n}\n\nangular.module('app.preferences').controller('PreferencesEmailTemplatesList', PreferencesEmailTemplatesList);\n\nPreferencesEmailTemplatesList.$inject = ['$modal', '$scope', 'EmailTemplate'];\nfunction PreferencesEmailTemplatesList ($modal, $scope, EmailTemplate) {\n    //$scope.conf.pageTitleBig = 'EmailTemplate settings';\n    //$scope.conf.pageTitleSmall = 'the devil is in the details';\n\n    EmailTemplate.query({}, function(data) {\n        $scope.emailTemplates = data;\n    });\n\n    $scope.makeDefault = function(emailTemplate) {\n        // TODO: LILY-756: Make this controller more Angular\n        var modalInstance = $modal.open({\n            templateUrl: '/messaging/email/templates/set-default/' + emailTemplate.id + '/',\n            controller: 'PreferencesSetTemplateDefaultModal',\n            size: 'lg',\n            resolve: {\n                emailTemplate: function () {\n                    return emailTemplate;\n                }\n            }\n        });\n\n        modalInstance.result.then(function () {\n            $state.go($state.current, {}, {reload: false});\n        }, function () {\n        });\n    };\n\n    $scope.deleteEmailTemplate = function(emailtemplate) {\n        if (confirm('Are you sure?')) {\n            EmailTemplate.delete({\n                id: emailtemplate.id\n            }, function() {  // On success\n                var index = $scope.emailTemplates.indexOf(emailtemplate);\n                $scope.emailTemplates.splice(index, 1);\n            }, function(error) {  // On error\n                alert('something went wrong.')\n            })\n        }\n    };\n}\n","angular.module('app.preferences').config(preferencesConfig);\n\npreferencesConfig.$inject = ['$stateProvider'];\nfunction preferencesConfig ($stateProvider) {\n    $stateProvider.state('base.preferences.user.account', {\n        url: '/account',\n        views: {\n            '@base.preferences': {\n                templateUrl: 'preferences/user/account/',\n                controller: PreferencesUserAccountController,\n                controllerAs: 'vm'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'account'\n        }\n    });\n}\n\n/**\n * PreferencesUserAccount is a controller to show the user account page.\n */\nangular.module('app.preferences').controller('PreferencesUserAccountController', PreferencesUserAccountController);\n\nPreferencesUserAccountController.$inject = ['$scope'];\nfunction PreferencesUserAccountController ($scope) {\n    $scope.$on('$viewContentLoaded', function() {\n        djangoPasswordStrength.initListeners();\n    });\n}\n","angular.module('app.preferences').config(preferencesConfig);\n\npreferencesConfig.$inject = ['$stateProvider'];\nfunction preferencesConfig ($stateProvider) {\n    $stateProvider.state('base.preferences.user.token', {\n        url: '/token',\n        views: {\n            '@base.preferences': {\n                templateUrl: 'preferences/controllers/user_apitoken.html',\n                controller: UserTokenController,\n                controllerAs: 'vm'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'account'\n        }\n    });\n}\n\n/**\n * PreferencesUserProfile is a controller to show the user profile page.\n */\nangular.module('app.preferences').controller('UserTokenController', UserTokenController);\n\nUserTokenController.$inject = ['User'];\nfunction UserTokenController (User) {\n    var vm = this;\n    vm.token = '';\n\n    vm.deleteToken = deleteToken;\n    vm.generateToken = generateToken;\n\n    activate();\n\n    /////\n\n    function activate() {\n        // Get the token of the current user\n        User.token(function(data) {\n            if (data.auth_token) {\n                vm.token = data.auth_token;\n            } else {\n                vm.token = '';\n            }\n        });\n    }\n\n    function deleteToken () {\n        // Get the token of the current user\n        User.deleteToken(function() {\n            vm.token = '';\n            toastr.success('And it\\'s gone!', 'Token deleted')\n        });\n    }\n\n    function generateToken() {\n        // Get the token of the current user\n        User.generateToken({},function(data) {\n            vm.token = data.auth_token;\n            toastr.success('I\\'ve created a new one', 'Token generated')\n        });\n    }\n}\n","angular.module('app.preferences').config(preferencesConfig);\n\npreferencesConfig.$inject = ['$stateProvider'];\nfunction preferencesConfig ($stateProvider) {\n    $stateProvider.state('base.preferences.user', {\n        url: '/user',\n        abstract: true,\n        ncyBreadcrumb: {\n            label: 'user'\n        }\n    });\n}\n","angular.module('app.preferences').config(preferencesConfig);\n\npreferencesConfig.$inject = ['$stateProvider'];\nfunction preferencesConfig ($stateProvider) {\n    $stateProvider.state('base.preferences.user.profile', {\n        url: '/profile',\n        views: {\n            '@base.preferences': {\n                templateUrl: 'preferences/user/profile/',\n                controller: PreferencesUserProfileController,\n                controllerAs: 'vm'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'profile'\n        }\n    });\n}\n\nangular.module('app.preferences').controller('PreferencesUserProfile', PreferencesUserProfileController);\nfunction PreferencesUserProfileController () {}\n"," angular.module('app.users.filters').filter('fullName', fullName);\n\n function fullName () {\n    return function(user) {\n        return [user.first_name, user.preposition, user.last_name].join(' ');\n    };\n}\n","angular.module('app.users.services').factory('User', User);\n\nUser.$inject = ['$resource'];\nfunction User ($resource) {\n    return $resource('/api/users/user/', null, {\n        me: {\n            method: 'GET',\n            url: '/api/users/user/me/',\n            isArray: false\n        },\n        update: {\n            method: 'PUT',\n            url: '/api/users/user/:id/'\n        },\n        token: {\n            method: 'GET',\n            url: '/api/users/user/token/'\n        },\n        deleteToken: {\n            method: 'DELETE',\n            url: '/api/users/user/token/'\n        },\n        generateToken: {\n            method: 'POST',\n            url: '/api/users/user/token/'\n        }\n    });\n}\n","angular.module('app.users.services').factory('UserTeams', UserTeams);\n\nUserTeams.$inject = ['$resource'];\nfunction UserTeams ($resource) {\n    return $resource('/api/users/team/', null, {\n        mine: {\n            method: 'GET',\n            url: '/api/users/team/mine/',\n            isArray: true\n        }\n    });\n}\n","angular.module('app.utils').controller('EditNoteModalController', EditNoteModalController);\n\nEditNoteModalController.$inject = ['$http', '$modalInstance', '$scope', 'note'];\nfunction EditNoteModalController($http, $modalInstance, $scope, note) {\n    $scope.note = note;\n    $scope.ok = function () {\n        $http({\n            url: '/notes/update/' + $scope.note.id + '/',\n            method: 'POST',\n            headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n            data: $.param({content: $scope.note.content, type: $scope.note.type})\n        }).success(function() {\n            $modalInstance.close($scope.note);\n        });\n    };\n\n    // Lets not change anything\n    $scope.cancel = function () {\n        $modalInstance.dismiss('cancel');\n    };\n}\n","angular.module('app.utils.directives').directive('historyAddNote', historyAddNoteDirective);\n\nfunction historyAddNoteDirective () {\n    return {\n        restrict: 'E',\n        scope: {\n            item: '='\n        },\n        templateUrl: 'utils/controllers/history_add_note.html',\n        controller: HistoryAddNoteController,\n        controllerAs: 'vm',\n        bindToController: true\n    }\n}\n\nHistoryAddNoteController.$inject = ['$http', '$state'];\nfunction HistoryAddNoteController ($http, $state) {\n    var vm = this;\n\n    vm.addNote = addNote;\n\n    //////\n\n    function addNote () {\n        $http({\n            method: 'POST',\n            url: '/notes/create/',\n            headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n            data: $.param({\n                content: vm.note,\n                type: 0,\n                content_type: vm.item.historyType,\n                object_id: vm.item.id\n            })\n        }).success(function() {\n            $state.go($state.current, {}, {reload: true});\n        });\n    }\n}\n","angular.module('app.utils.directives').directive('historyList', HistoryListDirective);\n\nHistoryListDirective.$inject = ['$filter', '$http', '$modal', '$q', '$state', 'EmailAccount', 'Note', 'NoteDetail', 'CaseDetail', 'DealDetail','EmailDetail'];\nfunction HistoryListDirective ($filter, $http, $modal, $q, $state, EmailAccount, Note, NoteDetail, CaseDetail, DealDetail, EmailDetail) {\n    return {\n        restrict: 'E',\n        replace: true,\n        scope: {\n            target: '=',\n            object: '='\n        },\n        templateUrl: 'utils/directives/historylist.html',\n        link: function (scope, element, attrs) {\n            var noteTargets = ['account', 'contact', 'deal', 'case'];\n            var caseTargets = ['account', 'contact'];\n            var dealTargets = ['account'];\n            var emailTargets = ['account', 'contact'];\n            var page = 0;\n            var pageSize = 15;\n\n            scope.history = {};\n            scope.history.list = [];\n            scope.history.types = {\n                '': {name: 'All', visible: true},\n                'note': {name: 'Notes', visible: false},\n                'case': {name: 'Cases',visible: false},\n                'deal': {name: 'Deals', visible: false},\n                'email': {name: 'Emails', visible: false}\n            };\n            scope.history.activeFilter = '';\n            scope.history.showMoreText = 'Show more';\n            scope.history.loadMore = loadMore;\n            scope.history.reloadHistory = reloadHistory;\n            scope.history.addNote = addNote;\n            scope.history.editNote = editNote;\n            scope.history.deleteNote = deleteNote;\n\n            scope.note = {};\n            scope.note.type = 0;\n\n            activate();\n\n            ////////\n\n            function activate() {\n                // Somehow calling autosize on page content load does not work\n                // in the historylist.\n                autosize($('textarea'));\n                loadMore();\n            }\n\n            function loadMore() {\n                if (!scope.object.$resolved) {\n                    scope.object.$promise.then(function(obj) {\n                        _fetchHistory(obj);\n                    })\n                } else {\n                    _fetchHistory(scope.object);\n                }\n            }\n\n            function reloadHistory() {\n                page -= 1;\n                loadMore();\n            }\n\n            function _fetchHistory(obj) {\n                var history = [];\n                var promises = [];\n                page += 1;\n                var neededLength = page * pageSize;\n\n                // Check if we need to fetch notes\n                if (noteTargets.indexOf(scope.target) != -1) {\n                    var notePromise = NoteDetail.query({filterquery: 'content_type:' + scope.target + ' AND object_id:' + obj.id, size: neededLength }).$promise;\n                    promises.push(notePromise);  // Add promise to list of all promises for later handling\n\n                    notePromise.then(function(results) {\n                        results.forEach(function(note) {\n                            history.push(note);\n                        });\n                    });\n                }\n\n                // Check if we need to fetch cases\n                if (caseTargets.indexOf(scope.target) != -1) {\n                    var casePromise = CaseDetail.query({filterquery: scope.target + ':' + obj.id, size: neededLength}).$promise;\n                    promises.push(casePromise);  // Add promise to list of all promises for later handling\n\n                    casePromise.then(function(results) {\n                        results.forEach(function(caseItem) {\n                            history.push(caseItem);\n                            NoteDetail.query({filterquery: 'content_type:case AND object_id:' + caseItem.id, size: 5})\n                                .$promise.then(function(notes) {\n                                    caseItem.notes = notes;\n                                });\n                        });\n                    });\n                }\n\n                // Check if we need to fetch deals\n                if (dealTargets.indexOf(scope.target) != -1) {\n                    var dealPromise = DealDetail.query({filterquery: scope.target + ':' + obj.id, size: neededLength}).$promise;\n                    promises.push(dealPromise);  // Add promise to list of all promises for later handling\n\n                    dealPromise.then(function(results) {\n                        results.forEach(function(deal) {\n                            NoteDetail.query({\n                                filterquery: 'content_type:deal AND object_id:' + deal.id,\n                                size: 5\n                            }).$promise.then(function (notes) {\n                                    deal.notes = notes;\n                                });\n                            history.push(deal);\n                        });\n                    });\n                }\n\n                // Check if we need to fetch emails\n                if (emailTargets.indexOf(scope.target) != -1) {\n                    var tenantEmailAccountPromise = EmailAccount.query().$promise;\n                    promises.push(tenantEmailAccountPromise); // Add tenant email query to promises list\n\n                    var emailPromise;\n                    if (scope.target == 'account') {\n                        emailPromise = EmailDetail.query({account_related: obj.id, size: neededLength}).$promise;\n                    } else {\n                        emailPromise = EmailDetail.query({contact_related: obj.id, size: neededLength}).$promise;\n                    }\n                    promises.push(emailPromise);  // Add promise to list of all promises for later handling\n\n                    $q.all([tenantEmailAccountPromise, emailPromise]).then(function(results) {\n                        var tenantEmailAccountList = results[0];\n                        var emailMessageList = results[1];\n\n                        emailMessageList.forEach(function(email) {\n                            tenantEmailAccountList.forEach(function (emailAddress) {\n                                if (emailAddress.email_address === email.sender_email) {\n                                    email.right = true;\n                                }\n                            });\n                            history.push(email);\n                        });\n                    });\n                }\n\n                // Get all history types and add them to a common history\n                $q.all(promises).then(function() {\n                    var orderedHistoryList = [];\n\n                    // Order our current historylist\n                    $filter('orderBy')(history, 'date', true).forEach(function(item) {\n                        // We have on of these items so we need to be able to filter on it\n                        scope.history.types[item.historyType].visible = true;\n\n                        // Push our item to our ordered list\n                        orderedHistoryList.push(item);\n                    });\n                    if (!orderedHistoryList) {\n                        // Make sure the max size of the list doesn't grow each click\n                        page -= 1;\n\n                        // Set the button text to inform the user what's happening\n                        scope.history.showMoreText = 'No history (refresh)';\n                    }\n                    else if (orderedHistoryList.length <= neededLength) {\n                        // Make sure the max size of the list doesn't grow each click\n                        page -= 1;\n\n                        // Set the button text to inform the user what's happening\n                        scope.history.showMoreText = 'End reached (refresh)';\n                    }\n\n                    // Set the historylist to our new list\n                    scope.history.list = orderedHistoryList.slice(0, neededLength);\n                });\n            }\n\n            function addNote(note) {\n                $http({\n                    method: 'POST',\n                    url: '/notes/create/',\n                    headers: {'Content-Type': 'application/x-www-form-urlencoded'},\n                    data: $.param({\n                        content: note.content,\n                        type: note.type,\n                        content_type: scope.target,\n                        object_id: scope.object.id\n                    })\n                }).success(function() {\n                    $state.go($state.current, {}, {reload: true});\n                });\n            }\n\n            function editNote(note) {\n                var modalInstance = $modal.open({\n                    templateUrl: 'utils/controllers/note_edit.html',\n                    controller: 'EditNoteModalController',\n                    size: 'lg',\n                    resolve: {\n                        note: function() {\n                            return note;\n                        }\n                    }\n                });\n\n                modalInstance.result.then(function() {\n                    $state.go($state.current, {}, {reload: true});\n                });\n            }\n\n            function deleteNote(note) {\n                if (confirm('Are you sure?')) {\n                    Note.delete({\n                        id:note.id\n                    }, function() {  // On success\n                        var index = scope.history.list.indexOf(note);\n                        scope.history.list.splice(index, 1);\n                    }, function(error) {  // On error\n                        alert('something went wrong.')\n                    });\n                }\n            }\n        }\n    }\n}\n\n","angular.module('app.utils.directives').directive('historyListItem', HistoryListItemDirective);\n\nHistoryListItemDirective.$inject = ['$compile', '$http', '$templateCache'];\nfunction HistoryListItemDirective($compile, $http, $templateCache) {\n    return {\n        restrict: 'E',\n        scope: {\n            item:'=',\n            history:'='\n        },\n        link: function(scope, element, attrs) {\n            var getTemplate = function(historyType) {\n                var templateLoader,\n                    baseUrl = 'utils/directives/history_list_',\n                    templateMap = {\n                        case: 'case.html',\n                        deal: 'deal.html',\n                        email: 'email.html',\n                        note: 'note.html'\n                    };\n\n                var templateUrl = baseUrl + templateMap[historyType];\n                templateLoader = $http.get(templateUrl, {cache: $templateCache});\n\n                return templateLoader;\n            };\n            getTemplate(scope.item.historyType).success(function(html) {\n                element.replaceWith($compile(html)(scope));\n            }).then(function () {\n                element.replaceWith($compile(element.html())(scope));\n            });\n        }\n    };\n}\n"],"sourceRoot":"/source/"}