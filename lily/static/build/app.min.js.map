{"version":3,"sources":["js/base/controllers/module.js","js/base/filters/module.js","js/base/directives/module.js","js/base/services/module.js","js/app.js","js/utils.js","js/analytics/analytics.js","js/provide/dataprovider.js","js/forms/formsets.js","js/forms/select2.js","js/forms/show-and-hide.js","js/base/filters/min_value.js","js/base/filters/nl2br.js","js/base/filters/relative_date.js","js/base/filters/trust_as_resource_url.js","js/base/directives/checkbox.js","js/base/directives/date_formatter.js","js/base/directives/detail_delete.js","js/base/directives/resize_iframe.js","js/base/directives/sort_column.js","js/base/directives/spinnerbar.js","js/base/controllers/base.js","js/base/controllers/header.js","js/base/controllers/sidebar.js","js/base/services/cookie.js","js/base/services/hl_date.js","js/base/services/hl_filters.js","js/base/services/hl_text.js","js/base/services/notifications.js"],"names":["angular","module","settings","$rootScope","layout","pageSidebarClosed","lilyAppConfig","$breadcrumbProvider","$controllerProvider","$httpProvider","$resourceProvider","$urlRouterProvider","setOptions","templateUrl","includeAbstract","allowGlobals","defaults","xsrfCookieName","xsrfHeaderName","stripTrailingSlashes","otherwise","runApp","$state","currentUser","factory","$inject","config","run","$","on","$phoneNumberInput","this","phone","val","match","typeId","attr","replace","select2","length","startsWith","substring","e","currentTarget","each","i","is","HLSelect2","init","s","o","g","r","a","m","q","push","arguments","l","Date","createElement","getElementsByTagName","async","src","parentNode","insertBefore","window","document","ga","undefined","HLDataProvider","buttonDataProvider","loadingText","loadingHeader","provideUrl","dataProviderClass","errorHeader","errorText","successHeader","successText","hiddenSuccessHeader","hiddenSuccessText","overwriteConfirmHeader","fields","formsets","self","isPlainObject","extend","initListeners","cf","event","findDataProviderInfo","call","which","preventDefault","button","$button","$form","closest","$input","domain","sanitizeDomain","toastr","info","url","getJSON","done","data","error","message","fillForm","success","fail","always","trim","slice","checkOverwrite","loopTroughFields","checkOverwriteFields","checkOverwriteLabels","confirm","join","forEach","field","find","fillField","loopTroughFormSets","filledHiddenField","parent","hasClass","label","parents","text","formset","$foundInput","$formsetDiv","$formsetAddLink","newFormsets","j","$newElement","newFormset","insertNewFormset","key","hasFoundInput","filter","newVal","click","value","uniqueValues","concat","split","index","indexOf","JSON","stringify","change","trigger","jQuery","HLFormsets","formsetClass","body","formset_element","add_element","indent","addClass","removeClass","stop","slideDown","toggleClass","removeAttr","tagInputs","ajaxInputs","tagsAjaxClass","ajaxPageLimit","clearText","setupSelect2","minimumResultsForSearch","createTagInputs","createAjaxInputs","hasOwnProperty","tags","$this","tokenSeparators","width","_data","options","ajax","cache","term","page","filterQuery","filterquery","size","sort","term_stripped","filters","filter_val","filter_name","type","results","more","total","parsed_data","hits","hit","email_addresses","used_text","name","email_address","displayed_text","id","object_id","unshift","initSelection","item","callback","createSearchChoice","localeCompare","openOnEnter","multiple","initial","HLShowAndHide","selector","input","setTimeout","minValue","values","b","nl2br","$sce","msg","is_xhtml","breakTag","trustAsHtml","relativeDate","$filter","date","fallbackDateFormat","compareWithMidnight","calculateDelta","day","delta","hour","minute","week","month","year","now","setHours","setMinutes","setSeconds","Math","round","getFullYear","getMonth","getDate","innerWidth","ceil","floor","trustAsResourceUrl","checkbox","restrict","transclude","scope","model","directive","dateFormatter","dateFilter","require","link","element","attrs","ngModel","$formatters","detailDelete","elem","go","resizeIframe","$scope","maxHeight","outerHeight","ifDoc","ifRef","contentWindow","documentElement","e1","contentDocument","e2","subtractHeights","offset","top","height","scrollHeight","sortColumn","_setSortableIcon","sorted","table","order","column","ascending","$watchCollection","$apply","ngSpinnerBar","$on","Metronic","scrollTop","pageAutoScrollOnLoad","appConfig","$stateProvider","state","abstract","controller","ncyBreadcrumb","baseController","Notifications","activate","_setPreviousState","_contentLoadedActions","loadNotifications","query","notifications","level","console","log","initComponents","autosize","toState","toParams","fromState","fromParams","previousState","href","conf","headTitle","pageTitleBig","pageTitleSmall","headerController","Layout","initHeader","sidebarController","initSidebar","Cookie","$cookieStore","CookieFactory","prefix","prototype","get","defaultValue","remove","put","service","HLDate","getSubtractedDate","days","setDate","HLFilters","updateFilterQuery","displayFilterClear","filterStrings","filterList","selected","clearFilters","HLText","String","hlCapitalize","newString","toLowerCase","charAt","toUpperCase","$resource"],"mappings":"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","file":"app.min.js","sourcesContent":["angular.module('app.base', [\n    'ui.bootstrap'\n]);\n","angular.module('app.filters', []);\n","/**\n * app.directives is a container for all global lily related Angular directives\n */\nangular.module('app.directives', []);\n","angular.module('app.services', []);\n","/**\n * lilyApp Module is the entry point for Lily related Angular code\n */\nangular.module('lilyApp', [\n    'ui.router',\n    'ui.bootstrap',\n    'ngResource',\n    'ngSanitize',\n    'ncy-angular-breadcrumb',\n\n    // Controllers\n    'app.accounts',\n    'app.base',\n    'app.cases',\n    'app.dashboard',\n    'app.email',\n    'app.preferences',\n    'app.preferences.email',\n    'app.preferences.user',\n    'app.templates',\n    'ContactsControllers',\n    'DealControllers',\n    'UtilsControllers',\n\n    // Directives\n    'app.directives',\n    'app.accounts.directives',\n    'app.cases.directives',\n    'app.contacts.directives',\n    'app.deals.directives',\n    'UtilsDirectives',\n\n    // Google Analytics\n    'angulartics',\n    'angulartics.google.analytics',\n\n    // Services\n    'app.services',\n\n    // Filters\n    'app.filters'\n]);\n\n/* Setup global settings */\nangular.module('lilyApp').factory('settings', settings);\n\nsettings.$inject = ['$rootScope'];\nfunction settings ($rootScope) {\n    // supported languages\n    var settings = {\n        layout: {\n            pageSidebarClosed: false // sidebar state\n        }\n    };\n\n    $rootScope.settings = settings;\n\n    return settings;\n}\n\nangular.module('lilyApp').config(lilyAppConfig);\n\nlilyAppConfig.$inject = [\n    '$breadcrumbProvider',\n    '$controllerProvider',\n    '$httpProvider',\n    '$resourceProvider',\n    '$urlRouterProvider'\n];\nfunction lilyAppConfig ($breadcrumbProvider, $controllerProvider, $httpProvider, $resourceProvider, $urlRouterProvider){\n    // Don't strip trailing slashes from calculated URLs, because django needs them\n    $breadcrumbProvider.setOptions({\n        templateUrl: 'breadcrumbs.html',\n        includeAbstract: true\n    });\n    $controllerProvider.allowGlobals();\n    $httpProvider.defaults.xsrfCookieName = 'csrftoken';\n    $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';\n    $resourceProvider.defaults.stripTrailingSlashes = false;\n    $urlRouterProvider.otherwise('/');\n}\n\n/* Init global settings and run the app */\nangular.module('lilyApp').run(runApp);\n\nrunApp.$inject = ['$rootScope', 'settings', '$state'];\nfunction runApp ($rootScope, $state) {\n    $rootScope.$state = $state; // state to be accessed from view\n    $rootScope.currentUser = currentUser;\n}\n","$(function() {\n\n    $('body').on('blur', 'input[name^=\"phone\"]', function() {\n        // Format telephone number\n        var $phoneNumberInput = $(this);\n        var phone = $phoneNumberInput.val();\n        if (phone.match(/[a-z]|[A-Z]/)) {\n            // if letters are found, skip formatting: it may not be a phone field after all\n            return false;\n        }\n\n        // Match on mobile phone nrs e.g. +316 or 06, so we can automatically set the type to mobile.\n        if (phone.match(/^\\+316|^06/)) {\n            var typeId = $phoneNumberInput.attr('id').replace('raw_input', 'type');\n            $('#' + typeId).select2('val', 'mobile');\n        }\n\n        phone = phone\n            .replace(\"(0)\",\"\")\n            .replace(/\\s|\\(|\\-|\\)|\\.|x|:|\\*/g, \"\")\n            .replace(/^00/,\"+\");\n\n        if (phone.length == 0) {\n            return false;\n        }\n\n        if (!phone.startsWith('+')) {\n            if (phone.startsWith('0')) {\n                phone = phone.substring(1);\n            }\n            phone = '+31' + phone;\n        }\n\n        if (phone.startsWith('+310')) {\n            phone = '+31' + phone.substring(4);\n        }\n        $phoneNumberInput.val(phone);\n    });\n\n    $('body').on('change', 'select[id*=\"is_primary\"]', function(e) {\n        if($(e.currentTarget).val() == 'True'){\n            $('select[id*=\"is_primary\"]').each(function(i){\n                if($(this).is('select') && $(this).val() == 'True'){\n                    $(this).val('False');\n                }\n            });\n            $(e.currentTarget).val('True');\n            HLSelect2.init();\n        }\n    });\n});\n\nfunction addBusinessDays(date, businessDays) {\n    var weeks = Math.floor(businessDays/5);\n    var days = businessDays % 5;\n    var day = date.getDay();\n    if (day === 6 && days > -1) {\n       if (days === 0) {days-=2; day+=2;}\n       days++; dy -= 6;}\n    if (day === 0 && days < 1) {\n       if (days === 0) {days+=2; day-=2;}\n       days--; day += 6;}\n    if (day + days > 5) days += 2;\n    if (day + days < 1) days -= 2;\n    date.setDate(date.getDate() + weeks * 7 + days);\n    return date;\n}\n","(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\nga('create', 'UA-60721851-1', 'auto');\n","(function($, window, document, undefined) {\n    window.HLDataProvider = {\n        config: {\n            buttonDataProvider: ':button.dataprovider',\n            loadingText: 'Beaming up the information now, almost within range!',\n            loadingHeader: 'I\\'m on my way!',\n            provideUrl: '/provide/account/',\n            dataProviderClass: '.dataprovider',\n            errorHeader: 'Oops!',\n            errorText: 'There was an error trying to fetch your data, please don\\'t be mad.',\n            successHeader: 'Yeah!',\n            successText: 'We did it! Your new data should be right there waiting for you.',\n            hiddenSuccessHeader: 'Psst!',\n            hiddenSuccessText: 'Did you know I did more work in the background? ;)',\n            overwriteConfirmHeader: 'Do you wish to overwrite the following fields?\\n',\n            fields: [\n                'name',\n                'description',\n                'legalentity',\n                'taxnumber',\n                'bankaccountnumber',\n                'cocnumber',\n                'iban',\n                'bic',\n            ],\n            formsets: [\n                'email_addresses',\n                'phone_numbers',\n                'addresses'\n            ]\n        },\n\n        init: function(config) {\n            // Setup config\n            var self = this;\n            if ($.isPlainObject(config)) {\n                $.extend(self.config, config);\n            }\n\n            self.initListeners();\n        },\n\n        initListeners: function() {\n            var self = this,\n                cf = self.config;\n\n            $('body').on('click', cf.buttonDataProvider, function(event) {\n                // On button press\n                self.findDataProviderInfo.call(self, this, event);\n            }).on('keydown', 'div' + cf.dataProviderClass + ' > input', function(event) {\n                // Catch ENTER on Dataprovider input\n                if (event.which === 13) {\n                    self.findDataProviderInfo.call(self, cf.buttonDataProvider, event);\n                    // Prevent form submission\n                    event.preventDefault();\n                }\n            });\n        },\n\n        findDataProviderInfo: function(button, event) {\n            var self = this,\n                cf = self.config,\n                $button = $(button),\n                $form = $button.closest('form'),\n                $input = $('div' + cf.dataProviderClass +' > input'),\n                domain = self.sanitizeDomain($input.val());\n\n            // Show busy gui to user\n            $button.button('loading');\n            toastr.info(cf.loadingText, cf.loadingHeader);\n\n            var url = cf.provideUrl + domain;\n            $.getJSON(url)\n                .done(function(data) {\n                    if (data.error) {\n                        toastr.error(data.error.message, cf.errorHeader);\n                    } else {\n                        self.fillForm($form, data, cf.fields, cf.formsets);\n                        toastr.success(cf.successText, cf.successHeader);\n                    }\n                })\n                .fail(function() {\n                    toastr.error(cf.errorText, cf.errorHeader);\n                })\n                .always(function() {\n                    $button.button('reset');\n                });\n\n            event.preventDefault();\n        },\n\n        sanitizeDomain: function(url) {\n            var domain = $.trim(url.replace('http://', ''));\n            domain = $.trim(domain.replace('https://', ''));\n            // Always add last '/'\n            if (domain.slice(-1) !== '/') {\n                domain += '/';\n            }\n            return domain;\n        },\n\n        fillForm: function($form, data, fields, formsets) {\n            var self = this,\n                cf = self.config;\n\n            var checkOverwrite = self.loopTroughFields(fields, $form, data),\n                checkOverwriteFields = checkOverwrite[0],\n                checkOverwriteLabels = checkOverwrite[1];\n\n            // Check if there are fields for which we need to do an overwrite check\n            if (checkOverwriteFields.length) {\n                // Ask the user whether to overwrite or not\n                if (confirm(cf.overwriteConfirmHeader + checkOverwriteLabels.join('\\n'))) {\n                    // Loop through fields that need to be overwritten\n                    checkOverwriteFields.forEach(function(field) {\n                        var $input = $form.find('[name=\"' + field + '\"]');\n                        self.fillField($input, data[field]);\n                    });\n                }\n            }\n\n            // Loop through formsets\n            self.loopTroughFormSets(formsets, $form, data);\n\n        },\n\n        loopTroughFields: function(fields, $form, data) {\n            var self = this,\n                cf = self.config,\n                checkOverwriteFields = [],\n                checkOverwriteLabels = [],\n                filledHiddenField = false;\n\n            // Loop through all fields\n            fields.forEach(function(field) {\n                // Input is the field in the current form\n                var $input = $form.find('[name=\"' + field + '\"]');\n                // Always clear the field if it's hidden\n                if ($input.attr('type') == 'hidden' || $input.parent().hasClass('hide')) {\n                    $input.val('');\n                    if (data[field]) {\n                        filledHiddenField = true;\n                    }\n                }\n                // Check if there is data for the field, else do nothing\n                if (data[field]) {\n                    // Check if the field does not exist in the current form\n                    if ($input.val() !== undefined) {\n                        // Check if the field has a value and that value is not the field placeholder\n                        if ($input.val().length && $input.val() !== $input.attr('placeholder')) {\n                            // Display label of field instead of field name\n                            var label = $input.parents('.form-group').find('label').text();\n                            // Field is not empty, check before overwrite\n                            checkOverwriteFields.push(field);\n                            checkOverwriteLabels.push('- ' + label);\n                        } else {\n                            // Field is empty, fill it with new data\n                            self.fillField($input, data[field]);\n                        }\n                    }\n                }\n            });\n\n            if (filledHiddenField) {\n                toastr.success(cf.hiddenSuccessText, cf.hiddenSuccessHeader);\n            }\n\n            return [checkOverwriteFields, checkOverwriteLabels];\n        },\n\n        loopTroughFormSets: function(formsets, $form, data){\n            for (var i=0; i < formsets.length; i++) {\n                var formset = formsets[i];\n                // Check if there is data for the formset\n                if (data[formset] && data[formset].length) {\n                    var $formsetDiv = $form.find('#' + formset),\n                        $formsetAddLink = $formsetDiv.find('[data-formset-add]'),\n                        newFormsets = data[formset],\n                        $foundInput;\n\n                    for (var j = 0; j < newFormsets.length; j++) {\n                        var newFormset = newFormsets[j],\n                            insertNewFormset = false,\n                            $newElement;\n\n                        if (typeof newFormset === 'object') {\n                            var key,\n                                hasFoundInput = false;\n                            for (key in newFormset) {\n                                $foundInput = $formsetDiv.find(':input[name$=\"' + key +'\"]');\n                                if ($foundInput.length){\n                                    hasFoundInput = true;\n                                    $foundInput = $foundInput.filter(function () {\n                                        var val = $(this).val(),\n                                            newVal = newFormset[key];\n\n                                        return ((val === '' && newVal === null) || val == newVal);\n                                    });\n                                    if (!$foundInput.length) {\n                                        // One of the values is different so we need to add a new formset\n                                        insertNewFormset = true;\n                                    }\n                                }\n                            }\n                            if (insertNewFormset || !hasFoundInput) {\n                                $formsetAddLink.click();\n                                $newElement =  $formsetDiv.find('[data-formset-body] [data-formset-form]:last');\n                                for (key in newFormset) {\n                                    $newElement.find(':input[name$=\"' + key +'\"]').val(newFormset[key]);\n                                }\n                            }\n                        } else if (typeof newFormset === 'string') {\n                            $foundInput = $formsetDiv.find(':input').filter(function () {\n                                return $(this).val() == newFormset;\n                            });\n                            if (!$foundInput.length) {\n                                $formsetAddLink.click();\n                                $newElement =  $formsetDiv.find('[data-formset-body] [data-formset-form]:last');\n                                $newElement.find(':input:first').val(newFormset);\n                            }\n                        }\n                    }\n                }\n            }\n        },\n\n        fillField: function($input, value) {\n            if (typeof value === 'string') {\n                // String\n                $input.val(value);\n            } else if (typeof value[0] === 'string') {\n                // List of strings\n                var uniqueValues = value.concat($input.val().split(',')).filter(function(val, index, self) {\n                    return (self.indexOf(val) === index) && (val !== '');\n                });\n                $input.val(uniqueValues.join());\n            } else {\n                // JSON object\n                $input.val(JSON.stringify(value));\n            }\n            $input.change();\n            if ($input.parent().hasClass('original-form-widget') && $input.parent().hasClass('hide')) {\n                // show the input, by reusing the click handler as defined in the utils.\n                $input.parents(\".show-and-hide-input\").find('a[data-action=\"show\"]').trigger('click');\n            }\n        }\n    }\n})(jQuery, window, document);\n","(function($, window, document, undefined){\n    window.HLFormsets = {\n        config: {\n            formsetClass: '.formset'\n        },\n        init: function (config) {\n            var self = this;\n            // Setup configuration\n            if ($.isPlainObject(config)) {\n                $.extend(self.config, config);\n            }\n\n            $(self.config.formsetClass).formset();\n            self.initListeners();\n        },\n\n        initListeners: function() {\n            var self = this;\n            var body = $('body');\n\n            body.on('formAdded', '[data-formset-form]', function() {\n                var formset_element = $(this).parents('.formset');\n                var add_element = $(formset_element).find('.add-link');\n\n                var indent = ($(formset_element).attr('data-formset-indent') || 'true') == 'true';\n                if(indent) {\n                    $(add_element).find('.form-control-static').addClass('col-md-offset-2').removeClass('form-control-static');\n                }\n                $(add_element).find('label').addClass('hide');\n\n                if ($(formset_element).find('[data-formset-form]').length === 1) {\n                    $(this).find('label.hide').removeClass('hide');\n\n                    if(indent) {\n                        $(this).find('.field_wrapper').removeClass('col-md-offset-2');\n                    }\n                }\n                HLSelect2.init();\n            });\n\n            body.on('formDeleted', '[data-formset-form]', function() {\n                $(this).stop().slideDown();\n                $(this).find(':input:enabled:visible').attr('data-formset-disabled', true).attr('readonly', 'readonly');\n                $(this).find('[data-formset-delete-button]').toggleClass('hidden');\n                $(this).find('[data-formset-undo-delete]').toggleClass('hidden');\n            });\n\n            body.on('click', '[data-formset-form] [data-formset-undo-delete]', function() {\n                var formset = $(this).closest('[data-formset-form]');\n\n                formset.find('[data-formset-disabled=true]').removeAttr('data-formset-disabled').removeAttr('readonly');\n                formset.find('input[name$=\"DELETE\"]').attr('checked', false).change();\n                formset.find('[data-formset-delete-button]').toggleClass('hidden');\n                $(this).toggleClass('hidden');\n            });\n\n        }\n    }\n})(jQuery, window, document);\n","(function($, window, document, undefined){\n    window.HLSelect2 = {\n        config: {\n            tagInputs: 'input.tags',\n            ajaxInputs: 'input.select2ajax',\n            tagsAjaxClass: 'tags-ajax',\n            ajaxPageLimit: 30,\n            clearText: '-- Clear --'\n        },\n\n        init: function( config ) {\n            var self = this;\n            // Setup configuration\n            if ($.isPlainObject(config)) {\n                $.extend(self.config, config);\n            }\n            // On initialize, setup select2\n            self.setupSelect2();\n            self.initListeners();\n        },\n\n        initListeners: function() {\n            var self = this;\n            // When modal is shown, lets instantiate the select2 in the modals\n            $(document).on('shown.bs.modal', '.modal', function() {\n                self.setupSelect2();\n            });\n        },\n\n        setupSelect2: function() {\n            // Setup select2 for non-ajaxified selects, ajaxified selects\n            // are using hidden inputs.\n            $('select').select2({\n                // at least this many results are needed to enable the search field\n                // (9 is the amount at which the user must scroll to see all items)\n                minimumResultsForSearch: 9\n            });\n            this.createTagInputs();\n            this.createAjaxInputs();\n        },\n\n        createTagInputs: function() {\n            // Setup tag inputs\n            $(this.config.tagInputs).each(function() {\n                if (!$(this).data().hasOwnProperty('select2')) {\n                    var tags = [];\n                    var $this = $(this);\n                    if ($this.data('choices')) {\n                        tags = $this.data('choices').split(',');\n                    }\n                    $this.select2({\n                        tags: tags,\n                        tokenSeparators: [',', ' '],\n                        width: '100%'\n                    });\n                }\n            });\n        },\n\n        createAjaxInputs: function() {\n            // Setup inputs that needs remote link\n            var self = this;\n            var cf = self.config;\n\n            $(cf.ajaxInputs).each(function() {\n                var $this = $(this);\n                var _data = $this.data();\n                // _data.tags is a marker for AjaxSelect2Widget which indicates\n                // that it expects multiple values as input.\n\n                // Prevent Select2 from being initialized on elements that already have Select2\n                if (!_data.hasOwnProperty('select2')) {\n                    var options = {\n                        ajax: {\n                            cache: true,\n                            data: function (term, page) {\n                                // page is the one-based page number tracked by Select2\n                                var data = null;\n\n                                if ($this.hasClass(cf.tagsAjaxClass) && !_data.tags) {\n                                    if (term === '') {\n                                        // elasticsearch breaks when the term is empty, so just look for non-empty results\n                                        term = '*';\n                                    }\n                                    // search for contacts and accounts containing the search term, but only those with an email address\n                                    var filterQuery = '((_type:contacts_contact AND (name:' + term + ' OR email_addresses.email_address:' + term + ')) ' +\n                                        'OR (_type:accounts_account AND (name:' + term + ' OR email_addresses.email_address:' + term + '))) ' +\n                                        'AND email_addresses.email_address:*';\n\n                                    data = {\n                                        filterquery: filterQuery,\n                                        size: cf.ajaxPageLimit, // page size\n                                        page: (page - 1), // page number, zero-based\n                                        sort: '-modified' //sort modified descending\n                                    };\n                                }\n                                else {\n                                    var term_stripped = term.trim();\n                                    data = {\n                                        filterquery: term_stripped ? 'name:('+term_stripped+')' : '', //search term\n                                        size: cf.ajaxPageLimit, // page size\n                                        page: (page - 1), // page number, zero-based\n                                        sort: '-modified' //sort modified descending\n                                    };\n                                }\n\n                                var filters = $this.data('filter-on');\n                                if (typeof filters !== 'undefined' && filters !== '') {\n                                    filters.split(',').forEach(function (filter) {\n                                        if (filter.indexOf('id_') === 0) {\n                                            var filter_val = $('#' + filter).val();\n                                            var filter_name = filter.substring(3);\n                                            if (filter_name.indexOf('case_quickbutton_') === 0) {\n                                                filter_name = filter.substring(20);\n                                            } else if (filter_name == 'account') {\n                                                // This is a special case at the moment, in the future we might have\n                                                // more cases like this.\n                                                // But for now, just do this check\n                                                filter_name = 'accounts.id';\n                                            }\n                                            if (filter_val && filter_val > 0) {\n                                                data.filterquery += ' ' + filter_name + ':' + filter_val;\n                                            }\n                                        } else {\n                                            data.type = filter;\n                                        }\n                                    });\n                                }\n\n                                return data;\n                            },\n\n                            results: function (data, page) {\n                                var more = (page * cf.ajaxPageLimit) < data.total; // whether or not there are more results available\n\n                                if ($this.hasClass(cf.tagsAjaxClass) && !_data.tags) {\n                                    var parsed_data = [];\n\n                                    data.hits.forEach(function (hit) {\n                                        // Only display contacts with an e-mail address\n                                        for (var i = 0; i < hit.email_addresses.length; i++) {\n                                            // The text which is actually used in the application\n                                            var used_text = '\"' + hit.name + '\" <' + hit.email_addresses[i].email_address + '>';\n                                            // The displayed text\n                                            var displayed_text = hit.name + ' <' + hit.email_addresses[i].email_address + '>';\n                                            // Select2 sends 'id' as the value, but we want to use the email\n                                            // So store the actual id (hit.id) under a different name\n                                            parsed_data.push({id: used_text, text: displayed_text, object_id: hit.id});\n                                        }\n                                    });\n\n                                    // Array elements with empty text can't be added to select2, so manually fill a new array\n                                    data.hits = parsed_data;\n                                }\n                                else {\n                                    data.hits.forEach(function (hit) {\n                                        hit.text = hit.name;\n                                    });\n                                }\n\n                                // Add clear option, but not for multiple select2.\n                                if ((page == 1 && !$this.hasClass(cf.tagsAjaxClass)) && !_data.tags) {\n                                    data.hits.unshift({id: -1, text:cf.clearText});\n                                }\n                                return {\n                                    results: data.hits,\n                                    more: more\n                                };\n                            }\n                        },\n\n                        initSelection: function (item, callback) {\n                            var id = item.val();\n                            var text = item.data('selected-text');\n                            var data = { id: id, text: text };\n                            callback(data);\n                        }\n                    };\n\n                    if ($this.hasClass(cf.tagsAjaxClass)) {\n                        options.tags = true;\n                        options.tokenSeparators = [',', ' '];\n                        // Create a new tag if there were no results\n                        options.createSearchChoice = function (term, data) {\n                            if ($(data).filter(function () {\n                                    return this.text.localeCompare(term) === 0;\n                                }).length === 0) {\n                                return {\n                                    id: term,\n                                    text: term\n                                };\n                            }\n                        };\n                        // Prevent select2 dropdown from opening when pressing enter\n                        options.openOnEnter = false;\n                    }\n\n                    // Set select2 to multiple.\n                    if(_data.tags) {\n                        options.tags = true;\n                        options.multiple = true;\n                    }\n\n\n                    $this.select2(options);\n                    // Set the initial form value from a JSON encoded data attribute called data-initial\n                    if(_data.tags) {\n                        $this.select2('data', _data.initial);\n                    }\n                }\n            });\n        }\n    };\n\n})(jQuery, window, document);\n","(function($, window, document, undefined){\n    window.HLShowAndHide = {\n        config: {\n            selector: '.show-and-hide-input'\n        },\n\n        init: function( config ) {\n            var self = this;\n            // Setup configuration\n            if ($.isPlainObject(config)) {\n                $.extend(self.config, config);\n            }\n            // On initialize, setup show and hide\n            self.initListeners();\n        },\n\n        initListeners: function() {\n            var self = this;\n\n            // When modal is shown, lets instantiate the select2 in the modals\n            $('body').on('click', '.form .toggle-original-form-input', function() {\n                var field = $(this).closest('.show-and-hide-input');\n\n                /* hide clicked link */\n                $(this).parent().addClass('hide');\n\n                /* toggle form input */\n                if($(this).data('action') == 'show') {\n                    /* show the other link */\n                    $(field).find('[data-action=\"hide\"]').parent().removeClass('hide');\n\n                    /* show the form input */\n                    $(field).find('.original-form-widget').removeClass('hide');\n\n                    /* (re)enable fields */\n                    $(field).find(':input').removeAttr('disabled');\n\n                    var input = $(field).find(':input:visible:not([type=\"file\"]):first');\n                    if(input) {\n                        /* adding to the end of the execution queue reliably sets the focus */\n                        /*  e.g. without, this only works once for select2 inputs */\n                        setTimeout(function() {\n                            // setCaretAtEnd(input);\n                        }, 0);\n                    }\n                } else if($(this).data('action') == 'hide') {\n                    /* show the other link */\n                    $(field).find('[data-action=\"show\"]').parent().removeClass('hide');\n\n                    /* hide the form input */\n                    $(field).find('.original-form-widget').addClass('hide');\n\n                    /* disabled fields will not be posted */\n                    $(field).find(':input').attr('disabled', 'disabled');\n                }\n            });\n        }\n    };\n\n})(jQuery, window, document);\n","angular.module('app.filters').filter('minValue', minValue);\nfunction minValue () {\n    return function(values) {\n        values.sort(function(a, b){return a-b});\n        return values[0];\n    }\n}\n","angular.module('app.filters').filter('nl2br', nl2br);\n\nnl2br.$inject = ['$sce'];\nfunction nl2br ($sce) {\n    return function(msg,is_xhtml) {\n        var is_xhtml = is_xhtml || true;\n        var breakTag = (is_xhtml) ? '<br />' : '<br>';\n        var msg = (msg + '').replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1'+ breakTag +'$2');\n        return $sce.trustAsHtml(msg);\n    }\n}\n","/**\n * relativeDate filter is a filter that represents the date in a nice format\n *\n * relativeDate will return a relative date string given the date. If the\n * date is to far in the past, it will fallback to angulars $filter\n *\n * @param: date {date|string} : date object or date string to transform\n * @param: fallbackDateFormat string (optional): fallback $filter argument\n * @param: compareWithMidnight boolean (optional): should the date comparison be with midnight or not\n *\n * @returns: string : a relative date string\n *\n * usage:\n *\n * {{ '2014-11-19T12:44:15.795312+00:00' | relativeDate }}\n */\nangular.module('app.filters').filter('relativeDate', relativeDate);\n\nrelativeDate.$inject = ['$filter'];\nfunction relativeDate ($filter) {\n    return function (date, fallbackDateFormat, compareWithMidnight) {\n        // Get current date\n        var now = new Date(),\n            calculateDelta, day, delta, hour, minute, week, month, year;\n\n        // If date is a string, format to date object\n        if (!(date instanceof Date)) {\n            date = new Date(date);\n            if (compareWithMidnight) {\n                // In certain cases we want to compare with midnight\n                date.setHours(23);\n                date.setMinutes(59);\n                date.setSeconds(59);\n            }\n        }\n\n        delta = null;\n        minute = 60;\n        hour = minute * 60;\n        day = hour * 24;\n        week = day * 7;\n        month = day * 30;\n        year = day * 365;\n\n        // Calculate delta in seconds\n        calculateDelta = function () {\n            return delta = Math.round((date - now) / 1000);\n        };\n\n        calculateDelta();\n\n        if (delta > day && delta < week) {\n            date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n            if (compareWithMidnight) {\n                // In certain cases we want to compare with midnight\n                date.setHours(23);\n                date.setMinutes(59);\n                date.setSeconds(59);\n            }\n            calculateDelta();\n        }\n\n        if (!fallbackDateFormat) {\n            if (window.innerWidth < 992) {\n                // Display as a short version if it's a small screen (tablet, smartphone, etc.)\n                fallbackDateFormat = 'dd MMM. yyyy'; // Renders as 29 Jan. 2015\n            }\n            else {\n                fallbackDateFormat = 'dd MMMM yyyy'; // Renders as 29 January 2015\n            }\n        }\n\n        // Check delta and return result\n        if (delta < 0) {\n            switch (false) {\n                case !(-delta > week):\n                    return $filter('date')(date, fallbackDateFormat);\n                case !(-delta > day * 2):\n                    return '' + -(Math.ceil(delta / day)) + ' days ago';\n                case !(-delta > day):\n                    return 'yesterday';\n                case !(-delta > hour):\n                    return '' + -(Math.ceil(delta / hour)) + ' hours ago';\n                case !(-delta > minute * 2):\n                    return '' + -(Math.ceil(delta / minute)) + ' minutes ago';\n                case !(-delta > minute):\n                    return 'a minutes ago';\n                case !(-delta > 30):\n                    return '' + -delta + ' seconds ago';\n                default:\n                    return 'just now';\n            }\n        } else {\n            switch (false) {\n                case !(delta < 30):\n                    return 'just now';\n                case !(delta < minute):\n                    return '' + delta + ' seconds';\n                case !(delta < 2 * minute):\n                    return 'a minute';\n                case !(delta < hour):\n                    return '' + (Math.floor(delta / minute)) + ' minutes';\n                case Math.floor(delta / hour) !== 1:\n                    return 'an hour';\n                case !(delta < day):\n                    return '' + (Math.floor(delta / hour)) + ' hours';\n                case !(delta < day * 2):\n                    return 'tomorrow';\n                case !(delta < week):\n                    return '' + (Math.floor(delta / day)) + ' days';\n                case Math.floor(delta / week) !== 1:\n                    return 'a week';\n                default:\n                    // Use angular $filter\n                    return $filter('date')(date, fallbackDateFormat);\n            }\n        }\n    }\n}\n","angular.module('app.filters').filter('trustAsResourceUrl', trustAsResourceUrl);\n\ntrustAsResourceUrl.$inject = ['$sce'];\nfunction trustAsResourceUrl ($sce) {\n    return function(val) {\n        return $sce.trustAsResourceUrl(val);\n    };\n}\n","/**\n * checkbox Directive makes a nice uniform checkbox and binds to a model\n *\n * @param model object: model to bind checkbox with\n *\n * Example:\n * <checkbox model=\"table.visibility.name\">Name</checkbox>\n */\nangular.module('app.directives').directive('checkbox', checkbox);\n\nfunction checkbox () {\n    return {\n        restrict: 'E',\n        replace: true,\n        transclude: true,\n        scope: {\n            model: '='\n        },\n        templateUrl: 'js/base/directives/checkbox.html'\n    }\n}\n","/**\n * Directive give a nice formatting on input elements.\n *\n * It makes sure that the value of the ngModel on the scope has a nice\n * formatting for the user\n */\nangular.module('app.directives').directive('dateFormatter', dateFormatter);\n\ndateFormatter.$inject = ['dateFilter'];\nfunction dateFormatter(dateFilter) {\n    return {\n        restrict: 'A',\n        require: 'ngModel',\n        link: function(scope, element, attrs, ngModel) {\n            ngModel.$formatters.push(function(value) {\n                if (value) {\n                    return dateFilter(value, attrs.dateFormatter);\n                }\n            })\n        }\n    }\n}\n","/**\n * Directive for a confirmation box before the delete in the detail\n * view happens\n */\nangular.module('app.directives').directive('detailDelete', detailDelete);\n\ndetailDelete.$inject = ['$state'];\nfunction detailDelete ($state) {\n    return {\n        restrict: 'A',\n        link: function (scope, elem, attrs) {\n\n            $(elem).click(function () {\n                if (confirm('You are deleting! Are you sure ?')) {\n                    $state.go('.delete');\n                }\n            });\n        }\n    }\n}\n","angular.module('app.directives').directive('resizeIframe', resizeIframe);\n\nfunction resizeIframe () {\n    return {\n        restrict: 'A',\n        link: function ($scope, element, attrs) {\n            var maxHeight = $('body').outerHeight();\n            element.on('load', function() {\n                element.removeClass('hidden');\n\n                // do this after .inbox-view is visible\n                var ifDoc, ifRef = this;\n\n                // set ifDoc to 'document' from frame\n                try {\n                    ifDoc = ifRef.contentWindow.document.documentElement;\n                } catch (e1) {\n                    try {\n                        ifDoc = ifRef.contentDocument.documentElement;\n                    } catch (e2) {\n                    }\n                }\n\n                // calculate and set max height for frame\n                if (ifDoc) {\n                    var subtractHeights = [\n                        element.offset().top,\n                        $('.footer').outerHeight(),\n                        $('.inbox-attached').outerHeight()\n                    ];\n                    for (var height in subtractHeights) {\n                        maxHeight = maxHeight - height;\n                    }\n\n                    if (ifDoc.scrollHeight > maxHeight) {\n                        ifRef.height = maxHeight;\n                    } else {\n                        ifRef.height = ifDoc.scrollHeight;\n                    }\n                }\n            });\n        }\n    }\n}\n","/**\n * sortColumn Directive adds sorting classes to an DOM element based on `table` object\n *\n * It makes the element clickable and sets the table sorting based on that element\n *\n * @param sortColumn string: name of the column to sort on when clicked\n * @param table object: The object to bind sort column and ordering\n *\n * Example:\n *\n * <th sort-column=\"last_name\" table=\"table\">Name</th>\n *\n * Possible classes:\n * - sorting: Unsorted\n * - sorting_asc: Sorted ascending\n * - sorting_desc: Sorted descending\n */\nangular.module('app.directives').directive('sortColumn', sortColumn);\n\nfunction sortColumn () {\n    /**\n     * _setSortableIcon() removes current sorting classes and adds new based on current\n     * sorting column and direction\n     *\n     * @param $scope object: current scope\n     * @param element object: current DOM element\n     * @param sortColumn string: column from current DOM element\n     */\n    var _setSortableIcon = function($scope, element, sortColumn) {\n        // Add classes based on current sorted column\n        if($scope.table.order.column === sortColumn) {\n            if ($scope.table.order.ascending) {\n                $scope.sorted = 1;\n            } else {\n                $scope.sorted = -1;\n            }\n        } else {\n            $scope.sorted = 0;\n        }\n    };\n\n    return {\n        restrict: 'A',\n        scope: {\n            table: '='\n        },\n        transclude: true,\n        templateUrl: 'js/base/directives/sort_column.html',\n        link: function ($scope, element, attrs) {\n            // Watch the table ordering & sorting\n            $scope.$watchCollection('table.order', function() {\n                _setSortableIcon($scope, element, attrs.sortColumn);\n            });\n\n            // When element is clicked, set the table ordering & sorting based on this DOM element\n            element.on('click', function() {\n                if($scope.table.order.column === attrs.sortColumn) {\n                    $scope.table.order.ascending = !$scope.table.order.ascending;\n                    $scope.$apply();\n                } else {\n                    $scope.table.order.column = attrs.sortColumn;\n                    $scope.$apply();\n                }\n            });\n        }\n    }\n}\n","angular.module('app.directives').directive('ngSpinnerBar', ngSpinnerBar);\n\nngSpinnerBar.$inject = ['$rootScope'];\nfunction ngSpinnerBar ($rootScope) {\n    return {\n        link: function(scope, element, attrs) {\n            // by defult hide the spinner bar\n            element.addClass('hide'); // hide spinner bar by default\n\n            // display the spinner bar whenever the route changes(the content part started loading)\n            $rootScope.$on('$stateChangeStart', function() {\n                element.removeClass('hide'); // show spinner bar\n            });\n\n            // hide the spinner bar on rounte change success(after the content loaded)\n            $rootScope.$on('$stateChangeSuccess', function() {\n                element.addClass('hide'); // hide spinner bar\n                $('body').removeClass('page-on-load'); // remove page loading indicator\n\n                // auto scroll to page top\n                setTimeout(function () {\n                    Metronic.scrollTop(); // scroll to the top on content load\n                }, $rootScope.settings.layout.pageAutoScrollOnLoad);\n            });\n\n            // handle errors\n            $rootScope.$on('$stateNotFound', function() {\n                element.addClass('hide'); // hide spinner bar\n            });\n\n            // handle errors\n            $rootScope.$on('$stateChangeError', function() {\n                element.addClass('hide'); // hide spinner bar\n            });\n        }\n    };\n}\n","angular.module('app.base').config(appConfig);\n\nappConfig.$inject = ['$stateProvider'];\nfunction appConfig ($stateProvider) {\n    $stateProvider.state('base', {\n        abstract: true,\n        controller: 'baseController',\n        ncyBreadcrumb: {\n            label: 'Lily'\n        }\n    });\n}\n\n/**\n * BaseController is the controller where all the default things are loaded\n *\n */\nangular.module('app.base').controller('baseController', baseController);\n\nbaseController.$inject = ['$scope', '$state', 'Notifications'];\nfunction baseController ($scope, $state, Notifications) {\n        $scope.conf = {\n            headTitle: 'Welcome!',\n            pageTitleBig: 'HelloLily',\n            pageTitleSmall: 'welcome to my humble abode!'\n        };\n\n        $scope.loadNotifications = loadNotifications;\n\n        activate();\n\n        //////////\n\n        function activate(){\n            $scope.$on('$stateChangeSuccess', _setPreviousState);\n            $scope.$on('$viewContentLoaded', _contentLoadedActions);\n        }\n\n        function loadNotifications() {\n            Notifications.query(function(notifications) {  // On success\n                angular.forEach(notifications, function(message) {\n                    toastr[message.level](message.message);\n                });\n            }, function(error) {  // On error\n                console.log('error!');\n                console.log(error);\n            })\n        }\n\n        function _contentLoadedActions() {\n            Metronic.initComponents(); // init core components\n            HLSelect2.init();\n            HLFormsets.init();\n            HLShowAndHide.init();\n            autosize($('textarea'));\n\n            $scope.loadNotifications();\n        }\n\n        function _setPreviousState(event, toState, toParams, fromState, fromParams){\n            $scope.previousState = $state.href(fromState, fromParams);\n        }\n}\n","angular.module('app.base').controller('headerController', headerController);\n\nheaderController.$inject = ['$scope'];\nfunction headerController ($scope) {\n    $scope.$on('$includeContentLoaded', function() {\n        Layout.initHeader(); // init header\n    });\n}\n","angular.module('app.base').controller('sidebarController', sidebarController);\n\nsidebarController.$inject = ['$scope'];\nfunction sidebarController ($scope) {\n    $scope.$on('$includeContentLoaded', function() {\n        Layout.initSidebar(); // init sidebar\n    });\n}\n","/**\n * Cookie Service provides a simple interface to get and store cookie values\n *\n * Set `prefix` to give cookie keys a prefix\n */\nangular.module('app.services').service('Cookie', Cookie);\n\nCookie.$inject = ['$cookieStore'];\nfunction Cookie ($cookieStore) {\n    function CookieFactory (prefix) {\n        return new Cookie(prefix);\n    }\n\n    function Cookie(prefix) {\n        this.prefix = prefix;\n    }\n\n    /**\n     * getCookieValue() tries to retrieve a value from the cookie, or returns default value\n     *\n     * @param field string: key to retrieve info from\n     * @param defaultValue {*}: default value when nothing set on cache\n     * @returns {*}: retrieved or default value\n     */\n    Cookie.prototype.get = function (field, defaultValue) {\n        try {\n            var value = $cookieStore.get(this.prefix + field);\n            return (value !== undefined) ? value : defaultValue;\n        } catch (error) {\n            $cookieStore.remove(this.prefix + field);\n            return defaultValue;\n        }\n    };\n\n    /**\n     * setCookieValue() sets value on the cookie\n     *\n     * It prefixes the field to make field unique for this controller\n     *\n     * @param field string: the key on which to store the value\n     * @param value {*}: JSON serializable object to store\n     */\n    Cookie.prototype.put = function (field, value) {\n        $cookieStore.put(this.prefix + field, value);\n    };\n\n    return CookieFactory;\n}\n","angular.module('app.services').service('HLDate', HLDate);\n\nfunction HLDate () {\n    /**\n     * getSubtractedDate() subtracts x amount of days from the current date\n     *\n     * @param days (int): amount of days to subtract from the current date\n     *\n     * @returns (string): returns the subtracted date in a yyyy-mm-dd format\n     */\n    this.getSubtractedDate = function (days) {\n        var date = new Date();\n        date.setDate(date.getDate() - days);\n\n        return date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();\n    };\n}\n","angular.module('app.services').service('HLFilters', HLFilters);\n\nfunction HLFilters () {\n    this.updateFilterQuery = function ($scope) {\n        $scope.table.filterQuery = '';\n        $scope.displayFilterClear = false;\n        var filterStrings = [];\n\n        for (var i = 0; i < $scope.filterList.length; i++) {\n            var filter = $scope.filterList[i];\n            if (filter.id && filter.id == 'archived') {\n                if (!filter.selected) {\n                    filterStrings.push('archived:false');\n                }\n                else {\n                    $scope.displayFilterClear = true;\n                }\n            }\n            else {\n                if (filter.selected) {\n                    filterStrings.push(filter.value);\n                    $scope.displayFilterClear = true;\n                }\n            }\n        }\n\n        $scope.table.filterQuery = filterStrings.join(' AND ');\n    };\n\n    this.clearFilters = function ($scope) {\n        for (var i = 0; i < $scope.filterList.length; i++) {\n            $scope.filterList[i].selected = false;\n        }\n\n        $scope.updateFilterQuery();\n    };\n}\n","angular.module('app.services').service('HLText', HLText);\nfunction HLText () {\n    /**\n     * hlCapitalize() lowercases the whole string and makes the first character uppercase\n     * This means 'STRING' becomes 'String'\n     *\n     * @returns (string): returns a string with only the first character uppercased\n     */\n    String.prototype.hlCapitalize = function () {\n        var newString = this.toLowerCase();\n        return newString.charAt(0).toUpperCase() + newString.substring(1);\n    }\n}\n","angular.module('app.services').factory('Notifications', Notifications);\n\nNotifications.$inject = ['$resource'];\n\nfunction Notifications ($resource) {\n    return $resource('/api/utils/notifications/');\n}\n"],"sourceRoot":"/source/"}