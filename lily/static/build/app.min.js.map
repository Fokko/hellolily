{"version":3,"sources":["accounts/module.js","cases/module.js","accounts/directives/module.js","base/controllers/module.js","base/directives/module.js","base/filters/module.js","base/services/module.js","cases/directives/module.js","cases/services/module.js","accounts/services.js","base/analytics.js","base/app.js","base/utils.js","cases/cases.js","forms/formsets.js","forms/select2.js","forms/show-and-hide.js","provide/dataprovider.js","accounts/controllers/delete.js","accounts/controllers/detail.js","accounts/controllers/list.js","accounts/controllers/upsert.js","accounts/directives/detail_widget.js","base/controllers/base.js","base/controllers/header.js","base/controllers/sidebar.js","base/directives/checkbox.js","base/directives/date_formatter.js","base/directives/detail_delete.js","base/directives/resize_iframe.js","base/directives/sort_column.js","base/directives/spinnerbar.js","base/filters/min_value.js","base/filters/nl2br.js","base/filters/relative_date.js","base/filters/trust_as_resource_url.js","base/services/cookie.js","base/services/hl_date.js","base/services/hl_filters.js","base/services/hl_text.js","base/services/notifications.js","cases/controllers/assignto.js","cases/controllers/create.js","cases/controllers/delete.js","cases/controllers/detail.js","cases/controllers/edit.js","cases/controllers/list.js","cases/controllers/postpone.js","cases/directives/list_widget.js","cases/directives/update_expire_date.js","cases/services/case.js","cases/services/casedetail.js","cases/services/casestatus.js","cases/services/unassignedcases.js"],"names":["angular","module","Account","$filter","$http","$resource","getAccounts","queryString","page","pageSize","orderColumn","orderedAsc","sort","url","method","params","type","q","size","then","response","accounts","data","hits","total","getEmailAddress","account","this","primaryEmails","email_addresses","status","length","update","id","delete","prototype","factory","getPhone","phone_mobile","phone_work","phone_other","getPhones","phones","concat","get","transformResponse","fromJson","phone","$inject","i","s","o","g","r","a","m","push","arguments","l","Date","createElement","getElementsByTagName","async","src","parentNode","insertBefore","window","document","ga","settings","$rootScope","layout","pageSidebarClosed","appConfig","$breadcrumbProvider","$controllerProvider","$httpProvider","$resourceProvider","$urlRouterProvider","setOptions","templateUrl","includeAbstract","allowGlobals","defaults","xsrfCookieName","xsrfHeaderName","stripTrailingSlashes","otherwise","runApp","$state","currentUser","config","run","$","on","$phoneNumberInput","val","match","typeId","attr","replace","select2","startsWith","substring","e","currentTarget","each","is","HLSelect2","init","undefined","currentStatus","HLCases","caseUpdateUrl","caseUpdateAssignedToUrl","caseId","statusSpan","statusDiv","parcelProviderSelect","parcelIdentifierInput","assignedToField","assignToMeButton","currentAssignedTo","self","isPlainObject","extend","initListeners","setCurrentStatus","cf","event","changeStatus","call","changedParcelProviderSelect","changeAssignedTo","closest","radio_element","target","$radio_element","ajax","beforeSend","HLApp","addCSRFHeader","dataType","done","text","load_notifications","fail","removeClass","addClass","select","$select","assignee","html","name","always","addAssignToMeButton","after","click","preventDefault","change","jQuery","HLFormsets","formsetClass","formset","body","formset_element","parents","add_element","find","indent","stop","slideDown","toggleClass","removeAttr","tagInputs","ajaxInputs","tagsAjaxClass","ajaxPageLimit","clearText","setupSelect2","minimumResultsForSearch","createTagInputs","createAjaxInputs","hasOwnProperty","tags","$this","split","tokenSeparators","width","_data","options","cache","term","hasClass","filterQuery","filterquery","term_stripped","trim","filters","forEach","filter","indexOf","filter_val","filter_name","results","more","parsed_data","hit","used_text","email_address","displayed_text","object_id","unshift","initSelection","item","callback","createSearchChoice","localeCompare","openOnEnter","multiple","initial","HLShowAndHide","selector","field","parent","input","setTimeout","HLDataProvider","buttonDataProvider","loadingText","loadingHeader","provideUrl","dataProviderClass","errorHeader","errorText","successHeader","successText","hiddenSuccessHeader","hiddenSuccessText","overwriteConfirmHeader","fields","formsets","findDataProviderInfo","which","button","$button","$form","$input","domain","sanitizeDomain","toastr","info","getJSON","error","message","fillForm","success","slice","checkOverwrite","loopTroughFields","checkOverwriteFields","checkOverwriteLabels","confirm","join","fillField","loopTroughFormSets","filledHiddenField","label","$foundInput","$formsetDiv","$formsetAddLink","newFormsets","j","$newElement","newFormset","insertNewFormset","key","hasFoundInput","newVal","value","uniqueValues","index","JSON","stringify","trigger","accountConfig","$stateProvider","state","views","@","controller","AccountDeleteController","$stateParams","go","AccountDetailController","ncyBreadcrumb","resolve","AccountDetail","accountId","$promise","$scope","CaseDetail","ContactDetail","DealDetail","conf","pageTitleBig","pageTitleSmall","caseList","query","dealList","contactList","AccountList","controllerAs","$window","Cookie","activate","_setupWatches","deleteAccount","vm","table","items","splice","alert","_updateTableSettings","cookie","put","order","visibility","_updateAccounts","column","ascending","totalItems","$watchGroup","$watchCollection","setFilter","exportToCsv","getParams","substr","open","contactInformation","assignedTo","created","modified","customerId","elem","AccountUpsertController","accountPromise","AccountDetailWidget","restrict","scope","height","directive","abstract","baseController","Notifications","$on","_setPreviousState","_contentLoadedActions","loadNotifications","notifications","level","console","log","Metronic","initComponents","autosize","toState","toParams","fromState","fromParams","previousState","href","headTitle","headerController","Layout","initHeader","sidebarController","initSidebar","checkbox","transclude","model","dateFormatter","dateFilter","require","link","element","attrs","ngModel","$formatters","detailDelete","resizeIframe","maxHeight","outerHeight","ifDoc","ifRef","contentWindow","documentElement","e1","contentDocument","e2","subtractHeights","offset","top","scrollHeight","sortColumn","_setSortableIcon","sorted","$apply","ngSpinnerBar","scrollTop","pageAutoScrollOnLoad","minValue","values","b","nl2br","$sce","msg","is_xhtml","breakTag","trustAsHtml","relativeDate","date","fallbackDateFormat","compareWithMidnight","calculateDelta","day","delta","hour","minute","week","month","year","now","setHours","setMinutes","setSeconds","Math","round","getFullYear","getMonth","getDate","innerWidth","ceil","floor","trustAsResourceUrl","$cookieStore","CookieFactory","prefix","defaultValue","remove","service","HLDate","getSubtractedDate","days","setDate","HLFilters","updateFilterQuery","displayFilterClear","filterStrings","filterList","selected","clearFilters","HLText","String","hlCapitalize","newString","toLowerCase","charAt","toUpperCase","CaseAssignModal","$modalInstance","myCase","Case","User","_getUsers","users","ok","assigned_to","currentAssigneeId","close","cancel","dismiss","assigned_to_id","caseConfig","CaseCreateController","skip","CaseDeleteController","req","headers","Content-Type","CaseDetailController","$modal","CaseStatuses","getPriorityDisplay","is_archived","priority","changeCaseStatus","assignCase","assigned_to_name","archive","archived","unarchive","openPostponeWidget","modalInstance","result","current","reload","caseStatuses","CaseEditController","casePromise","caseObject","subject","CaseListController","$location","getFilterList","filterListCookie","getCaseTypes","cases","updateTableSettings","searchQuery","updateCases","getCases","search","client","expires","createdBy","setSearchQuery","toggleArchived","assignTo","CasePostponeModal","_watchCloseDatePicker","$watch","newValue","oldValue","_updateDayAndCloseModal","expireDate","newDate","disabledDates","mode","getDay","openDatePicker","$event","stopPropagation","pickerIsOpen","postponeWithDays","getFutureDate","futureDate","dateFormat","datepickerOptions","startingDay","CaseListWidget","title","list","addLink","updateCaseExpireDate","daysToAdd","parseInt","isNaN","due","addBusinessDays","datepicker","$q","_getSorting","casetypes","sorting","getMyCasesWidget","deferred","defer","promise","getCallbackRequests","callbackCase","accountPhone","contact","contactPhone","getUnassignedCasesForTeam","teamId","isArray","objects","obj","historyType","color","totalize","UnassignedTeamCases"],"mappings":"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","file":"app.min.js","sourcesContent":["/**\n * app.accounts manages all routes, controllers eg.\n * that relate to Account.\n */\nangular.module('app.accounts', [\n    'ngCookies',\n    'ui.bootstrap',\n    'ui.slimscroll',\n    'app.accounts.services',\n    'app.cases.services',\n    'app.email.services',\n    'contactServices',\n    'noteServices'\n]);\n","angular.module('app.cases', [\n    // Angular dependencies\n    'ngCookies',\n\n    // 3rd party\n    'ui.bootstrap',\n\n    // Lily dependencies\n    'app.accounts.services',\n    'app.cases.services',\n    'app.email.services',\n    'contactServices',\n    'noteServices'\n]);\n","angular.module('app.accounts.directives', []);\n","angular.module('app.base', [\n    'ui.bootstrap'\n]);\n","/**\n * app.directives is a container for all global lily related Angular directives\n */\nangular.module('app.directives', []);\n","angular.module('app.filters', []);\n","angular.module('app.services', []);\n","angular.module('app.cases.directives', []);\n","angular.module('app.cases.services', ['ngResource']);\n","(function () {\n    'use strict';\n\n    /**\n     * accountServices is a container for all account related Angular services\n     */\n    angular.module('app.accounts.services', [\n        'ngResource'\n    ]);\n\n    /**\n     * $resource for Account model, now only used for detail page.\n     */\n    angular.module('app.accounts.services').factory('AccountDetail', ['$resource', function($resource) {\n        function getPhone(account) {\n            if (account.phone_mobile) return account.phone_mobile[0];\n            if (account.phone_work) return account.phone_work[0];\n            if (account.phone_other) return account.phone_other[0];\n            return '';\n        }\n        function getPhones(account) {\n            var phones = [];\n            if (account.phone_mobile) phones = phones.concat(account.phone_mobile);\n            if (account.phone_work) phones = phones.concat(account.phone_work);\n            if (account.phone_other) phones = phones.concat(account.phone_other);\n            return phones;\n        }\n        return $resource(\n            '/search/search/?type=accounts_account&filterquery=id\\::id',\n            {},\n            {\n                get: {\n                    transformResponse: function(data) {\n                        data = angular.fromJson(data);\n                        if (data && data.hits && data.hits.length > 0) {\n                            var account = data.hits[0];\n                            account.phone = getPhone(account);\n                            account.phones = getPhones(account);\n                            return account;\n                        }\n                        return null;\n                    }\n                }\n            }\n        );\n    }]);\n\n    /**\n     * Account Service makes it possible to get Accounts from search backend\n     *\n     * @returns: Account object: object with functions related to Accounts\n     */\n    angular.module('app.accounts.services').factory('Account', Account);\n\n    Account.$inject = ['$filter', '$http', '$resource'];\n    function Account ($filter, $http, $resource) {\n        var Account = $resource(\n            '/api/accounts/account/:id',\n            null,\n            {\n                update: {\n                    method: 'PUT',\n                    params: {\n                        id: '@id'\n                    }\n                },\n                delete:  {\n                    method: 'DELETE'\n                }\n            });\n\n        Account.getAccounts = getAccounts;\n        Account.prototype.getEmailAddress = getEmailAddress;\n\n        //////\n\n        /**\n         * getAccounts() gets the accounts from the search backend through a promise\n         *\n         * @param queryString string: current filter on the accountlist\n         * @param page int: current page of pagination\n         * @param pageSize int: current page size of pagination\n         * @param orderColumn string: current sorting of accounts\n         * @param orderedAsc {boolean}: current ordering\n         *\n         * @returns Promise object: when promise is completed:\n         *      {\n         *          accounts list: paginated account objects\n         *          total int: total number of account objects\n         *      }\n         */\n        function getAccounts (queryString, page, pageSize, orderColumn, orderedAsc) {\n\n            var sort = '';\n            if (orderedAsc) sort += '-';\n            sort += orderColumn;\n\n            return $http({\n                url: '/search/search/',\n                method: 'GET',\n                params: {\n                    type: 'accounts_account',\n                    q: queryString,\n                    page: page - 1,\n                    size: pageSize,\n                    sort: sort\n                }\n            })\n                .then(function(response) {\n                    return {\n                        accounts: response.data.hits,\n                        total: response.data.total\n                    };\n                });\n        }\n\n        function getEmailAddress() {\n            var account = this;\n\n            var primaryEmails = $filter('filter')(account.email_addresses, {status: 2});\n\n            if (primaryEmails.length) {\n                return primaryEmails[0];\n            } else if (account.email_addresses.length) {\n                return account.email_addresses[0];\n            }\n        }\n        return Account;\n    }\n})();\n","(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n})(window,document,'script','//www.google-analytics.com/analytics.js','ga');\n\nga('create', 'UA-60721851-1', 'auto');\n","/**\n * App Module is the entry point for Lily related Angular code\n */\nangular.module('app', [\n    'ui.router',\n    'ui.bootstrap',\n    'ngResource',\n    'ngSanitize',\n    'ncy-angular-breadcrumb',\n\n    // Controllers\n    'app.accounts',\n    'app.base',\n    'app.cases',\n    'app.dashboard',\n    'app.email',\n    'app.preferences',\n    'app.preferences.email',\n    'app.preferences.user',\n    'app.templates',\n    'ContactsControllers',\n    'DealControllers',\n    'UtilsControllers',\n\n    // Directives\n    'app.directives',\n    'app.accounts.directives',\n    'app.cases.directives',\n    'app.contacts.directives',\n    'app.deals.directives',\n    'UtilsDirectives',\n\n    // Google Analytics\n    'angulartics',\n    'angulartics.google.analytics',\n\n    // Services\n    'app.services',\n\n    // Filters\n    'app.filters'\n]);\n\n/* Setup global settings */\nangular.module('app').factory('settings', settings);\n\nsettings.$inject = ['$rootScope'];\nfunction settings ($rootScope) {\n    // supported languages\n    var settings = {\n        layout: {\n            pageSidebarClosed: false // sidebar state\n        }\n    };\n\n    $rootScope.settings = settings;\n\n    return settings;\n}\n\nangular.module('app').config(appConfig);\n\nappConfig.$inject = [\n    '$breadcrumbProvider',\n    '$controllerProvider',\n    '$httpProvider',\n    '$resourceProvider',\n    '$urlRouterProvider'\n];\nfunction appConfig ($breadcrumbProvider, $controllerProvider, $httpProvider, $resourceProvider, $urlRouterProvider){\n    // Don't strip trailing slashes from calculated URLs, because django needs them\n    $breadcrumbProvider.setOptions({\n        templateUrl: 'breadcrumbs.html',\n        includeAbstract: true\n    });\n    $controllerProvider.allowGlobals();\n    $httpProvider.defaults.xsrfCookieName = 'csrftoken';\n    $httpProvider.defaults.xsrfHeaderName = 'X-CSRFToken';\n    $resourceProvider.defaults.stripTrailingSlashes = false;\n    $urlRouterProvider.otherwise('/');\n}\n\n/* Init global settings and run the app */\nangular.module('app').run(runApp);\n\nrunApp.$inject = ['$rootScope', 'settings', '$state'];\nfunction runApp ($rootScope, $state) {\n    $rootScope.$state = $state; // state to be accessed from view\n    $rootScope.currentUser = currentUser;\n}\n","$('body').on('blur', 'input[name^=\"phone\"]', function() {\n    // Format telephone number\n    var $phoneNumberInput = $(this);\n    var phone = $phoneNumberInput.val();\n    if (phone.match(/[a-z]|[A-Z]/)) {\n        // if letters are found, skip formatting: it may not be a phone field after all\n        return false;\n    }\n\n    // Match on mobile phone nrs e.g. +316 or 06, so we can automatically set the type to mobile.\n    if (phone.match(/^\\+316|^06/)) {\n        var typeId = $phoneNumberInput.attr('id').replace('raw_input', 'type');\n        $('#' + typeId).select2('val', 'mobile');\n    }\n\n    phone = phone\n        .replace(\"(0)\",\"\")\n        .replace(/\\s|\\(|\\-|\\)|\\.|x|:|\\*/g, \"\")\n        .replace(/^00/,\"+\");\n\n    if (phone.length == 0) {\n        return false;\n    }\n\n    if (!phone.startsWith('+')) {\n        if (phone.startsWith('0')) {\n            phone = phone.substring(1);\n        }\n        phone = '+31' + phone;\n    }\n\n    if (phone.startsWith('+310')) {\n        phone = '+31' + phone.substring(4);\n    }\n    $phoneNumberInput.val(phone);\n});\n\n$('body').on('change', 'select[id*=\"is_primary\"]', function(e) {\n    if($(e.currentTarget).val() == 'True'){\n        $('select[id*=\"is_primary\"]').each(function(i){\n            if($(this).is('select') && $(this).val() == 'True'){\n                $(this).val('False');\n            }\n        });\n        $(e.currentTarget).val('True');\n        HLSelect2.init();\n    }\n});\n\nfunction addBusinessDays(date, businessDays) {\n    var weeks = Math.floor(businessDays/5);\n    var days = businessDays % 5;\n    var day = date.getDay();\n    if (day === 6 && days > -1) {\n       if (days === 0) {days-=2; day+=2;}\n       days++; dy -= 6;}\n    if (day === 0 && days < 1) {\n       if (days === 0) {days+=2; day-=2;}\n       days--; day += 6;}\n    if (day + days > 5) days += 2;\n    if (day + days < 1) days -= 2;\n    date.setDate(date.getDate() + weeks * 7 + days);\n    return date;\n}\n","(function($, window, document, undefined) {\r\n    var currentStatus;\r\n\r\n    window.HLCases = {\r\n        config: {\r\n            caseUpdateUrl: '/cases/update/status/',\r\n            caseUpdateAssignedToUrl: '/cases/update/assigned_to/',\r\n            caseId: null,\r\n            statusSpan: '#status',\r\n            statusDiv: '#case-status',\r\n            parcelProviderSelect: '#id_parcel_provider',\r\n            parcelIdentifierInput: '#id_parcel_identifier',\r\n            assignedToField: '#id_assigned_to',\r\n            assignToMeButton: '.assign-me-btn',\r\n            currentAssignedTo: null\r\n        },\r\n\r\n        init: function(config) {\r\n            // Setup config\r\n            var self = this;\r\n            if ($.isPlainObject(config)) {\r\n                $.extend(self.config, config);\r\n            }\r\n            self.initListeners();\r\n            self.setCurrentStatus();\r\n        },\r\n\r\n        initListeners: function() {\r\n            var self = this,\r\n                cf = self.config;\r\n\r\n            $(cf.statusDiv).on('click', function(event) {\r\n               self.changeStatus.call(self, event);\r\n            });\r\n\r\n            $(cf.parcelProviderSelect).on('change', function() {\r\n               self.changedParcelProviderSelect.call(self, this);\r\n            });\r\n\r\n            $(cf.assignToMeButton).on('click', function() {\r\n                self.changeAssignedTo.call(self, this);\r\n            });\r\n        },\r\n\r\n        setCurrentStatus: function() {\r\n            currentStatus = $('input[name=radio]:checked', this.config.statusDiv).closest('label').attr('for');\r\n        },\r\n\r\n        changeStatus: function(event) {\r\n            var self = this,\r\n                cf = self.config;\r\n            var radio_element = $('#' + $(event.target).closest('label').attr('for'));\r\n            if(radio_element.attr('id') != currentStatus) {\r\n                var $radio_element = $(radio_element);\r\n                if (cf.caseId != null) {\r\n                    $.ajax({\r\n                        url: cf.caseUpdateUrl + cf.caseId + '/',\r\n                        type: 'POST',\r\n                        data: {\r\n                            status: $radio_element.val()\r\n                        },\r\n                        beforeSend: HLApp.addCSRFHeader,\r\n                        dataType: 'json'\r\n                    }).done(function (data) {\r\n                        currentStatus = $radio_element.attr('id');\r\n                        $(cf.statusSpan).text(data.status);\r\n                        // loads notifications if any\r\n                        load_notifications();\r\n                    }).fail(function () {\r\n                        // reset selected status\r\n                        $(radio_element).attr('checked', false).closest('label').removeClass('active');\r\n                        $('#' + currentStatus).attr('checked', true).closest('label').addClass('active');\r\n                        // loads notifications if any\r\n                        load_notifications();\r\n                    });\r\n                }\r\n            }\r\n        },\r\n\r\n        changedParcelProviderSelect: function(select) {\r\n            // Remove identifier if the provider is removed\r\n            var $select = $(select);\r\n            if (!$select.val()) {\r\n                $(this.config.parcelIdentifierInput).val('');\r\n            }\r\n        },\r\n\r\n        changeAssignedTo: function () {\r\n            var self = this,\r\n                cf = self.config;\r\n\r\n            var assignee = null;\r\n\r\n            if (cf.currentAssignedTo != currentUser.id) {\r\n                assignee = currentUser.id;\r\n            }\r\n\r\n            if (cf.caseId != null) {\r\n                $.ajax({\r\n                    url: cf.caseUpdateAssignedToUrl + cf.caseId + '/',\r\n                    type: 'POST',\r\n                    data: {\r\n                        assignee: assignee\r\n                    },\r\n                    beforeSend: HLApp.addCSRFHeader,\r\n                    dataType: 'json'\r\n                }).done(function (data) {\r\n                    var assignee = data.assignee;\r\n\r\n                    // TODO: This will be made prettier once we Angularify the detail page(s)\r\n                    if (assignee) {\r\n                        $('.summary-data.assigned-to').html(data.assignee.name);\r\n                        $('.assign-me-btn').html('Unassign');\r\n                        cf.currentAssignedTo = data.assignee.id;\r\n                    }\r\n                    else {\r\n                        $('.summary-data.assigned-to').html('Unassigned');\r\n                        $('.assign-me-btn').html('Assign to me');\r\n                        cf.currentAssignedTo = null;\r\n                    }\r\n                }).always(function () {\r\n                    // loads notifications if any\r\n                    load_notifications();\r\n                });\r\n            }\r\n        },\r\n\r\n        addAssignToMeButton: function() {\r\n            var self = this;\r\n            var assignToMeButton = $('<button class=\"btn btn-link assign-me-btn\">Assign to me</button>');\r\n\r\n            $(self.config.assignedToField).after(assignToMeButton);\r\n\r\n            assignToMeButton.click(function (event) {\r\n                event.preventDefault();\r\n                $(self.config.assignedToField).val(currentUser.id).change();\r\n            });\r\n        }\r\n    }\r\n})(jQuery, window, document);\r\n","(function($, window, document, undefined){\n    window.HLFormsets = {\n        config: {\n            formsetClass: '.formset'\n        },\n        init: function (config) {\n            var self = this;\n            // Setup configuration\n            if ($.isPlainObject(config)) {\n                $.extend(self.config, config);\n            }\n\n            $(self.config.formsetClass).formset();\n            self.initListeners();\n        },\n\n        initListeners: function() {\n            var self = this;\n            var body = $('body');\n\n            body.on('formAdded', '[data-formset-form]', function() {\n                var formset_element = $(this).parents('.formset');\n                var add_element = $(formset_element).find('.add-link');\n\n                var indent = ($(formset_element).attr('data-formset-indent') || 'true') == 'true';\n                if(indent) {\n                    $(add_element).find('.form-control-static').addClass('col-md-offset-2').removeClass('form-control-static');\n                }\n                $(add_element).find('label').addClass('hide');\n\n                if ($(formset_element).find('[data-formset-form]').length === 1) {\n                    $(this).find('label.hide').removeClass('hide');\n\n                    if(indent) {\n                        $(this).find('.field_wrapper').removeClass('col-md-offset-2');\n                    }\n                }\n                HLSelect2.init();\n            });\n\n            body.on('formDeleted', '[data-formset-form]', function() {\n                $(this).stop().slideDown();\n                $(this).find(':input:enabled:visible').attr('data-formset-disabled', true).attr('readonly', 'readonly');\n                $(this).find('[data-formset-delete-button]').toggleClass('hidden');\n                $(this).find('[data-formset-undo-delete]').toggleClass('hidden');\n            });\n\n            body.on('click', '[data-formset-form] [data-formset-undo-delete]', function() {\n                var formset = $(this).closest('[data-formset-form]');\n\n                formset.find('[data-formset-disabled=true]').removeAttr('data-formset-disabled').removeAttr('readonly');\n                formset.find('input[name$=\"DELETE\"]').attr('checked', false).change();\n                formset.find('[data-formset-delete-button]').toggleClass('hidden');\n                $(this).toggleClass('hidden');\n            });\n\n        }\n    }\n})(jQuery, window, document);\n","(function($, window, document, undefined){\n    window.HLSelect2 = {\n        config: {\n            tagInputs: 'input.tags',\n            ajaxInputs: 'input.select2ajax',\n            tagsAjaxClass: 'tags-ajax',\n            ajaxPageLimit: 30,\n            clearText: '-- Clear --'\n        },\n\n        init: function( config ) {\n            var self = this;\n            // Setup configuration\n            if ($.isPlainObject(config)) {\n                $.extend(self.config, config);\n            }\n            // On initialize, setup select2\n            self.setupSelect2();\n            self.initListeners();\n        },\n\n        initListeners: function() {\n            var self = this;\n            // When modal is shown, lets instantiate the select2 in the modals\n            $(document).on('shown.bs.modal', '.modal', function() {\n                self.setupSelect2();\n            });\n        },\n\n        setupSelect2: function() {\n            // Setup select2 for non-ajaxified selects, ajaxified selects\n            // are using hidden inputs.\n            $('select').select2({\n                // at least this many results are needed to enable the search field\n                // (9 is the amount at which the user must scroll to see all items)\n                minimumResultsForSearch: 9\n            });\n            this.createTagInputs();\n            this.createAjaxInputs();\n        },\n\n        createTagInputs: function() {\n            // Setup tag inputs\n            $(this.config.tagInputs).each(function() {\n                if (!$(this).data().hasOwnProperty('select2')) {\n                    var tags = [];\n                    var $this = $(this);\n                    if ($this.data('choices')) {\n                        tags = $this.data('choices').split(',');\n                    }\n                    $this.select2({\n                        tags: tags,\n                        tokenSeparators: [',', ' '],\n                        width: '100%'\n                    });\n                }\n            });\n        },\n\n        createAjaxInputs: function() {\n            // Setup inputs that needs remote link\n            var self = this;\n            var cf = self.config;\n\n            $(cf.ajaxInputs).each(function() {\n                var $this = $(this);\n                var _data = $this.data();\n                // _data.tags is a marker for AjaxSelect2Widget which indicates\n                // that it expects multiple values as input.\n\n                // Prevent Select2 from being initialized on elements that already have Select2\n                if (!_data.hasOwnProperty('select2')) {\n                    var options = {\n                        ajax: {\n                            cache: true,\n                            data: function (term, page) {\n                                // page is the one-based page number tracked by Select2\n                                var data = null;\n\n                                if ($this.hasClass(cf.tagsAjaxClass) && !_data.tags) {\n                                    if (term === '') {\n                                        // elasticsearch breaks when the term is empty, so just look for non-empty results\n                                        term = '*';\n                                    }\n                                    // search for contacts and accounts containing the search term, but only those with an email address\n                                    var filterQuery = '((_type:contacts_contact AND (name:' + term + ' OR email_addresses.email_address:' + term + ')) ' +\n                                        'OR (_type:accounts_account AND (name:' + term + ' OR email_addresses.email_address:' + term + '))) ' +\n                                        'AND email_addresses.email_address:*';\n\n                                    data = {\n                                        filterquery: filterQuery,\n                                        size: cf.ajaxPageLimit, // page size\n                                        page: (page - 1), // page number, zero-based\n                                        sort: '-modified' //sort modified descending\n                                    };\n                                }\n                                else {\n                                    var term_stripped = term.trim();\n                                    data = {\n                                        filterquery: term_stripped ? 'name:('+term_stripped+')' : '', //search term\n                                        size: cf.ajaxPageLimit, // page size\n                                        page: (page - 1), // page number, zero-based\n                                        sort: '-modified' //sort modified descending\n                                    };\n                                }\n\n                                var filters = $this.data('filter-on');\n                                if (typeof filters !== 'undefined' && filters !== '') {\n                                    filters.split(',').forEach(function (filter) {\n                                        if (filter.indexOf('id_') === 0) {\n                                            var filter_val = $('#' + filter).val();\n                                            var filter_name = filter.substring(3);\n                                            if (filter_name.indexOf('case_quickbutton_') === 0) {\n                                                filter_name = filter.substring(20);\n                                            } else if (filter_name == 'account') {\n                                                // This is a special case at the moment, in the future we might have\n                                                // more cases like this.\n                                                // But for now, just do this check\n                                                filter_name = 'accounts.id';\n                                            }\n                                            if (filter_val && filter_val > 0) {\n                                                data.filterquery += ' ' + filter_name + ':' + filter_val;\n                                            }\n                                        } else {\n                                            data.type = filter;\n                                        }\n                                    });\n                                }\n\n                                return data;\n                            },\n\n                            results: function (data, page) {\n                                var more = (page * cf.ajaxPageLimit) < data.total; // whether or not there are more results available\n\n                                if ($this.hasClass(cf.tagsAjaxClass) && !_data.tags) {\n                                    var parsed_data = [];\n\n                                    data.hits.forEach(function (hit) {\n                                        // Only display contacts with an e-mail address\n                                        for (var i = 0; i < hit.email_addresses.length; i++) {\n                                            // The text which is actually used in the application\n                                            var used_text = '\"' + hit.name + '\" <' + hit.email_addresses[i].email_address + '>';\n                                            // The displayed text\n                                            var displayed_text = hit.name + ' <' + hit.email_addresses[i].email_address + '>';\n                                            // Select2 sends 'id' as the value, but we want to use the email\n                                            // So store the actual id (hit.id) under a different name\n                                            parsed_data.push({id: used_text, text: displayed_text, object_id: hit.id});\n                                        }\n                                    });\n\n                                    // Array elements with empty text can't be added to select2, so manually fill a new array\n                                    data.hits = parsed_data;\n                                }\n                                else {\n                                    data.hits.forEach(function (hit) {\n                                        hit.text = hit.name;\n                                    });\n                                }\n\n                                // Add clear option, but not for multiple select2.\n                                if ((page == 1 && !$this.hasClass(cf.tagsAjaxClass)) && !_data.tags) {\n                                    data.hits.unshift({id: -1, text:cf.clearText});\n                                }\n                                return {\n                                    results: data.hits,\n                                    more: more\n                                };\n                            }\n                        },\n\n                        initSelection: function (item, callback) {\n                            var id = item.val();\n                            var text = item.data('selected-text');\n                            var data = { id: id, text: text };\n                            callback(data);\n                        }\n                    };\n\n                    if ($this.hasClass(cf.tagsAjaxClass)) {\n                        options.tags = true;\n                        options.tokenSeparators = [',', ' '];\n                        // Create a new tag if there were no results\n                        options.createSearchChoice = function (term, data) {\n                            if ($(data).filter(function () {\n                                    return this.text.localeCompare(term) === 0;\n                                }).length === 0) {\n                                return {\n                                    id: term,\n                                    text: term\n                                };\n                            }\n                        };\n                        // Prevent select2 dropdown from opening when pressing enter\n                        options.openOnEnter = false;\n                    }\n\n                    // Set select2 to multiple.\n                    if(_data.tags) {\n                        options.tags = true;\n                        options.multiple = true;\n                    }\n\n\n                    $this.select2(options);\n                    // Set the initial form value from a JSON encoded data attribute called data-initial\n                    if(_data.tags) {\n                        $this.select2('data', _data.initial);\n                    }\n                }\n            });\n        }\n    };\n\n})(jQuery, window, document);\n","(function($, window, document, undefined){\n    window.HLShowAndHide = {\n        config: {\n            selector: '.show-and-hide-input'\n        },\n\n        init: function( config ) {\n            var self = this;\n            // Setup configuration\n            if ($.isPlainObject(config)) {\n                $.extend(self.config, config);\n            }\n            // On initialize, setup show and hide\n            self.initListeners();\n        },\n\n        initListeners: function() {\n            var self = this;\n\n            // When modal is shown, lets instantiate the select2 in the modals\n            $('body').on('click', '.form .toggle-original-form-input', function() {\n                var field = $(this).closest('.show-and-hide-input');\n\n                /* hide clicked link */\n                $(this).parent().addClass('hide');\n\n                /* toggle form input */\n                if($(this).data('action') == 'show') {\n                    /* show the other link */\n                    $(field).find('[data-action=\"hide\"]').parent().removeClass('hide');\n\n                    /* show the form input */\n                    $(field).find('.original-form-widget').removeClass('hide');\n\n                    /* (re)enable fields */\n                    $(field).find(':input').removeAttr('disabled');\n\n                    var input = $(field).find(':input:visible:not([type=\"file\"]):first');\n                    if(input) {\n                        /* adding to the end of the execution queue reliably sets the focus */\n                        /*  e.g. without, this only works once for select2 inputs */\n                        setTimeout(function() {\n                            // setCaretAtEnd(input);\n                        }, 0);\n                    }\n                } else if($(this).data('action') == 'hide') {\n                    /* show the other link */\n                    $(field).find('[data-action=\"show\"]').parent().removeClass('hide');\n\n                    /* hide the form input */\n                    $(field).find('.original-form-widget').addClass('hide');\n\n                    /* disabled fields will not be posted */\n                    $(field).find(':input').attr('disabled', 'disabled');\n                }\n            });\n        }\n    };\n\n})(jQuery, window, document);\n","(function($, window, document, undefined) {\n    window.HLDataProvider = {\n        config: {\n            buttonDataProvider: ':button.dataprovider',\n            loadingText: 'Beaming up the information now, almost within range!',\n            loadingHeader: 'I\\'m on my way!',\n            provideUrl: '/provide/account/',\n            dataProviderClass: '.dataprovider',\n            errorHeader: 'Oops!',\n            errorText: 'There was an error trying to fetch your data, please don\\'t be mad.',\n            successHeader: 'Yeah!',\n            successText: 'We did it! Your new data should be right there waiting for you.',\n            hiddenSuccessHeader: 'Psst!',\n            hiddenSuccessText: 'Did you know I did more work in the background? ;)',\n            overwriteConfirmHeader: 'Do you wish to overwrite the following fields?\\n',\n            fields: [\n                'name',\n                'description',\n                'legalentity',\n                'taxnumber',\n                'bankaccountnumber',\n                'cocnumber',\n                'iban',\n                'bic',\n            ],\n            formsets: [\n                'email_addresses',\n                'phone_numbers',\n                'addresses'\n            ]\n        },\n\n        init: function(config) {\n            // Setup config\n            var self = this;\n            if ($.isPlainObject(config)) {\n                $.extend(self.config, config);\n            }\n\n            self.initListeners();\n        },\n\n        initListeners: function() {\n            var self = this,\n                cf = self.config;\n\n            $('body').on('click', cf.buttonDataProvider, function(event) {\n                // On button press\n                self.findDataProviderInfo.call(self, this, event);\n            }).on('keydown', 'div' + cf.dataProviderClass + ' > input', function(event) {\n                // Catch ENTER on Dataprovider input\n                if (event.which === 13) {\n                    self.findDataProviderInfo.call(self, cf.buttonDataProvider, event);\n                    // Prevent form submission\n                    event.preventDefault();\n                }\n            });\n        },\n\n        findDataProviderInfo: function(button, event) {\n            var self = this,\n                cf = self.config,\n                $button = $(button),\n                $form = $button.closest('form'),\n                $input = $('div' + cf.dataProviderClass +' > input'),\n                domain = self.sanitizeDomain($input.val());\n\n            // Show busy gui to user\n            $button.button('loading');\n            toastr.info(cf.loadingText, cf.loadingHeader);\n\n            var url = cf.provideUrl + domain;\n            $.getJSON(url)\n                .done(function(data) {\n                    if (data.error) {\n                        toastr.error(data.error.message, cf.errorHeader);\n                    } else {\n                        self.fillForm($form, data, cf.fields, cf.formsets);\n                        toastr.success(cf.successText, cf.successHeader);\n                    }\n                })\n                .fail(function() {\n                    toastr.error(cf.errorText, cf.errorHeader);\n                })\n                .always(function() {\n                    $button.button('reset');\n                });\n\n            event.preventDefault();\n        },\n\n        sanitizeDomain: function(url) {\n            var domain = $.trim(url.replace('http://', ''));\n            domain = $.trim(domain.replace('https://', ''));\n            // Always add last '/'\n            if (domain.slice(-1) !== '/') {\n                domain += '/';\n            }\n            return domain;\n        },\n\n        fillForm: function($form, data, fields, formsets) {\n            var self = this,\n                cf = self.config;\n\n            var checkOverwrite = self.loopTroughFields(fields, $form, data),\n                checkOverwriteFields = checkOverwrite[0],\n                checkOverwriteLabels = checkOverwrite[1];\n\n            // Check if there are fields for which we need to do an overwrite check\n            if (checkOverwriteFields.length) {\n                // Ask the user whether to overwrite or not\n                if (confirm(cf.overwriteConfirmHeader + checkOverwriteLabels.join('\\n'))) {\n                    // Loop through fields that need to be overwritten\n                    checkOverwriteFields.forEach(function(field) {\n                        var $input = $form.find('[name=\"' + field + '\"]');\n                        self.fillField($input, data[field]);\n                    });\n                }\n            }\n\n            // Loop through formsets\n            self.loopTroughFormSets(formsets, $form, data);\n\n        },\n\n        loopTroughFields: function(fields, $form, data) {\n            var self = this,\n                cf = self.config,\n                checkOverwriteFields = [],\n                checkOverwriteLabels = [],\n                filledHiddenField = false;\n\n            // Loop through all fields\n            fields.forEach(function(field) {\n                // Input is the field in the current form\n                var $input = $form.find('[name=\"' + field + '\"]');\n                // Always clear the field if it's hidden\n                if ($input.attr('type') == 'hidden' || $input.parent().hasClass('hide')) {\n                    $input.val('');\n                    if (data[field]) {\n                        filledHiddenField = true;\n                    }\n                }\n                // Check if there is data for the field, else do nothing\n                if (data[field]) {\n                    // Check if the field does not exist in the current form\n                    if ($input.val() !== undefined) {\n                        // Check if the field has a value and that value is not the field placeholder\n                        if ($input.val().length && $input.val() !== $input.attr('placeholder')) {\n                            // Display label of field instead of field name\n                            var label = $input.parents('.form-group').find('label').text();\n                            // Field is not empty, check before overwrite\n                            checkOverwriteFields.push(field);\n                            checkOverwriteLabels.push('- ' + label);\n                        } else {\n                            // Field is empty, fill it with new data\n                            self.fillField($input, data[field]);\n                        }\n                    }\n                }\n            });\n\n            if (filledHiddenField) {\n                toastr.success(cf.hiddenSuccessText, cf.hiddenSuccessHeader);\n            }\n\n            return [checkOverwriteFields, checkOverwriteLabels];\n        },\n\n        loopTroughFormSets: function(formsets, $form, data){\n            for (var i=0; i < formsets.length; i++) {\n                var formset = formsets[i];\n                // Check if there is data for the formset\n                if (data[formset] && data[formset].length) {\n                    var $formsetDiv = $form.find('#' + formset),\n                        $formsetAddLink = $formsetDiv.find('[data-formset-add]'),\n                        newFormsets = data[formset],\n                        $foundInput;\n\n                    for (var j = 0; j < newFormsets.length; j++) {\n                        var newFormset = newFormsets[j],\n                            insertNewFormset = false,\n                            $newElement;\n\n                        if (typeof newFormset === 'object') {\n                            var key,\n                                hasFoundInput = false;\n                            for (key in newFormset) {\n                                $foundInput = $formsetDiv.find(':input[name$=\"' + key +'\"]');\n                                if ($foundInput.length){\n                                    hasFoundInput = true;\n                                    $foundInput = $foundInput.filter(function () {\n                                        var val = $(this).val(),\n                                            newVal = newFormset[key];\n\n                                        return ((val === '' && newVal === null) || val == newVal);\n                                    });\n                                    if (!$foundInput.length) {\n                                        // One of the values is different so we need to add a new formset\n                                        insertNewFormset = true;\n                                    }\n                                }\n                            }\n                            if (insertNewFormset || !hasFoundInput) {\n                                $formsetAddLink.click();\n                                $newElement =  $formsetDiv.find('[data-formset-body] [data-formset-form]:last');\n                                for (key in newFormset) {\n                                    $newElement.find(':input[name$=\"' + key +'\"]').val(newFormset[key]);\n                                }\n                            }\n                        } else if (typeof newFormset === 'string') {\n                            $foundInput = $formsetDiv.find(':input').filter(function () {\n                                return $(this).val() == newFormset;\n                            });\n                            if (!$foundInput.length) {\n                                $formsetAddLink.click();\n                                $newElement =  $formsetDiv.find('[data-formset-body] [data-formset-form]:last');\n                                $newElement.find(':input:first').val(newFormset);\n                            }\n                        }\n                    }\n                }\n            }\n        },\n\n        fillField: function($input, value) {\n            if (typeof value === 'string') {\n                // String\n                $input.val(value);\n            } else if (typeof value[0] === 'string') {\n                // List of strings\n                var uniqueValues = value.concat($input.val().split(',')).filter(function(val, index, self) {\n                    return (self.indexOf(val) === index) && (val !== '');\n                });\n                $input.val(uniqueValues.join());\n            } else {\n                // JSON object\n                $input.val(JSON.stringify(value));\n            }\n            $input.change();\n            if ($input.parent().hasClass('original-form-widget') && $input.parent().hasClass('hide')) {\n                // show the input, by reusing the click handler as defined in the utils.\n                $input.parents(\".show-and-hide-input\").find('a[data-action=\"show\"]').trigger('click');\n            }\n        }\n    }\n})(jQuery, window, document);\n","/**\n * Router definition.\n */\nangular.module('app.accounts').config(accountConfig);\n\naccountConfig.$inject = ['$stateProvider'];\nfunction accountConfig ($stateProvider) {\n\n    $stateProvider.state('base.accounts.detail.delete', {\n        url: '/delete',\n        views: {\n            '@': {\n                controller: 'AccountDeleteController'\n            }\n        }\n    });\n}\n\n/**\n * Controller to delete a account\n */\nangular.module('app.accounts').controller('AccountDeleteController', AccountDeleteController);\n\nAccountDeleteController.$inject = ['$state', '$stateParams', 'Account'];\nfunction AccountDeleteController ($state, $stateParams, Account) {\n    var id = $stateParams.id;\n\n    Account.delete({\n        id:id\n    }, function() {  // On success\n        $state.go('base.accounts');\n    }, function(error) {  // On error\n        // Error notification needed\n        $state.go('base.accounts');\n    });\n}\n","/**\n * Router definition.\n */\nangular.module('app.accounts').config(accountConfig);\n\naccountConfig.$inject = ['$stateProvider'];\nfunction accountConfig ($stateProvider) {\n    $stateProvider.state('base.accounts.detail', {\n        url: '/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: 'accounts/controllers/detail.html',\n                controller: AccountDetailController\n            }\n        },\n        ncyBreadcrumb: {\n            label: '{{ account.name }}'\n        },\n        resolve: {\n            account: ['AccountDetail', '$stateParams', function(AccountDetail, $stateParams) {\n                var accountId = $stateParams.id;\n                return AccountDetail.get({id: accountId}).$promise\n            }]\n        }\n    })\n}\n\nangular.module('app.accounts').controller('AccountDetailController', AccountDetailController);\n\nAccountDetailController.$inject = ['$scope', '$stateParams', 'CaseDetail', 'ContactDetail', 'DealDetail', 'account'];\nfunction AccountDetailController($scope, $stateParams, CaseDetail, ContactDetail, DealDetail, account) {\n    /**\n     * Details page with historylist and more detailed account information.\n     */\n    var id = $stateParams.id;\n\n    $scope.account = account;\n    $scope.conf.pageTitleBig = account.name;\n    $scope.conf.pageTitleSmall = 'change is natural';\n\n    $scope.caseList = CaseDetail.query({filterquery: 'account:' + id});\n    $scope.caseList.$promise.then(function(caseList) {\n        $scope.caseList = caseList;\n    });\n\n    $scope.dealList = DealDetail.query({filterquery: 'account:' + id});\n    $scope.dealList.$promise.then(function(dealList) {\n        $scope.dealList = dealList;\n    });\n\n    $scope.contactList = ContactDetail.query({filterquery: 'accounts.id:' + id});\n    $scope.contactList.$promise.then(function(contactList) {\n        $scope.contactList = contactList;\n    });\n}\n","/**\n * Router definition.\n */\nangular.module('app.accounts').config(accountConfig);\n\naccountConfig.$inject = ['$stateProvider'];\nfunction accountConfig ($stateProvider) {\n    $stateProvider.state('base.accounts', {\n        url: '/accounts',\n        views: {\n            '@': {\n                templateUrl: 'accounts/controllers/list.html',\n                controller: AccountList,\n                controllerAs: 'vm'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Accounts'\n        }\n    });\n}\n\n/**\n * AccountList is a controller to show list of contacts\n *\n */\nangular.module('app.accounts').controller('AccountList', AccountList);\n\nAccountList.$inject = ['$scope', '$window', 'Account', 'Cookie'];\nfunction AccountList ($scope, $window, Account, Cookie) {\n    var vm = this;\n    var cookie = Cookie('accountList');\n    /**\n     * table object: stores all the information to correctly display the table\n     */\n    vm.table = {\n        page: 1,  // current page of pagination: 1-index\n        pageSize: 20,  // number of items per page\n        totalItems: 0, // total number of items\n        filter: cookie.get('filter', ''),  // search filter\n        order:  cookie.get('order', {\n            ascending: true,\n            column:  'modified'  // string: current sorted column\n        }),\n        visibility: cookie.get('visibility', {\n            name: true,\n            contactInformation: true,\n            assignedTo: true,\n            created: true,\n            modified: true,\n            tags: true,\n            customerId: true\n        })\n    };\n    vm.deleteAccount = deleteAccount;\n    vm.setFilter = setFilter;\n    vm.exportToCsv = exportToCsv;\n\n    activate();\n\n    /////////////\n\n    function activate() {\n        _setupWatches();\n    }\n\n    $scope.conf.pageTitleBig = 'Accounts';\n    $scope.conf.pageTitleSmall = 'An overview of accounts';\n\n\n    function deleteAccount (account) {\n        if (confirm('Are you sure?')) {\n            Account.delete({\n                id:account.id\n            }, function() {  // On success\n                var index = vm.table.items.indexOf(account);\n                vm.table.items.splice(index, 1);\n            }, function(error) {  // On error\n                alert('something went wrong.')\n            })\n        }\n    }\n\n    /**\n     * _updateTableSettings() sets scope variables to the cookie\n     */\n    function _updateTableSettings() {\n        cookie.put('filter', vm.table.filter);\n        cookie.put('order', vm.table.order);\n        cookie.put('visibility', vm.table.visibility);\n    }\n\n    /**\n     * _updateAccounts() reloads the accounts through a service\n     *\n     * Updates table.items and table.totalItems\n     */\n    function _updateAccounts() {\n        Account.getAccounts(\n            vm.table.filter,\n            vm.table.page,\n            vm.table.pageSize,\n            vm.table.order.column,\n            vm.table.order.ascending\n        ).then(function(data) {\n                vm.table.items = data.accounts;\n                vm.table.totalItems = data.total;\n            }\n        );\n    }\n\n    function _setupWatches() {\n        /**\n         * Watches the model info from the table that, when changed,\n         * needs a new set of accounts\n         */\n        $scope.$watchGroup(['vm.table.page', 'vm.table.order.column', 'vm.table.order.ascending', 'vm.table.filter'], function() {\n            _updateTableSettings();\n            _updateAccounts();\n        });\n\n        /**\n         * Watches the model info from the table that, when changed,\n         * needs to store the info to the cache\n         */\n        $scope.$watchCollection('vm.table.visibility', function() {\n            _updateTableSettings();\n        });\n    }\n\n\n    /**\n     * setFilter() sets the filter of the table\n     *\n     * @param queryString string: string that will be set as the new filter on the table\n     */\n    function setFilter (queryString) {\n        vm.table.filter = queryString;\n    }\n\n    /**\n     * exportToCsv() creates an export link and opens it\n     */\n    function exportToCsv () {\n        var getParams = '';\n        // If there is a filter, add it\n        if (vm.table.filter) {\n            getParams += '&export_filter=' + vm.table.filter;\n        }\n\n        // Add all visible columns\n        angular.forEach(vm.table.visibility, function(value, key) {\n            if (value) {\n                getParams += '&export_columns='+ key;\n            }\n        });\n\n        // Setup url\n        var url = '/accounts/export/';\n        if (getParams) {\n            url += '?' + getParams.substr(1);\n        }\n\n        $window.open(url);\n    }\n}\n","/**\n * Router definition.\n */\nangular.module('app.accounts').config(accountConfig);\n\naccountConfig.$inject = ['$stateProvider'];\nfunction accountConfig ($stateProvider) {\n    $stateProvider.state('base.accounts.create', {\n        url: '/create',\n        views: {\n            '@': {\n                templateUrl: '/accounts/create/',\n                controller: 'AccountUpsertController'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Create'\n        }\n    });\n\n    $stateProvider.state('base.accounts.detail.edit', {\n        url: '/edit',\n        views: {\n            '@': {\n                templateUrl: function(elem) {\n                    return '/accounts/' + elem.id + '/edit/';\n                },\n                controller: 'AccountUpsertController'\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Edit'\n        }\n    });\n}\n\n/**\n * Controller for update and new Account actions.\n */\nangular.module('app.accounts').controller('AccountUpsertController', AccountUpsertController);\n\nAccountUpsertController.$inject = ['$scope', '$stateParams', 'AccountDetail'];\nfunction AccountUpsertController ($scope, $stateParams, AccountDetail) {\n    var id = $stateParams.id;\n    // New Account; set title.\n    if(!id) {\n        $scope.conf.pageTitleBig = 'New Account';\n        $scope.conf.pageTitleSmall = 'change is natural';\n    } else {\n        // Existing Account; Get details from ES and set title.\n        var accountPromise = AccountDetail.get({id: id}).$promise;\n        accountPromise.then(function(account) {\n            $scope.account = account;\n            $scope.conf.pageTitleBig = account.name;\n            $scope.conf.pageTitleSmall = 'change is natural';\n            HLSelect2.init();\n        });\n    }\n    HLDataProvider.init();\n    HLFormsets.init();\n}\n","/**\n * Account detail widget\n */\nangular.module('app.accounts.directives').directive('accountDetailWidget', AccountDetailWidget);\n\nfunction AccountDetailWidget() {\n    return {\n        restrict: 'E',\n        replace: true,\n        scope: {\n            account: '=',\n            height: '='\n        },\n        templateUrl: 'accounts/directives/detail_widget.html'\n    }\n}\n","angular.module('app.base').config(appConfig);\n\nappConfig.$inject = ['$stateProvider'];\nfunction appConfig ($stateProvider) {\n    $stateProvider.state('base', {\n        abstract: true,\n        controller: 'baseController',\n        ncyBreadcrumb: {\n            label: 'Lily'\n        }\n    });\n}\n\n/**\n * BaseController is the controller where all the default things are loaded\n *\n */\nangular.module('app.base').controller('baseController', baseController);\n\nbaseController.$inject = ['$scope', '$state', 'Notifications'];\nfunction baseController ($scope, $state, Notifications) {\n        $scope.conf = {\n            headTitle: 'Welcome!',\n            pageTitleBig: 'HelloLily',\n            pageTitleSmall: 'welcome to my humble abode!'\n        };\n\n        $scope.loadNotifications = loadNotifications;\n\n        activate();\n\n        //////////\n\n        function activate(){\n            $scope.$on('$stateChangeSuccess', _setPreviousState);\n            $scope.$on('$viewContentLoaded', _contentLoadedActions);\n        }\n\n        function loadNotifications() {\n            Notifications.query(function(notifications) {  // On success\n                angular.forEach(notifications, function(message) {\n                    toastr[message.level](message.message);\n                });\n            }, function(error) {  // On error\n                console.log('error!');\n                console.log(error);\n            })\n        }\n\n        function _contentLoadedActions() {\n            Metronic.initComponents(); // init core components\n            HLSelect2.init();\n            HLFormsets.init();\n            HLShowAndHide.init();\n            autosize($('textarea'));\n\n            $scope.loadNotifications();\n        }\n\n        function _setPreviousState(event, toState, toParams, fromState, fromParams){\n            $scope.previousState = $state.href(fromState, fromParams);\n        }\n}\n","angular.module('app.base').controller('headerController', headerController);\n\nheaderController.$inject = ['$scope'];\nfunction headerController ($scope) {\n    $scope.$on('$includeContentLoaded', function() {\n        Layout.initHeader(); // init header\n    });\n}\n","angular.module('app.base').controller('sidebarController', sidebarController);\n\nsidebarController.$inject = ['$scope'];\nfunction sidebarController ($scope) {\n    $scope.$on('$includeContentLoaded', function() {\n        Layout.initSidebar(); // init sidebar\n    });\n}\n","/**\n * checkbox Directive makes a nice uniform checkbox and binds to a model\n *\n * @param model object: model to bind checkbox with\n *\n * Example:\n * <checkbox model=\"table.visibility.name\">Name</checkbox>\n */\nangular.module('app.directives').directive('checkbox', checkbox);\n\nfunction checkbox () {\n    return {\n        restrict: 'E',\n        replace: true,\n        transclude: true,\n        scope: {\n            model: '='\n        },\n        templateUrl: 'base/directives/checkbox.html'\n    }\n}\n","/**\n * Directive give a nice formatting on input elements.\n *\n * It makes sure that the value of the ngModel on the scope has a nice\n * formatting for the user\n */\nangular.module('app.directives').directive('dateFormatter', dateFormatter);\n\ndateFormatter.$inject = ['dateFilter'];\nfunction dateFormatter(dateFilter) {\n    return {\n        restrict: 'A',\n        require: 'ngModel',\n        link: function(scope, element, attrs, ngModel) {\n            ngModel.$formatters.push(function(value) {\n                if (value) {\n                    return dateFilter(value, attrs.dateFormatter);\n                }\n            })\n        }\n    }\n}\n","/**\n * Directive for a confirmation box before the delete in the detail\n * view happens\n */\nangular.module('app.directives').directive('detailDelete', detailDelete);\n\ndetailDelete.$inject = ['$state'];\nfunction detailDelete ($state) {\n    return {\n        restrict: 'A',\n        link: function (scope, elem, attrs) {\n\n            $(elem).click(function () {\n                if (confirm('You are deleting! Are you sure ?')) {\n                    $state.go('.delete');\n                }\n            });\n        }\n    }\n}\n","angular.module('app.directives').directive('resizeIframe', resizeIframe);\n\nfunction resizeIframe () {\n    return {\n        restrict: 'A',\n        link: function ($scope, element, attrs) {\n            var maxHeight = $('body').outerHeight();\n            element.on('load', function() {\n                element.removeClass('hidden');\n\n                // do this after .inbox-view is visible\n                var ifDoc, ifRef = this;\n\n                // set ifDoc to 'document' from frame\n                try {\n                    ifDoc = ifRef.contentWindow.document.documentElement;\n                } catch (e1) {\n                    try {\n                        ifDoc = ifRef.contentDocument.documentElement;\n                    } catch (e2) {\n                    }\n                }\n\n                // calculate and set max height for frame\n                if (ifDoc) {\n                    var subtractHeights = [\n                        element.offset().top,\n                        $('.footer').outerHeight(),\n                        $('.inbox-attached').outerHeight()\n                    ];\n                    for (var height in subtractHeights) {\n                        maxHeight = maxHeight - height;\n                    }\n\n                    if (ifDoc.scrollHeight > maxHeight) {\n                        ifRef.height = maxHeight;\n                    } else {\n                        ifRef.height = ifDoc.scrollHeight;\n                    }\n                }\n            });\n        }\n    }\n}\n","/**\n * sortColumn Directive adds sorting classes to an DOM element based on `table` object\n *\n * It makes the element clickable and sets the table sorting based on that element\n *\n * @param sortColumn string: name of the column to sort on when clicked\n * @param table object: The object to bind sort column and ordering\n *\n * Example:\n *\n * <th sort-column=\"last_name\" table=\"table\">Name</th>\n *\n * Possible classes:\n * - sorting: Unsorted\n * - sorting_asc: Sorted ascending\n * - sorting_desc: Sorted descending\n */\nangular.module('app.directives').directive('sortColumn', sortColumn);\n\nfunction sortColumn () {\n    /**\n     * _setSortableIcon() removes current sorting classes and adds new based on current\n     * sorting column and direction\n     *\n     * @param $scope object: current scope\n     * @param element object: current DOM element\n     * @param sortColumn string: column from current DOM element\n     */\n    var _setSortableIcon = function($scope, element, sortColumn) {\n        // Add classes based on current sorted column\n        if($scope.table.order.column === sortColumn) {\n            if ($scope.table.order.ascending) {\n                $scope.sorted = 1;\n            } else {\n                $scope.sorted = -1;\n            }\n        } else {\n            $scope.sorted = 0;\n        }\n    };\n\n    return {\n        restrict: 'A',\n        scope: {\n            table: '='\n        },\n        transclude: true,\n        templateUrl: 'base/directives/sort_column.html',\n        link: function ($scope, element, attrs) {\n            // Watch the table ordering & sorting\n            $scope.$watchCollection('table.order', function() {\n                _setSortableIcon($scope, element, attrs.sortColumn);\n            });\n\n            // When element is clicked, set the table ordering & sorting based on this DOM element\n            element.on('click', function() {\n                if($scope.table.order.column === attrs.sortColumn) {\n                    $scope.table.order.ascending = !$scope.table.order.ascending;\n                    $scope.$apply();\n                } else {\n                    $scope.table.order.column = attrs.sortColumn;\n                    $scope.$apply();\n                }\n            });\n        }\n    }\n}\n","angular.module('app.directives').directive('ngSpinnerBar', ngSpinnerBar);\n\nngSpinnerBar.$inject = ['$rootScope'];\nfunction ngSpinnerBar ($rootScope) {\n    return {\n        link: function(scope, element, attrs) {\n            // by defult hide the spinner bar\n            element.addClass('hide'); // hide spinner bar by default\n\n            // display the spinner bar whenever the route changes(the content part started loading)\n            $rootScope.$on('$stateChangeStart', function() {\n                element.removeClass('hide'); // show spinner bar\n            });\n\n            // hide the spinner bar on rounte change success(after the content loaded)\n            $rootScope.$on('$stateChangeSuccess', function() {\n                element.addClass('hide'); // hide spinner bar\n                $('body').removeClass('page-on-load'); // remove page loading indicator\n\n                // auto scroll to page top\n                setTimeout(function () {\n                    Metronic.scrollTop(); // scroll to the top on content load\n                }, $rootScope.settings.layout.pageAutoScrollOnLoad);\n            });\n\n            // handle errors\n            $rootScope.$on('$stateNotFound', function() {\n                element.addClass('hide'); // hide spinner bar\n            });\n\n            // handle errors\n            $rootScope.$on('$stateChangeError', function() {\n                element.addClass('hide'); // hide spinner bar\n            });\n        }\n    };\n}\n","angular.module('app.filters').filter('minValue', minValue);\nfunction minValue () {\n    return function(values) {\n        values.sort(function(a, b){return a-b});\n        return values[0];\n    }\n}\n","angular.module('app.filters').filter('nl2br', nl2br);\n\nnl2br.$inject = ['$sce'];\nfunction nl2br ($sce) {\n    return function(msg,is_xhtml) {\n        var is_xhtml = is_xhtml || true;\n        var breakTag = (is_xhtml) ? '<br />' : '<br>';\n        var msg = (msg + '').replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1'+ breakTag +'$2');\n        return $sce.trustAsHtml(msg);\n    }\n}\n","/**\n * relativeDate filter is a filter that represents the date in a nice format\n *\n * relativeDate will return a relative date string given the date. If the\n * date is to far in the past, it will fallback to angulars $filter\n *\n * @param: date {date|string} : date object or date string to transform\n * @param: fallbackDateFormat string (optional): fallback $filter argument\n * @param: compareWithMidnight boolean (optional): should the date comparison be with midnight or not\n *\n * @returns: string : a relative date string\n *\n * usage:\n *\n * {{ '2014-11-19T12:44:15.795312+00:00' | relativeDate }}\n */\nangular.module('app.filters').filter('relativeDate', relativeDate);\n\nrelativeDate.$inject = ['$filter'];\nfunction relativeDate ($filter) {\n    return function (date, fallbackDateFormat, compareWithMidnight) {\n        // Get current date\n        var now = new Date(),\n            calculateDelta, day, delta, hour, minute, week, month, year;\n\n        // If date is a string, format to date object\n        if (!(date instanceof Date)) {\n            date = new Date(date);\n            if (compareWithMidnight) {\n                // In certain cases we want to compare with midnight\n                date.setHours(23);\n                date.setMinutes(59);\n                date.setSeconds(59);\n            }\n        }\n\n        delta = null;\n        minute = 60;\n        hour = minute * 60;\n        day = hour * 24;\n        week = day * 7;\n        month = day * 30;\n        year = day * 365;\n\n        // Calculate delta in seconds\n        calculateDelta = function () {\n            return delta = Math.round((date - now) / 1000);\n        };\n\n        calculateDelta();\n\n        if (delta > day && delta < week) {\n            date = new Date(date.getFullYear(), date.getMonth(), date.getDate());\n            if (compareWithMidnight) {\n                // In certain cases we want to compare with midnight\n                date.setHours(23);\n                date.setMinutes(59);\n                date.setSeconds(59);\n            }\n            calculateDelta();\n        }\n\n        if (!fallbackDateFormat) {\n            if (window.innerWidth < 992) {\n                // Display as a short version if it's a small screen (tablet, smartphone, etc.)\n                fallbackDateFormat = 'dd MMM. yyyy'; // Renders as 29 Jan. 2015\n            }\n            else {\n                fallbackDateFormat = 'dd MMMM yyyy'; // Renders as 29 January 2015\n            }\n        }\n\n        // Check delta and return result\n        if (delta < 0) {\n            switch (false) {\n                case !(-delta > week):\n                    return $filter('date')(date, fallbackDateFormat);\n                case !(-delta > day * 2):\n                    return '' + -(Math.ceil(delta / day)) + ' days ago';\n                case !(-delta > day):\n                    return 'yesterday';\n                case !(-delta > hour):\n                    return '' + -(Math.ceil(delta / hour)) + ' hours ago';\n                case !(-delta > minute * 2):\n                    return '' + -(Math.ceil(delta / minute)) + ' minutes ago';\n                case !(-delta > minute):\n                    return 'a minutes ago';\n                case !(-delta > 30):\n                    return '' + -delta + ' seconds ago';\n                default:\n                    return 'just now';\n            }\n        } else {\n            switch (false) {\n                case !(delta < 30):\n                    return 'just now';\n                case !(delta < minute):\n                    return '' + delta + ' seconds';\n                case !(delta < 2 * minute):\n                    return 'a minute';\n                case !(delta < hour):\n                    return '' + (Math.floor(delta / minute)) + ' minutes';\n                case Math.floor(delta / hour) !== 1:\n                    return 'an hour';\n                case !(delta < day):\n                    return '' + (Math.floor(delta / hour)) + ' hours';\n                case !(delta < day * 2):\n                    return 'tomorrow';\n                case !(delta < week):\n                    return '' + (Math.floor(delta / day)) + ' days';\n                case Math.floor(delta / week) !== 1:\n                    return 'a week';\n                default:\n                    // Use angular $filter\n                    return $filter('date')(date, fallbackDateFormat);\n            }\n        }\n    }\n}\n","angular.module('app.filters').filter('trustAsResourceUrl', trustAsResourceUrl);\n\ntrustAsResourceUrl.$inject = ['$sce'];\nfunction trustAsResourceUrl ($sce) {\n    return function(val) {\n        return $sce.trustAsResourceUrl(val);\n    };\n}\n","/**\n * Cookie Service provides a simple interface to get and store cookie values\n *\n * Set `prefix` to give cookie keys a prefix\n */\nangular.module('app.services').service('Cookie', Cookie);\n\nCookie.$inject = ['$cookieStore'];\nfunction Cookie ($cookieStore) {\n    function CookieFactory (prefix) {\n        return new Cookie(prefix);\n    }\n\n    function Cookie(prefix) {\n        this.prefix = prefix;\n    }\n\n    /**\n     * getCookieValue() tries to retrieve a value from the cookie, or returns default value\n     *\n     * @param field string: key to retrieve info from\n     * @param defaultValue {*}: default value when nothing set on cache\n     * @returns {*}: retrieved or default value\n     */\n    Cookie.prototype.get = function (field, defaultValue) {\n        try {\n            var value = $cookieStore.get(this.prefix + field);\n            return (value !== undefined) ? value : defaultValue;\n        } catch (error) {\n            $cookieStore.remove(this.prefix + field);\n            return defaultValue;\n        }\n    };\n\n    /**\n     * setCookieValue() sets value on the cookie\n     *\n     * It prefixes the field to make field unique for this controller\n     *\n     * @param field string: the key on which to store the value\n     * @param value {*}: JSON serializable object to store\n     */\n    Cookie.prototype.put = function (field, value) {\n        $cookieStore.put(this.prefix + field, value);\n    };\n\n    return CookieFactory;\n}\n","angular.module('app.services').service('HLDate', HLDate);\n\nfunction HLDate () {\n    /**\n     * getSubtractedDate() subtracts x amount of days from the current date\n     *\n     * @param days (int): amount of days to subtract from the current date\n     *\n     * @returns (string): returns the subtracted date in a yyyy-mm-dd format\n     */\n    this.getSubtractedDate = function (days) {\n        var date = new Date();\n        date.setDate(date.getDate() - days);\n\n        return date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();\n    };\n}\n","angular.module('app.services').service('HLFilters', HLFilters);\n\nfunction HLFilters () {\n    this.updateFilterQuery = function ($scope) {\n        $scope.table.filterQuery = '';\n        $scope.displayFilterClear = false;\n        var filterStrings = [];\n\n        for (var i = 0; i < $scope.filterList.length; i++) {\n            var filter = $scope.filterList[i];\n            if (filter.id && filter.id == 'archived') {\n                if (!filter.selected) {\n                    filterStrings.push('archived:false');\n                }\n                else {\n                    $scope.displayFilterClear = true;\n                }\n            }\n            else {\n                if (filter.selected) {\n                    filterStrings.push(filter.value);\n                    $scope.displayFilterClear = true;\n                }\n            }\n        }\n\n        $scope.table.filterQuery = filterStrings.join(' AND ');\n    };\n\n    this.clearFilters = function ($scope) {\n        for (var i = 0; i < $scope.filterList.length; i++) {\n            $scope.filterList[i].selected = false;\n        }\n\n        $scope.updateFilterQuery();\n    };\n}\n","angular.module('app.services').service('HLText', HLText);\nfunction HLText () {\n    /**\n     * hlCapitalize() lowercases the whole string and makes the first character uppercase\n     * This means 'STRING' becomes 'String'\n     *\n     * @returns (string): returns a string with only the first character uppercased\n     */\n    String.prototype.hlCapitalize = function () {\n        var newString = this.toLowerCase();\n        return newString.charAt(0).toUpperCase() + newString.substring(1);\n    }\n}\n","angular.module('app.services').factory('Notifications', Notifications);\n\nNotifications.$inject = ['$resource'];\n\nfunction Notifications ($resource) {\n    return $resource('/api/utils/notifications/');\n}\n","angular.module('app.cases').controller('CaseAssignModal', CaseAssignModal);\n\nCaseAssignModal.$inject = ['$modalInstance', 'myCase', 'Case', 'User'];\nfunction CaseAssignModal ($modalInstance, myCase, Case, User) {\n    var vm = this;\n    vm.myCase = myCase;\n    vm.currentAssigneeId = myCase.assigned_to_id;\n    vm.users = [];\n\n    vm.ok = ok;\n    vm.cancel = cancel;\n\n    activate();\n\n    ////\n\n    function activate() {\n        _getUsers();\n    }\n\n    function _getUsers() {\n        User.query({}, function(data) {\n            vm.users = data;\n        });\n    }\n\n    function ok () {\n        // Update the assigned_to of the case and close the modal\n        Case.update({id: vm.myCase.id, assigned_to: vm.currentAssigneeId}).$promise.then(function () {\n            $modalInstance.close();\n        });\n    }\n\n    function cancel () {\n        $modalInstance.dismiss('cancel');\n    }\n}\n","angular.module('app.cases').config(caseConfig);\n\ncaseConfig.$inject = ['$stateProvider'];\nfunction caseConfig ($stateProvider) {\n    $stateProvider.state('base.cases.create', {\n        url: '/create',\n        views: {\n            '@': {\n                templateUrl: '/cases/create',\n                controller: CaseCreateController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Create'\n        }\n    });\n    $stateProvider.state('base.cases.create.fromContact', {\n        url: '/contact/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: function(elem, attr) {\n                    return '/cases/create/from_contact/' + elem.id +'/';\n                },\n                controller: CaseCreateController\n            }\n        },\n        ncyBreadcrumb: {\n            skip: true\n        }\n    });\n    $stateProvider.state('base.cases.create.fromAccount', {\n        url: '/account/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: function(elem, attr) {\n                    return '/cases/create/from_account/' + elem.id +'/';\n                },\n                controller: CaseCreateController\n            }\n        },\n        ncyBreadcrumb: {\n            skip: true\n        }\n    });\n}\n\nangular.module('app.cases').controller('CaseCreateController', CaseCreateController);\n\nCaseCreateController.$inject = ['$scope'];\nfunction CaseCreateController ($scope) {\n    $scope.conf.pageTitleBig = 'New case';\n    $scope.conf.pageTitleSmall = 'making cases';\n    HLCases.addAssignToMeButton();\n    HLSelect2.init();\n}\n","angular.module('app.cases').config(caseConfig);\n\ncaseConfig.$inject = ['$stateProvider'];\nfunction caseConfig ($stateProvider) {\n    $stateProvider.state('base.cases.detail.delete', {\n        url: '/delete',\n        views: {\n            '@': {\n                controller: CaseDeleteController\n            }\n        }\n    });\n\n}\n\nangular.module('app.cases').controller('CaseDeleteController', CaseDeleteController);\n\nCaseDeleteController.$inject = ['$http', '$state', '$stateParams'];\nfunction CaseDeleteController ($http, $state, $stateParams) {\n    var id = $stateParams.id;\n\n    var req = {\n        method: 'POST',\n        url: '/cases/delete/' + id + '/',\n        headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n    };\n\n    $http(req).\n        success(function(data, status, headers, config) {\n            $state.go('base.cases');\n        }).\n        error(function(data, status, headers, config) {\n            $state.go('base.cases');\n        });\n}\n","angular.module('app.cases').config(caseConfig);\n\ncaseConfig.$inject = ['$stateProvider'];\nfunction caseConfig ($stateProvider) {\n    $stateProvider.state('base.cases.detail', {\n        url: '/{id:[0-9]{1,}}',\n        views: {\n            '@': {\n                templateUrl: 'cases/controllers/detail.html',\n                controller: CaseDetailController,\n                controllerAs: 'vm'\n            }\n        },\n        ncyBreadcrumb: {\n            label: '{{ case.subject }}'\n        }\n    });\n}\n\nangular.module('app.cases').controller('CaseDetailController', CaseDetailController);\n\nCaseDetailController.$inject = ['$http', '$modal', '$scope', '$state', '$stateParams', 'CaseDetail', 'CaseStatuses'];\nfunction CaseDetailController ($http, $modal, $scope, $state, $stateParams, CaseDetail, CaseStatuses) {\n    var vm = this;\n    $scope.conf.pageTitleBig = 'Case';\n    $scope.conf.pageTitleSmall = 'the devil is in the details';\n    var id = $stateParams.id;\n    vm.case = CaseDetail.get({id: id});\n    vm.caseStatuses = CaseStatuses.query();\n\n    vm.getPriorityDisplay = getPriorityDisplay;\n    vm.changeCaseStatus = changeCaseStatus;\n    vm.assignCase = assignCase;\n    vm.archive = archive;\n    vm.unarchive = unarchive;\n    vm.openPostponeWidget = openPostponeWidget;\n\n\n    //////\n\n    /**\n     *\n     * @returns {string}: A string which states what label should be displayed\n     */\n    function getPriorityDisplay () {\n        if (vm.case.is_archived) {\n            return 'label-default';\n        } else {\n            switch (vm.case.priority) {\n                case 0:\n                    return 'label-success';\n                case 1:\n                    return 'label-info';\n                case 2:\n                    return 'label-warning';\n                case 3:\n                    return 'label-danger';\n                default :\n                    return 'label-info';\n            }\n        }\n    }\n\n    function changeCaseStatus (status) {\n        // TODO: LILY-XXX: Temporary call to change status of a case, will be replaced with an new API call later\n        var req = {\n            method: 'POST',\n            url: '/cases/update/status/' + vm.case.id + '/',\n            data: 'status=' + status,\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        $http(req).\n            success(function(data, status, headers, config) {\n                vm.case.status = data.status;\n            }).\n            error(function(data, status, headers, config) {\n                // Request failed proper error?\n            });\n    }\n\n    function assignCase () {\n        var assignee = '';\n\n        if (vm.case.assigned_to_id != currentUser.id) {\n            assignee = currentUser.id;\n        }\n\n        var req = {\n            method: 'POST',\n            url: '/cases/update/assigned_to/' + vm.case.id + '/',\n            data: 'assignee=' + assignee,\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        $http(req).\n            success(function(data, status, headers, config) {\n                if (data.assignee) {\n                    vm.case.assigned_to_id = data.assignee.id;\n                    vm.case.assigned_to_name = data.assignee.name;\n                }\n                else {\n                    vm.case.assigned_to_id = null;\n                    vm.case.assigned_to_name = null;\n                }\n            }).\n            error(function(data, status, headers, config) {\n                // Request failed propper error?\n            });\n    }\n\n    /**\n     * Archive a deal.\n     * TODO: LILY-XXX: Change to API based archiving\n     */\n    function archive (id) {\n        var req = {\n            method: 'POST',\n            url: '/cases/archive/',\n            data: 'id=' + id,\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        $http(req).\n            success(function(data, status, headers, config) {\n                vm.case.archived = true;\n            }).\n            error(function(data, status, headers, config) {\n                // Request failed propper error?\n            });\n    }\n\n    /**\n     * Unarchive a deal.\n     * TODO: LILY-XXX: Change to API based unarchiving\n     */\n    function unarchive (id) {\n        var req = {\n            method: 'POST',\n            url: '/cases/unarchive/',\n            data: 'id=' + id,\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        $http(req).\n            success(function(data, status, headers, config) {\n                vm.case.archived = false;\n            }).\n            error(function(data, status, headers, config) {\n                // Request failed propper error?\n            });\n    }\n\n    function openPostponeWidget (myCase) {\n        var modalInstance = $modal.open({\n            templateUrl: 'cases/controllers/postpone.html',\n            controller: 'CasePostponeModal',\n            controllerAs: 'vm',\n            size: 'sm',\n            resolve: {\n                myCase: function() {\n                    return myCase\n                }\n            }\n        });\n\n        modalInstance.result.then(function() {\n            $state.go($state.current, {}, {reload: true});\n        });\n    }\n}\n","angular.module('app.cases').config(caseConfig);\n\ncaseConfig.$inject = ['$stateProvider'];\nfunction caseConfig ($stateProvider) {\n    $stateProvider.state('base.cases.detail.edit', {\n        url: '/edit',\n        views: {\n            '@': {\n                templateUrl: function (elem, attr) {\n                    return '/cases/update/' + elem.id + '/';\n                },\n                controller: CaseEditController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Edit'\n        }\n    });\n}\n\nangular.module('app.cases').controller('CaseEditController', CaseEditController);\n\nCaseEditController.$inject = ['$scope', '$stateParams', 'CaseDetail'];\nfunction CaseEditController ($scope, $stateParams, CaseDetail) {\n    var id = $stateParams.id;\n    var casePromise = CaseDetail.get({id: id}).$promise;\n\n    casePromise.then(function(caseObject) {\n        $scope.case = caseObject;\n        $scope.conf.pageTitleBig = caseObject.subject;\n        $scope.conf.pageTitleSmall = 'change is natural';\n        HLSelect2.init();\n    });\n}\n","angular.module('app.cases').config(caseConfig);\n\ncaseConfig.$inject = ['$stateProvider'];\nfunction caseConfig ($stateProvider) {\n    $stateProvider.state('base.cases', {\n        url: '/cases',\n        views: {\n            '@': {\n                templateUrl: 'cases/controllers/list.html',\n                controller: CaseListController\n            }\n        },\n        ncyBreadcrumb: {\n            label: 'Cases'\n        }\n    });\n}\n\nangular.module('app.cases').controller('CaseListController', CaseListController);\n\nCaseListController.$inject = ['$http', '$location', '$modal', '$scope', '$state', 'Case', 'Cookie', 'HLDate', 'HLFilters'];\nfunction CaseListController ($http, $location, $modal, $scope, $state, Case, Cookie, HLDate, HLFilters) {\n    var cookie = Cookie('caseList');\n\n    $scope.conf.pageTitleBig = 'Cases';\n    $scope.conf.pageTitleSmall = 'do all your lookin\\' here';\n\n    // Setup search query\n    var searchQuery = '';\n\n    // Check if filter is set as query parameter\n    var search = $location.search().search;\n    if (search != undefined) {\n        searchQuery = search;\n    } else {\n        // Get searchQuery from cookie\n        searchQuery = cookie.get('searchQuery', '');\n    }\n\n    /**\n     * table object: stores all the information to correctly display the table\n     */\n    $scope.table = {\n        page: 1,  // current page of pagination: 1-index\n        pageSize: 60,  // number of items per page\n        totalItems: 0, // total number of items\n        searchQuery: searchQuery,  // search query\n        archived: cookie.get('archived', false),\n        order: cookie.get('order', {\n            ascending: true,\n            column: 'expires'  // string: current sorted column\n        }),\n        visibility: cookie.get('visibility', {\n            caseId: true,\n            client: true,\n            subject: true,\n            priority: true,\n            type: true,\n            status: true,\n            expires: true,\n            assignedTo: true,\n            createdBy: true,\n            tags: true\n        })\n    };\n\n    $scope.displayFilterClear = false;\n\n    getFilterList();\n\n    /**\n     * Gets the filter list. Is either the value in the cookie or a new list\n     *\n     * @returns filterList (object): object containing the filter list\n     */\n    function getFilterList() {\n        var filterListCookie = cookie.get('filterList', null);\n\n        if (!filterListCookie) {\n            var filterList = [\n                {\n                    name: 'Assigned to me',\n                    value: 'assigned_to_id:' + $scope.currentUser.id,\n                    selected: false\n                },\n                {\n                    name: 'Assigned to nobody',\n                    value: 'NOT(assigned_to_id:*)',\n                    selected: false\n                },\n                {\n                    name: 'Expired 7 days or more ago',\n                    value: 'expires:[* TO ' + HLDate.getSubtractedDate(7) + ']',\n                    selected: false\n                },\n                {\n                    name: 'Expired 30 days or more ago',\n                    value: 'expires:[* TO ' + HLDate.getSubtractedDate(30) + ']',\n                    selected: false\n                },\n                {\n                    name: 'Archived',\n                    value: '',\n                    selected: false,\n                    id: 'archived'\n                }\n            ];\n\n            // Update filterList for now\n            $scope.filterList = filterList;\n\n            Case.getCaseTypes().then(function (cases) {\n                for (var key in cases) {\n                    if (cases.hasOwnProperty(key)) {\n                        filterList.push({\n                            name: 'Case type ' + cases[key],\n                            value: 'casetype_id:' + key,\n                            selected: false\n                        });\n                    }\n                }\n\n                // Update filterList once AJAX call is done\n                $scope.filterList = filterList;\n                // Watch doesn't get triggered here, so manually call updateTableSettings\n                updateTableSettings();\n            });\n        } else {\n            // Cookie is set, so use it as the filterList\n            $scope.filterList = filterListCookie;\n        }\n    }\n\n    /**\n     * updateTableSettings() sets scope variables to the cookie\n     */\n    function updateTableSettings() {\n        cookie.put('searchQuery', $scope.table.searchQuery);\n        cookie.put('archived', $scope.table.archived);\n        cookie.put('order', $scope.table.order);\n        cookie.put('visibility', $scope.table.visibility);\n        cookie.put('filterList', $scope.filterList);\n    }\n\n    /**\n     * updateCases() reloads the cases through a service\n     *\n     * Updates table.items and table.totalItems\n     */\n    function updateCases() {\n        Case.getCases(\n            $scope.table.searchQuery,\n            $scope.table.page,\n            $scope.table.pageSize,\n            $scope.table.order.column,\n            $scope.table.order.ascending,\n            $scope.table.archived,\n            $scope.table.filterQuery\n        ).then(function (data) {\n                $scope.table.items = data.cases;\n                $scope.table.totalItems = data.total;\n            }\n        );\n    }\n\n    /**\n     * Watches the model info from the table that, when changed,\n     * needs a new set of cases\n     */\n    $scope.$watchGroup([\n        'table.page',\n        'table.order.column',\n        'table.order.ascending',\n        'table.searchQuery',\n        'table.archived',\n        'table.filterQuery'\n    ], function () {\n        updateTableSettings();\n        updateCases();\n    });\n\n    /**\n     * Watches the model info from the table that, when changed,\n     * needs to store the info to the cache\n     */\n    $scope.$watchCollection('table.visibility', function () {\n        updateTableSettings();\n    });\n\n    /**\n     * Watches the filters so when the cookie is loaded,\n     * the filterQuery changes and a new set of deals is fetched\n     */\n    $scope.$watchCollection('filterList', function () {\n        $scope.updateFilterQuery();\n    });\n\n    /**\n     * setSearchQuery() sets the search query of the table\n     *\n     * @param queryString string: string that will be set as the new search query on the table\n     */\n    $scope.setSearchQuery = function (queryString) {\n        $scope.table.searchQuery = queryString;\n    };\n\n    $scope.toggleArchived = function () {\n        $scope.table.archived = !$scope.table.archived;\n    };\n\n    $scope.updateFilterQuery = function () {\n        HLFilters.updateFilterQuery($scope);\n    };\n\n    $scope.clearFilters = function () {\n        HLFilters.clearFilters($scope);\n    };\n\n    /**\n     * Deletes the case in django and updates the angular view\n     */\n    $scope.delete = function(id, subject, cases) {\n        var req = {\n            method: 'POST',\n            url: '/cases/delete/' + id + '/',\n            headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=utf-8'}\n        };\n\n        if(confirm('Are you sure you want to delete case ' + subject + '?')){\n            $http(req).\n                success(function(data, status, headers, config) {\n                    var index = $scope.table.items.indexOf(cases);\n                    $scope.table.items.splice(index, 1);\n                }).\n                error(function(data, status, headers, config) {\n                    // Request failed proper error?\n                });\n        }\n    };\n\n    $scope.assignTo = function(myCase) {\n        var modalInstance = $modal.open({\n            templateUrl: 'cases/controllers/assignto.html',\n            controller: 'CaseAssignModal',\n            controllerAs: 'vm',\n            size: 'sm',\n            resolve: {\n                myCase: function() {\n                    return myCase;\n                }\n            }\n        });\n\n        modalInstance.result.then(function() {\n            $state.go($state.current, {}, {reload: true});\n        });\n    };\n}\n","angular.module('app.cases').controller('CasePostponeModal', CasePostponeModal);\n\nCasePostponeModal.$inject = ['$filter', '$modalInstance', '$scope', 'Case', 'myCase'];\nfunction CasePostponeModal ($filter, $modalInstance, $scope, Case, myCase) {\n    var vm = this;\n    vm.myCase = myCase;\n    vm.pickerIsOpen = false;\n    vm.expireDate = new Date(myCase.expires);\n    vm.dateFormat = 'dd MMMM yyyy';\n    vm.datepickerOptions = {\n        startingDay: 1\n    };\n\n    vm.disabledDates = disabledDates;\n    vm.openDatePicker = openDatePicker;\n    vm.postponeWithDays = postponeWithDays;\n    vm.getFutureDate = getFutureDate;\n\n    activate();\n\n    ////\n\n    function activate() {\n        _watchCloseDatePicker();\n    }\n\n    /**\n     * When the datepicker popup is closed, update model and close modal\n     *\n     * @private\n     */\n    function _watchCloseDatePicker () {\n        $scope.$watch('vm.pickerIsOpen', function(newValue, oldValue) {\n            if (!newValue && oldValue) {\n                _updateDayAndCloseModal();\n            }\n        });\n    }\n\n    function _updateDayAndCloseModal() {\n        if (vm.expireDate != new Date(myCase.expires)) {\n            // Update the expire date for this case\n            var newDate = $filter('date')(vm.expireDate, 'yyyy-MM-dd');\n            Case.update({id: myCase.id}, {expires: newDate}, function() {\n                $modalInstance.close();\n            })\n        } else {\n            $modalInstance.close();\n        }\n    }\n    function disabledDates (date, mode) {\n        return ( mode === 'day' && ( date.getDay() === 0 || date.getDay() === 6 ) );\n    }\n\n    function openDatePicker ($event) {\n        $event.preventDefault();\n        $event.stopPropagation();\n        vm.pickerIsOpen = true;\n    }\n\n    function postponeWithDays (days) {\n        vm.expireDate.setDate(vm.expireDate.getDate() + days);\n        _updateDayAndCloseModal();\n    }\n\n    function getFutureDate(days) {\n        var futureDate = new Date(vm.expireDate);\n        return futureDate.setDate(futureDate.getDate() + days);\n    }\n}\n","angular.module('app.cases.directives').directive('caseListWidget', CaseListWidget);\nfunction CaseListWidget(){\n    return {\n        restrict: 'E',\n        replace: true,\n        scope: {\n            title: '@',\n            list: '=',\n            height: '=',\n            addLink: '@'\n        },\n        templateUrl: 'cases/directives/list_widget.html'\n    }\n}\n","angular.module('app.cases.directives').directive('updateCaseExpireDate', updateCaseExpireDate);\n\nfunction updateCaseExpireDate () {\n    return {\n        restrict: \"A\",\n        link: function(scope, element, attrs) {\n\n            var select = $('#id_priority');\n            var daysToAdd = [5, 3, 1, 0];\n\n            select.on('change', function(event) {\n                var priority = parseInt(select.val());\n                if(isNaN(select.val())){\n                    priority = 3;\n                }\n                var due = addBusinessDays(new Date(), daysToAdd[priority]);\n                var month = due.getMonth() + 1;\n                if(month < 10){\n                    month = '0' + month;\n                }\n                var expires = due.getDate() + '/' + month + '/' + due.getFullYear();\n                $('#id_expires').val(expires);\n                $('#id_expires_picker').datepicker('update', expires);\n            });\n        }\n    }\n}\n","angular.module('app.cases.services').factory('Case', Case);\n\nCase.$inject = ['$http', '$resource', '$q', 'AccountDetail', 'ContactDetail'];\nfunction Case ($http, $resource, $q, AccountDetail, ContactDetail) {\n\n    var Case = $resource(\n        '/api/cases/case/:id',\n        {},\n        {\n            query: {\n                url: '/search/search/?type=cases_case&filterquery=:filterquery',\n                isArray: true,\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    var objects = [];\n                    if (data && data.hits && data.hits.length > 0) {\n                        data.hits.forEach(function(obj) {\n                            objects.push(obj);\n                        });\n                    }\n                    return objects;\n                }\n            },\n            update: {\n                method: 'PATCH',\n                params: {\n                    id: '@id'\n                }\n            }\n        }\n    );\n\n    Case.getCases = getCases;\n    Case.getCaseTypes = getCaseTypes;\n    Case.getMyCasesWidget = getMyCasesWidget;\n    Case.getCallbackRequests = getCallbackRequests;\n    Case.getUnassignedCasesForTeam = getUnassignedCasesForTeam;\n\n    return Case;\n\n    /////////\n\n    /**\n     * getCases() gets the cases from the search backend through a promise\n     *\n     * @param queryString string: current filter on the caselist\n     * @param page int: current page of pagination\n     * @param pageSize int: current page size of pagination\n     * @param orderColumn string: current sorting of cases\n     * @param orderedAsc {boolean}: current ordering\n     * @param archived {boolean}: when true, only archived are fetched, if false, only active\n     * @param filterQuery {string}: contains the filters which are used in ElasticSearch\n     *\n     * @returns Promise object: when promise is completed:\n     *      {\n     *          cases list: paginated cases objects\n     *          total int: total number of case objects\n     *      }\n     */\n    function getCases (queryString, page, pageSize, orderColumn, orderedAsc, archived, filterQuery) {\n\n        return $http({\n            url: '/search/search/',\n            method: 'GET',\n            params: {\n                type: 'cases_case',\n                q: queryString,\n                page: page - 1,\n                size: pageSize,\n                sort: _getSorting(orderColumn, orderedAsc),\n                filterquery: filterQuery\n            }\n        }).then(function(response) {\n            return {\n                cases: response.data.hits,\n                total: response.data.total\n            };\n        });\n    }\n\n    function getCaseTypes () {\n        return $http({\n            url: '/cases/casetypes/',\n            method: 'GET'\n        }).then(function (response) {\n            return response.data.casetypes;\n        });\n    }\n\n    function _getSorting (field, sorting) {\n        var sort = '';\n        sort += sorting ? '-': '';\n        sort += field;\n        return sort;\n    }\n\n    /**\n     * Service to return a resource for my cases widget\n     */\n    function getMyCasesWidget (field, sorting) {\n        var deferred = $q.defer();\n        var filterQuery = 'archived:false AND NOT casetype_name:Callback';\n        filterQuery += ' AND assigned_to_id:' + currentUser.id;\n        Case.query({\n            filterquery: filterQuery,\n            sort: _getSorting(field, sorting)\n        }, function (cases) {\n            deferred.resolve(cases);\n        });\n\n        return deferred.promise;\n    }\n\n    /**\n     * Gets all cases with the 'callback' case type\n     *\n     * @returns cases with the callback case type\n     */\n    function getCallbackRequests (field, sorting) {\n        var filterQuery = 'archived:false AND casetype_name:Callback';\n        filterQuery += ' AND assigned_to_id:' + currentUser.id;\n\n        var deferred = $q.defer();\n        Case.query({\n            filterquery: filterQuery,\n            sort: _getSorting(field, sorting)\n        }, function (cases) {\n            angular.forEach(cases, function(callbackCase) {\n                if (callbackCase.account) {\n                    AccountDetail.get({id: callbackCase.account}, function(account) {\n                        callbackCase.accountPhone = account.phone;\n                    });\n                }\n                if (callbackCase.contact) {\n                    ContactDetail.get({id: callbackCase.contact}, function(contact) {\n                        callbackCase.contactPhone = contact.phone;\n                    });\n                }\n            });\n            deferred.resolve(cases);\n        });\n        return deferred.promise;\n    }\n\n    function getUnassignedCasesForTeam (teamId, field, sorting) {\n        var filterQuery = 'archived:false AND _missing_:assigned_to_id';\n        filterQuery += ' AND assigned_to_groups:' + teamId;\n\n        return Case.query({\n            filterquery: filterQuery,\n            sort: _getSorting(field, sorting)\n        }).$promise;\n    }\n}\n","/**\n * $resource for Case model, now only used for detail page.\n */\nangular.module('app.cases.services').factory('CaseDetail', CaseDetail);\n\nCaseDetail.$inject = ['$resource'];\nfunction CaseDetail ($resource) {\n    return $resource(\n        '/search/search/?type=cases_case&filterquery=id\\::id',\n        {},\n        {\n            get: {\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    if (data && data.hits && data.hits.length > 0) {\n                        var obj = data.hits[0];\n                        return obj;\n                    }\n                    return null;\n                }\n            },\n            query: {\n                url: '/search/search/?type=cases_case&filterquery=:filterquery',\n                isArray: true,\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    var objects = [];\n                    if (data && data.hits && data.hits.length > 0) {\n                        data.hits.forEach(function(obj) {\n                            obj = $.extend(obj, {historyType: 'case', color: 'grey', date: obj.expires});\n                            objects.push(obj);\n                        });\n                    }\n                    return objects;\n                }\n            },\n            totalize: {\n                url: '/search/search/?type=cases_case&size=0&filterquery=:filterquery',\n                transformResponse: function(data) {\n                    data = angular.fromJson(data);\n                    if (data && data.total) {\n                        return {total: data.total};\n                    }\n                    return {total: 0};\n                }\n            }\n        }\n    );\n}\n","angular.module('app.cases.services').factory('CaseStatuses', CaseStatuses);\n\nCaseStatuses.$inject = ['$resource'];\nfunction CaseStatuses ($resource) {\n    return $resource('/api/cases/statuses');\n}\n","angular.module('app.cases.services').factory('UnassignedTeamCases', UnassignedTeamCases);\n\nUnassignedTeamCases.$inject = ['$resource'];\nfunction UnassignedTeamCases ($resource) {\n    return $resource('/api/cases/teams/:teamId/?is_assigned=False&is_archived=false&is_deleted=False')\n}\n"],"sourceRoot":"/source/"}